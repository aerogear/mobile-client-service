{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResizeSensor } from 'css-element-queries';\nimport { debounce } from '../../common/helpers';\n\nvar CardHeightMatching = function (_React$Component) {\n  _inherits(CardHeightMatching, _React$Component);\n\n  function CardHeightMatching(props) {\n    _classCallCheck(this, CardHeightMatching);\n\n    var _this = _possibleConstructorReturn(this, (CardHeightMatching.__proto__ || Object.getPrototypeOf(CardHeightMatching)).call(this, props));\n\n    _this._selectors = Array.isArray(props.selector) ? props.selector : [props.selector];\n    _this._resizeSensors = [];\n    return _this;\n  }\n\n  _createClass(CardHeightMatching, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // schedule the initial height matching\n      this._matchHeights();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this; // if the container got updated, let's match heights again\n\n\n      setTimeout(function () {\n        _this2._matchHeights();\n      }, 0);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._removeSensors();\n    }\n  }, {\n    key: '_addSensors',\n    value: function _addSensors() {\n      var _this3 = this; // setup the event listening on '_container' for our height matching selectors\n\n\n      this._selectors.forEach(function (selector) {\n        var elements = _this3._container.querySelectorAll(selector);\n\n        _this3._resizeSensors.push(new ResizeSensor(elements, debounce(function () {\n          return _this3._matchHeights([selector]);\n        }, 200)));\n      });\n    }\n  }, {\n    key: '_removeSensors',\n    value: function _removeSensors() {\n      this._resizeSensors.forEach(function (sensor) {\n        sensor.detach();\n      });\n\n      this._resizeSensors = [];\n    }\n  }, {\n    key: '_matchHeights',\n    value: function _matchHeights() {\n      var _this4 = this;\n\n      var selectors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._selectors;\n\n      if (!this._container) {\n        return;\n      } // Remove any existing sensors so they do not detect changes made here\n\n\n      this._removeSensors();\n\n      var arrayMap = function arrayMap(elements) {\n        return Array.prototype.map.call(elements, function (el) {\n          return el.scrollHeight;\n        }).reduce(function (pre, cur) {\n          return Math.max(pre, cur);\n        }, -Infinity);\n      };\n\n      selectors.forEach(function (selector) {\n        var elements = _this4._container.querySelectorAll(selector);\n\n        elements.forEach(function (el) {\n          el.style.height = null;\n        });\n        var maxHeight = arrayMap(elements);\n        elements.forEach(function (el) {\n          el.style.height = maxHeight + 'px';\n        });\n      }); // Add resize sensors to watch for resizes\n\n      this._addSensors();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      return React.createElement('div', {\n        className: this.props.className,\n        ref: function ref(node) {\n          _this5._container = node;\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return CardHeightMatching;\n}(React.Component);\n\nCardHeightMatching.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  selector: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired\n};\nCardHeightMatching.defaultProps = {\n  className: ''\n};\nexport default CardHeightMatching;","map":null,"metadata":{},"sourceType":"module"}