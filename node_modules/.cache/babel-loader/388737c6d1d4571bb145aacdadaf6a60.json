{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'bootstrap-slider-without-jquery';\nvar orientation = {\n  horizontal: 'horizontal',\n  vertical: 'vertical'\n};\n\nvar BootstrapSlider = function (_React$Component) {\n  _inherits(BootstrapSlider, _React$Component);\n\n  function BootstrapSlider() {\n    _classCallCheck(this, BootstrapSlider);\n\n    return _possibleConstructorReturn(this, (BootstrapSlider.__proto__ || Object.getPrototypeOf(BootstrapSlider)).apply(this, arguments));\n  }\n\n  _createClass(BootstrapSlider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.slider = new Slider(this.sliderDiv, _extends({}, this.props));\n\n      var onSlide = function onSlide(value) {\n        _this2.props.onSlide(value);\n\n        _this2.slider.setValue(value);\n      };\n\n      this.slider.on('slide', onSlide);\n      this.slider.on('slideStop', onSlide);\n    } // Instead of rendering the slider element again and again,\n    // we took advantage of the bootstrap-slider library\n    // and only update the new value or format when new props arrive.\n\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.slider.setValue(nextProps.value); // Sets the tooltip format.\n\n      this.slider.setAttribute('formatter', nextProps.formatter); // Adjust the tooltip to \"sit\" ontop of the slider's handle. #LibraryBug\n      // check\n\n      if (this.props.orientation === orientation.horizontal) {\n        this.slider.tooltip.style.marginLeft = '-' + this.slider.tooltip.offsetWidth / 2 + 'px';\n\n        if (this.props.ticks_labels && this.slider.tickLabelContainer) {\n          this.slider.tickLabelContainer.style.marginTop = '0px';\n        }\n      } else {\n        this.slider.tooltip.style.marginTop = '-' + this.slider.tooltip.offsetHeight / 2 + 'px';\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement('input', {\n        className: 'slider-pf',\n        type: 'range',\n        ref: function ref(input) {\n          _this3.sliderDiv = input;\n        }\n      });\n    }\n  }]);\n\n  return BootstrapSlider;\n}(React.Component);\n\nBootstrapSlider.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.number]).isRequired,\n  formatter: PropTypes.func,\n  onSlide: PropTypes.func,\n  orientation: PropTypes.string,\n  ticks_labels: PropTypes.array\n};\nBootstrapSlider.defaultProps = {\n  formatter: function formatter(v) {\n    return v;\n  },\n  onSlide: function onSlide(event) {\n    return event;\n  },\n  orientation: 'horizontal',\n  ticks_labels: []\n};\nexport default BootstrapSlider;","map":null,"metadata":{},"sourceType":"module"}