{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport PropTypes from 'prop-types';\nimport { compose, setDisplayName, mapProps, defaultProps, setPropTypes } from 'recompose';\nimport C3Chart from 'react-c3js';\nimport { c3ChartDefaults } from '../../common/patternfly';\n/**\n * Chart defaults\n */\n\nvar CHART_CONFIG = {\n  AREA_CHART: {\n    type: 'area',\n    displayName: 'AreaChart',\n    className: 'area-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultAreaConfig()\n  },\n  BAR_CHART: {\n    type: 'bar',\n    displayName: 'BarChart',\n    className: 'bar-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultBarConfig()\n  },\n  DONUT_CHART: {\n    type: 'donut',\n    displayName: 'DonutChart',\n    className: 'donut-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultDonutConfig()\n  },\n  GROUPED_BAR_CHART: {\n    type: 'bar',\n    displayName: 'GroupedBarChart',\n    className: 'bar-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultGroupedBarConfig()\n  },\n  LINE_CHART: {\n    type: 'line',\n    displayName: 'LineChart',\n    className: 'line-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultLineConfig()\n  },\n  PIE_CHART: {\n    type: 'pie',\n    displayName: 'PieChart',\n    className: 'pie-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultPieConfig()\n  },\n  SINGLE_AREA_CHART: {\n    type: 'area',\n    displayName: 'SingleAreaChart',\n    className: 'area-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultSingleAreaConfig()\n  },\n  SINGLE_LINE_CHART: {\n    type: 'line',\n    displayName: 'SingleLineChart',\n    className: 'line-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultSingleLineConfig()\n  },\n  SPARKLINE_CHART: {\n    type: 'area',\n    displayName: 'SparklineChart',\n    className: 'chart-pf-sparkline',\n    defaultConfig: c3ChartDefaults.getDefaultSparklineConfig()\n  },\n  STACKED_BAR_CHART: {\n    type: 'bar',\n    displayName: 'StackedBarChart',\n    className: 'bar-chart-pf',\n    defaultConfig: c3ChartDefaults.getDefaultStackedBarConfig()\n  }\n};\n/**\n * Helper functions\n */\n\nvar mapChartProps = function mapChartProps(name, props) {\n  var newProps = _extends({}, props); // Set chart type\n\n\n  if (props.data && !props.data.type) {\n    newProps.data.type = props.type;\n  }\n\n  return newProps;\n};\n\nvar getComposer = function getComposer(name) {\n  var config = CHART_CONFIG[name];\n  return compose(setDisplayName(config.displayName), setPropTypes(_extends({\n    data: PropTypes.object.isRequired\n  }, C3Chart.propTypes)), defaultProps(_extends({\n    type: config.type,\n    className: config.className\n  }, config.defaultConfig)), mapProps(function (props) {\n    return mapChartProps(name, props);\n  }));\n};\n/**\n * Exports functions\n */\n\n\nexport { getComposer, CHART_CONFIG };","map":null,"metadata":{},"sourceType":"module"}