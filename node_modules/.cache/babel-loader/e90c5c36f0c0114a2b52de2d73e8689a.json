{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * This constraint is used to constraint the ruleset to the value of a given field in the form.\n * The configuration to be put into the JSON file for this rule must be as follows:\n * {\n *   \"type\": \"FIELD_VALUE\",  // this must be exactly 'FIELD_VALUE'\n *   \"name\": \"field_name\",   // the name of the field to be checked\n *   \"value\": \"value\"        // the value to be checked\n * }\n */\nexport var FieldValueConstraint =\n/*#__PURE__*/\nfunction () {\n  function FieldValueConstraint(config) {\n    _classCallCheck(this, FieldValueConstraint);\n\n    this.config = config;\n  }\n  /**\n   * Returns true if the configured field has the configured value into formData\n   * @param formData\n   * @returns {boolean}\n   */\n\n\n  _createClass(FieldValueConstraint, [{\n    key: \"check\",\n    value: function check(formData) {\n      return formData[this.config.name] === this.config.value;\n    }\n  }]);\n\n  return FieldValueConstraint;\n}();\nexport var NAME = 'FIELD_VALUE';","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/validator/constraints/FieldValueConstraint.js"],"names":["FieldValueConstraint","config","formData","name","value","NAME"],"mappings":";;;AAAA;;;;;;;;;AASA,WAAaA,oBAAb;AAAA;AAAA;AACE,gCAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;AAED;;;;;;;AALF;AAAA;AAAA,0BAUQC,QAVR,EAUkB;AACd,aAAOA,QAAQ,CAAC,KAAKD,MAAL,CAAYE,IAAb,CAAR,KAA+B,KAAKF,MAAL,CAAYG,KAAlD;AACD;AAZH;;AAAA;AAAA;AAeA,OAAO,IAAMC,IAAI,GAAG,aAAb","sourcesContent":["/**\n * This constraint is used to constraint the ruleset to the value of a given field in the form.\n * The configuration to be put into the JSON file for this rule must be as follows:\n * {\n *   \"type\": \"FIELD_VALUE\",  // this must be exactly 'FIELD_VALUE'\n *   \"name\": \"field_name\",   // the name of the field to be checked\n *   \"value\": \"value\"        // the value to be checked\n * }\n */\nexport class FieldValueConstraint {\n  constructor(config) {\n    this.config = config;\n  }\n\n  /**\n   * Returns true if the configured field has the configured value into formData\n   * @param formData\n   * @returns {boolean}\n   */\n  check(formData) {\n    return formData[this.config.name] === this.config.value;\n  }\n}\n\nexport const NAME = 'FIELD_VALUE';\n"]},"metadata":{},"sourceType":"module"}