{"ast":null,"code":"import _objectSpread from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/MobileServiceView.js\";\nimport React, { Component } from 'react';\nimport { EmptyState, Spinner } from 'patternfly-react';\nimport { connect } from 'react-redux';\nimport { partition } from 'lodash-es';\nimport BoundServiceRow from './BoundServiceRow';\nimport UnboundServiceRow from './UnboundServiceRow';\nimport './MobileServiceView.css';\nimport { fetchAndWatchServices, deleteCustomResource } from '../../actions/services';\nimport BindingPanel from './BindingPanel';\nimport { MobileService } from '../../models/';\n\nvar MobileServiceView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MobileServiceView, _Component);\n\n  function MobileServiceView(props) {\n    var _this;\n\n    _classCallCheck(this, MobileServiceView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MobileServiceView).call(this, props));\n\n    _this.showBindingPanel = function (service) {\n      _this.setState({\n        bindingPanelService: service\n      });\n    };\n\n    _this.hideBindingPanel = function () {\n      if (_this.state.bindingPanelService) {\n        _this.setState({\n          bindingPanelService: null\n        });\n      }\n    };\n\n    _this.state = {\n      bindingPanelService: null\n    };\n    _this.boundServiceRows = _this.boundServiceRows.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.unboundServiceRows = _this.unboundServiceRows.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.hideBindingPanel = _this.hideBindingPanel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MobileServiceView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchAndWatchServices();\n    }\n  }, {\n    key: \"boundServiceRows\",\n    value: function boundServiceRows() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        key: \"bound-services\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Bound Services\"), this.props.boundServices && this.props.boundServices.length > 0 ? this.props.boundServices.map(function (service) {\n        return React.createElement(BoundServiceRow, {\n          key: service.getId(),\n          appName: _this2.props.appName,\n          service: service,\n          onCreateBinding: function onCreateBinding() {\n            return _this2.showBindingPanel(service);\n          },\n          onFinished: _this2.hideBindingPanel,\n          onDeleteBinding: function onDeleteBinding(cr) {\n            return _this2.props.deleteCustomResource(service, cr.toJSON());\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }) : React.createElement(EmptyState, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"There are no bound services.\"));\n    }\n  }, {\n    key: \"unboundServiceRows\",\n    value: function unboundServiceRows() {\n      var _this3 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        key: \"unbound-services\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Unbound Services\"), this.props.unboundServices && this.props.unboundServices.length > 0 ? this.props.unboundServices.map(function (service) {\n        return React.createElement(UnboundServiceRow, {\n          key: service.getId(),\n          service: service,\n          onCreateBinding: function onCreateBinding() {\n            return _this3.showBindingPanel(service);\n          },\n          onFinished: _this3.hideBindingPanel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      }) : React.createElement(EmptyState, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"There are no unbound services.\"));\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$isReading = _this$props.isReading,\n          isReading = _this$props$isReading === void 0 ? true : _this$props$isReading,\n          boundServices = _this$props.boundServices,\n          unboundServices = _this$props.unboundServices;\n      return React.createElement(\"div\", {\n        className: \"mobile-service-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Spinner, {\n        loading: isReading && boundServices.length === 0 && unboundServices.length === 0,\n        className: \"spinner-padding\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.boundServiceRows(), this.unboundServiceRows()), this.state.bindingPanelService && React.createElement(BindingPanel, {\n        appName: this.props.appName,\n        service: this.state.bindingPanelService,\n        showModal: true,\n        close: this.hideBindingPanel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MobileServiceView;\n}(Component);\n\nfunction mapStateToProps(state, oldProp) {\n  var services = state.services.items.map(function (item) {\n    return new MobileService(item);\n  });\n  var filteredServices = partition(services, function (service) {\n    return service.isBoundToApp(oldProp.appName);\n  });\n  return _objectSpread({}, state.services, {\n    boundServices: filteredServices[0],\n    unboundServices: filteredServices[1]\n  });\n}\n\nvar mapDispatchToProps = {\n  fetchAndWatchServices: fetchAndWatchServices,\n  deleteCustomResource: deleteCustomResource\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileServiceView);","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/MobileServiceView.js"],"names":["React","Component","EmptyState","Spinner","connect","partition","BoundServiceRow","UnboundServiceRow","fetchAndWatchServices","deleteCustomResource","BindingPanel","MobileService","MobileServiceView","props","showBindingPanel","service","setState","bindingPanelService","hideBindingPanel","state","boundServiceRows","bind","unboundServiceRows","boundServices","length","map","getId","appName","cr","toJSON","unboundServices","isReading","mapStateToProps","oldProp","services","items","item","filteredServices","isBoundToApp","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { EmptyState, Spinner } from 'patternfly-react';\nimport { connect } from 'react-redux';\nimport { partition } from 'lodash-es';\nimport BoundServiceRow from './BoundServiceRow';\nimport UnboundServiceRow from './UnboundServiceRow';\nimport './MobileServiceView.css';\nimport { fetchAndWatchServices, deleteCustomResource } from '../../actions/services';\nimport BindingPanel from './BindingPanel';\nimport { MobileService } from '../../models/';\n\nclass MobileServiceView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bindingPanelService: null\n    };\n\n    this.boundServiceRows = this.boundServiceRows.bind(this);\n    this.unboundServiceRows = this.unboundServiceRows.bind(this);\n    this.hideBindingPanel = this.hideBindingPanel.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchAndWatchServices();\n  }\n\n  boundServiceRows() {\n    return (\n      <React.Fragment>\n        <h2 key=\"bound-services\">Bound Services</h2>\n        {this.props.boundServices && this.props.boundServices.length > 0 ? (\n          this.props.boundServices.map(service => (\n            <BoundServiceRow\n              key={service.getId()}\n              appName={this.props.appName}\n              service={service}\n              onCreateBinding={() => this.showBindingPanel(service)}\n              onFinished={this.hideBindingPanel}\n              onDeleteBinding={cr => this.props.deleteCustomResource(service, cr.toJSON())}\n            />\n          ))\n        ) : (\n          <EmptyState>There are no bound services.</EmptyState>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  unboundServiceRows() {\n    return (\n      <React.Fragment>\n        <h2 key=\"unbound-services\">Unbound Services</h2>\n        {this.props.unboundServices && this.props.unboundServices.length > 0 ? (\n          this.props.unboundServices.map(service => (\n            <UnboundServiceRow\n              key={service.getId()}\n              service={service}\n              onCreateBinding={() => this.showBindingPanel(service)}\n              onFinished={this.hideBindingPanel}\n            />\n          ))\n        ) : (\n          <EmptyState>There are no unbound services.</EmptyState>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  shouldComponentUpdate() {\n    return true;\n  }\n\n  showBindingPanel = service => {\n    this.setState({\n      bindingPanelService: service\n    });\n  };\n\n  hideBindingPanel = () => {\n    if (this.state.bindingPanelService) {\n      this.setState({\n        bindingPanelService: null\n      });\n    }\n  };\n\n  render() {\n    const { isReading = true, boundServices, unboundServices } = this.props;\n    return (\n      <div className=\"mobile-service-view\">\n        <Spinner\n          loading={isReading && boundServices.length === 0 && unboundServices.length === 0}\n          className=\"spinner-padding\"\n        >\n          {this.boundServiceRows()}\n          {this.unboundServiceRows()}\n        </Spinner>\n        {this.state.bindingPanelService && (\n          <BindingPanel\n            appName={this.props.appName}\n            service={this.state.bindingPanelService}\n            showModal\n            close={this.hideBindingPanel}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, oldProp) {\n  const services = state.services.items.map(item => new MobileService(item));\n  const filteredServices = partition(services, service => service.isBoundToApp(oldProp.appName));\n  return { ...state.services, boundServices: filteredServices[0], unboundServices: filteredServices[1] };\n}\n\nconst mapDispatchToProps = {\n  fetchAndWatchServices,\n  deleteCustomResource\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MobileServiceView);\n"]},"metadata":{},"sourceType":"module"}