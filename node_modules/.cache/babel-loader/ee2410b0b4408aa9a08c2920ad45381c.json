{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from '../../common/Timer';\nimport SessionTimeout from './SessionTimeout';\nvar msTimes = {\n  seconds: 1000,\n  minutes: 60 * 1000,\n  hours: 60 * 60 * 1000\n};\n\nvar CountDownSessionTimeout = function (_React$Component) {\n  _inherits(CountDownSessionTimeout, _React$Component);\n\n  function CountDownSessionTimeout(props) {\n    _classCallCheck(this, CountDownSessionTimeout);\n\n    var _this = _possibleConstructorReturn(this, (CountDownSessionTimeout.__proto__ || Object.getPrototypeOf(CountDownSessionTimeout)).call(this, props));\n\n    _this.timer = new Timer(function () {}, -1);\n    _this.state = {\n      timeLeft: 0\n    };\n    return _this;\n  }\n\n  _createClass(CountDownSessionTimeout, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.timeLeft < this.props.displayBefore) {\n        this.setTimeout('dialog');\n      } else {\n        this.setTimeout('init');\n      }\n    }\n  }, {\n    key: 'componentWillUnount',\n    value: function componentWillUnount() {\n      this.timer.clearTimer();\n    }\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(mode) {\n      var _this2 = this;\n\n      var _props = this.props,\n          sessionTime = _props.sessionTime,\n          timeLeft = _props.timeLeft,\n          displayBefore = _props.displayBefore,\n          units = _props.units;\n\n      switch (mode) {\n        case 'logout':\n          {\n            this.setState(function () {\n              return {\n                timeLeft: 0\n              };\n            });\n            this.timer.clearTimer();\n            break;\n          }\n\n        case 'continue':\n          {\n            this.setState(function () {\n              return {\n                timeLeft: sessionTime\n              };\n            });\n            this.timer.startTimer(function () {\n              return _this2.setTimeout('dialog');\n            }, (sessionTime - displayBefore) * msTimes[units]);\n            break;\n          }\n\n        case 'dialog':\n          {\n            var leftNow = timeLeft < displayBefore ? timeLeft : displayBefore;\n            this.setState(function () {\n              return {\n                timeLeft: leftNow\n              };\n            });\n            this.timer.startTimer(function () {\n              return _this2.setTimeout('logout');\n            }, leftNow * msTimes[units]);\n            break;\n          }\n\n        case 'init':\n          {\n            this.setState(function () {\n              return {\n                timeLeft: timeLeft\n              };\n            });\n            this.timer.startTimer(function () {\n              return _this2.setTimeout('dialog');\n            }, (timeLeft - displayBefore) * msTimes[units]);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(SessionTimeout, {\n        logoutFnc: function logoutFnc() {\n          return _this3.setTimeout('logout');\n        },\n        continueFnc: function continueFnc() {\n          return _this3.setTimeout('continue');\n        },\n        displayBefore: this.props.displayBefore,\n        timeLeft: this.state.timeLeft,\n        secondaryContent: this.props.secondaryContent\n      });\n    }\n  }]);\n\n  return CountDownSessionTimeout;\n}(React.Component);\n\nCountDownSessionTimeout.propTypes = {\n  timeLeft: PropTypes.number.isRequired,\n  sessionTime: PropTypes.number.isRequired,\n  displayBefore: PropTypes.number,\n  units: PropTypes.oneOf(Object.keys(msTimes)),\n  secondaryContent: PropTypes.node\n};\nCountDownSessionTimeout.defaultProps = {\n  displayBefore: 10,\n  units: 'seconds',\n  secondaryContent: React.createElement('p', null, 'You will be logged out in 10 seconds.')\n};\nexport default CountDownSessionTimeout;","map":null,"metadata":{},"sourceType":"module"}