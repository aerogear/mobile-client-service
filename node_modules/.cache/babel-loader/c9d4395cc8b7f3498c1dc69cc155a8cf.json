{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Fade from 'react-bootstrap/es/Fade';\nimport classNames from 'classnames';\nimport LoginCardInputWarning from './LoginCardInputWarning';\nimport { FormControl, FormGroup, HelpBlock } from '../../../../index';\nimport { noop } from '../../../../common/helpers';\n\nvar LoginCardInput = function LoginCardInput(_ref) {\n  var id = _ref.id,\n      type = _ref.type,\n      placeholder = _ref.placeholder,\n      size = _ref.size,\n      error = _ref.error,\n      warning = _ref.warning,\n      onChange = _ref.onChange,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      onKeyPress = _ref.onKeyPress,\n      showError = _ref.showError,\n      showWarning = _ref.showWarning,\n      className = _ref.className,\n      autoComplete = _ref.autoComplete,\n      attributes = _ref.attributes,\n      topErrorOnly = _ref.topErrorOnly;\n  var helpBlock = !topErrorOnly ? showError && React.createElement(HelpBlock, null, error) || showWarning && React.createElement(LoginCardInputWarning, null, warning) : null;\n  var validationState = null;\n\n  if (topErrorOnly) {\n    if (showWarning) {\n      validationState = 'warning';\n    }\n  } else if (showError) {\n    validationState = 'error';\n  }\n\n  return React.createElement(FormGroup, {\n    className: classNames('login_card_input', className),\n    controlId: id,\n    validationState: validationState\n  }, React.createElement(FormControl, _extends({}, attributes, {\n    type: type,\n    placeholder: placeholder,\n    bsSize: size,\n    onChange: onChange,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyPress: onKeyPress,\n    autoComplete: autoComplete\n  })), topErrorOnly && React.createElement(FormControl.Feedback, null), React.createElement(Fade, {\n    'in': showError || showWarning\n  }, React.createElement('div', null, helpBlock)));\n};\n\nLoginCardInput.propTypes = {\n  /** The input's id */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** The input's HTML type */\n  type: PropTypes.string,\n\n  /** The input's placeholder */\n  placeholder: PropTypes.string,\n\n  /** The bsSize of the input */\n  size: PropTypes.string,\n\n  /** The error which is presented under the input */\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /** The warning which is presented under the input */\n  warning: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /** A callback which is fired when the input changes. */\n  onChange: PropTypes.func,\n\n  /** Controlls the warning visibility */\n  showWarning: PropTypes.bool,\n\n  /** A callback which is fired when the input blurs. */\n  onBlur: PropTypes.func,\n\n  /** A callback which is fired when the input is focused. */\n  onFocus: PropTypes.func,\n\n  /** A callback which is fired on a key press. */\n  onKeyPress: PropTypes.func,\n\n  /** A callback which is fired when the input blurs. */\n  showError: PropTypes.bool,\n\n  /** An additional css classes */\n  className: PropTypes.string,\n\n  /** Sets the HTML autocomplete */\n  autoComplete: PropTypes.string,\n\n  /** Additional HTML input's attributes. */\n  attributes: PropTypes.object,\n\n  /** when topErrorOnly is set to true,\n   * the helpblock errors/warnings under each input won't appear,\n   * instead we will have only the form error above.\n   */\n  topErrorOnly: PropTypes.bool\n};\nLoginCardInput.defaultProps = {\n  id: Math.random().toString(),\n  type: 'text',\n  placeholder: 'Enter Text',\n  size: 'lg',\n  error: null,\n  warning: null,\n  onChange: noop,\n  showWarning: false,\n  onBlur: noop,\n  onFocus: noop,\n  onKeyPress: noop,\n  showError: false,\n  className: null,\n  autoComplete: '',\n  attributes: null,\n  topErrorOnly: false\n};\nexport default LoginCardInput;","map":null,"metadata":{},"sourceType":"module"}