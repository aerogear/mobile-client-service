{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from '../../common/helpers';\nimport { DisposableLabel } from '../Label';\n\nvar FilterItem = function FilterItem(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      onRemove = _ref.onRemove,\n      filterData = _ref.filterData,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'onRemove', 'filterData']);\n\n  var classes = classNames(className);\n  return React.createElement('li', _extends({\n    className: classes\n  }, props), React.createElement(DisposableLabel, {\n    type: 'info',\n    onRemoveClick: function onRemoveClick() {\n      return onRemove(filterData);\n    }\n  }, children));\n};\n\nFilterItem.propTypes = {\n  /** Children nodes */\n  children: PropTypes.node,\n\n  /** additional filter item classes */\n  className: PropTypes.string,\n\n  /** callback when filter is removed  */\n  onRemove: PropTypes.func,\n\n  /** Data to pass to onRemove function */\n  filterData: PropTypes.object\n};\nFilterItem.defaultProps = {\n  children: null,\n  className: '',\n  onRemove: noop,\n  filterData: {}\n};\nexport default FilterItem;","map":null,"metadata":{},"sourceType":"module"}