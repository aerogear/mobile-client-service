{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport BootstrapSlider from './BootstrapSlider';\nimport { noop } from '../../common/helpers';\nimport { Icon } from '../Icon';\nimport { ControlLabel, FormControl } from '../Form';\nimport Boundaries from './Boundaries';\nimport DropdownMenu from './DropdownMenu';\n\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  function Slider(props) {\n    _classCallCheck(this, Slider);\n\n    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));\n\n    _this.onSlide = function (value) {\n      _this.setState({\n        value: value\n      }, function () {\n        return _this.props.onSlide(value);\n      });\n    };\n\n    _this.onInputChange = function (event) {\n      var newValue = parseInt(event.target.value || 0, 10);\n\n      _this.setState({\n        value: newValue\n      }, function () {\n        return _this.props.onSlide(newValue);\n      });\n    };\n\n    _this.onFormatChange = function (format) {\n      _this.setState({\n        tooltipFormat: format\n      });\n    };\n\n    _this.formatter = function (value) {\n      return value + ' ' + _this.state.tooltipFormat;\n    };\n\n    _this.state = {\n      value: _this.props.value,\n      tooltipFormat: _this.props.dropdownList && _this.props.dropdownList[0] || _this.props.inputFormat\n    };\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value) {\n        this.onSlide(this.props.value);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var label = null;\n      var sliderClass = 'col-xs-12 col-sm-12 col-md-12';\n      var labelClass = 'col-xs-2 col-sm-2 col-md-2';\n\n      if (this.props.label || this.props.icon) {\n        sliderClass = 'col-xs-10 col-sm-10 col-md-10';\n        label = this.props.icon ? React.createElement(Icon, _extends({\n          className: labelClass\n        }, this.props.icon)) : React.createElement(ControlLabel, {\n          htmlFor: this.props.id,\n          bsClass: labelClass\n        }, this.props.label);\n      }\n\n      var formatElement = void 0;\n\n      if (this.props.inputFormat) {\n        formatElement = React.createElement('span', null, this.props.inputFormat);\n      }\n\n      if (this.props.dropdownList) {\n        formatElement = React.createElement(DropdownMenu, _extends({}, this.props, {\n          onFormatChange: this.onFormatChange,\n          title: this.state.tooltipFormat\n        }));\n      }\n\n      var inputElement = this.props.input && React.createElement(FormControl, {\n        bsClass: 'slider-input-pf',\n        type: 'number',\n        value: this.state.value,\n        min: this.props.min,\n        max: this.props.max,\n        onChange: this.onInputChange\n      });\n      var BSSlider = React.createElement(BootstrapSlider, _extends({}, this.props, {\n        formatter: this.formatter,\n        value: this.state.value,\n        onSlide: this.onSlide\n      }));\n      return React.createElement('div', null, label, React.createElement('div', {\n        className: sliderClass\n      }, React.createElement(Boundaries, _extends({\n        slider: BSSlider\n      }, this.props), inputElement, formatElement)));\n    }\n  }]);\n\n  return Slider;\n}(React.Component);\n\nSlider.propTypes = {\n  id: PropTypes.string,\n  orientation: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  toolTip: PropTypes.bool,\n  onSlide: PropTypes.func,\n  label: PropTypes.string,\n  labelClass: PropTypes.string,\n  icon: PropTypes.object,\n  input: PropTypes.bool,\n  sliderClass: PropTypes.string,\n  dropdownList: PropTypes.array,\n  inputFormat: PropTypes.string\n};\nSlider.defaultProps = {\n  id: null,\n  orientation: 'horizontal',\n  min: 0,\n  max: 100,\n  value: 0,\n  step: 1,\n  toolTip: false,\n  onSlide: noop,\n  label: null,\n  labelClass: null,\n  input: false,\n  sliderClass: null,\n  icon: null,\n  dropdownList: null,\n  inputFormat: ''\n};\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}