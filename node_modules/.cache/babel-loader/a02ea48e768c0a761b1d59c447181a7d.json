{"ast":null,"code":"import _toConsumableArray from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ValidationRule } from './rules/ValidationRule';\nimport { Constraint } from './constraints/Constraint';\n/**\n * This class validates the form according to a given set of rules.\n */\n\nexport var RuleSetValidator =\n/*#__PURE__*/\nfunction () {\n  function RuleSetValidator(name) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, RuleSetValidator);\n\n    this.name = name;\n    this.fields = flatKeys(config.fields) || {};\n    var executionConstraints = config.executionConstraints;\n\n    if (executionConstraints) {\n      this.executionConstraints = executionConstraints.map(function (constraintConfig) {\n        return Constraint.forConfig(constraintConfig);\n      });\n    }\n  }\n\n  _createClass(RuleSetValidator, [{\n    key: \"validateField\",\n    value: function validateField(formData, key) {\n      var field = this.fields[key];\n\n      if (field) {\n        // we have a validation rule for this field\n        var validationRules = field.validation_rules;\n\n        for (var i = 0; i < validationRules.length; i++) {\n          var validationResult = ValidationRule.forRule(validationRules[i]).validate(formData, key);\n\n          if (!validationResult.valid) {\n            return validationResult;\n          }\n        }\n      }\n\n      return {\n        valid: true\n      };\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(errorsCb, key, message) {\n      var field = this.fields[key];\n      errorsCb(field.errors_key || key, message);\n    }\n  }, {\n    key: \"__checkConstraints\",\n    value: function __checkConstraints(formData) {\n      if (this.executionConstraints) {\n        for (var i = 0; i < this.executionConstraints.length; i++) {\n          if (!this.executionConstraints[i].check(formData)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(formData, errorsCb) {\n      if (!this.__checkConstraints(formData)) {\n        return false;\n      }\n\n      var hasErrors = false;\n\n      for (var key in this.fields) {\n        if (this.fields.hasOwnProperty(key)) {\n          var validationResult = this.validateField(formData, key);\n\n          if (!validationResult.valid) {\n            this.notifyError(errorsCb, key, validationResult.error);\n            hasErrors = true;\n          }\n        }\n      }\n\n      return hasErrors;\n    }\n    /**\n     * Adds a rule to the set\n     * @param rule is a json following this structure:\n     * {\n     *   \"fieldName\": {\n     *     \"errors_key\": \"your key to be used to group this errors. optional.\"\n     *     \"validation_rules\": [\n     *        {\n     *          \"type\": \"your validation rule type\",\n     *          \"error\": \"error to be reported if the rule fails\"\n     *          // any other option your rule needs\n     *        }\n     *     ]\n     *   }\n     * }\n     */\n\n  }, {\n    key: \"addRule\",\n    value: function addRule(rule) {\n      for (var fieldName in rule) {\n        if (rule.hasOwnProperty(fieldName)) {\n          var field = this.fields[fieldName];\n\n          if (field) {\n            field.errors_key = rule[fieldName].errors_key || field.errors_key;\n            field.validation_rules = [].concat(_toConsumableArray(field.validation_rules || []), _toConsumableArray(rule[fieldName].validation_rules));\n          } else {\n            this.fields[fieldName] = rule[fieldName];\n          }\n        }\n      }\n    }\n  }]);\n\n  return RuleSetValidator;\n}();\n/**\n * A small utility function to flatten a nested object that has rules.\n * For example, it will convert this object:\n * {\n *   a: {\n *     b: {\n *        validation_rules: [],\n *        errors_key: ''\n *     }\n *   },\n *   c: {\n *     validation_rules: []\n *   }\n * }\n * to this:\n * {\n *   'a.b' : {validation_rules: [], errors_key: ''},\n *   'c': {\n *     validation_rules: []\n *   }\n * }\n * @param {object} object input object\n * @param {array} path paths so far\n * @param {object} out object to return\n */\n\nfunction flatKeys(object, path, out) {\n  var p = path || [];\n  var result = out || {};\n\n  for (var key in object) {\n    if (object.hasOwnProperty(key)) {\n      var parent = p.concat([key]);\n\n      if (object[key].errors_key || object[key].validation_rules) {\n        result[parent.join('.')] = object[key];\n      } else {\n        flatKeys(object[key], parent, result);\n      }\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/validator/RuleSetValidator.js"],"names":["ValidationRule","Constraint","RuleSetValidator","name","config","fields","flatKeys","executionConstraints","map","constraintConfig","forConfig","formData","key","field","validationRules","validation_rules","i","length","validationResult","forRule","validate","valid","errorsCb","message","errors_key","check","__checkConstraints","hasErrors","hasOwnProperty","validateField","notifyError","error","rule","fieldName","object","path","out","p","result","parent","concat","join"],"mappings":"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","sourcesContent":["import { ValidationRule } from './rules/ValidationRule';\nimport { Constraint } from './constraints/Constraint';\n\n/**\n * This class validates the form according to a given set of rules.\n */\nexport class RuleSetValidator {\n  constructor(name, config = {}) {\n    this.name = name;\n    this.fields = flatKeys(config.fields) || {};\n    const { executionConstraints } = config;\n    if (executionConstraints) {\n      this.executionConstraints = executionConstraints.map(constraintConfig => Constraint.forConfig(constraintConfig));\n    }\n  }\n\n  validateField(formData, key) {\n    const field = this.fields[key];\n    if (field) {\n      // we have a validation rule for this field\n      const { validation_rules: validationRules } = field;\n      for (let i = 0; i < validationRules.length; i++) {\n        const validationResult = ValidationRule.forRule(validationRules[i]).validate(formData, key);\n        if (!validationResult.valid) {\n          return validationResult;\n        }\n      }\n    }\n    return { valid: true };\n  }\n\n  notifyError(errorsCb, key, message) {\n    const field = this.fields[key];\n    errorsCb(field.errors_key || key, message);\n  }\n\n  __checkConstraints(formData) {\n    if (this.executionConstraints) {\n      for (let i = 0; i < this.executionConstraints.length; i++) {\n        if (!this.executionConstraints[i].check(formData)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  validate(formData, errorsCb) {\n    if (!this.__checkConstraints(formData)) {\n      return false;\n    }\n    let hasErrors = false;\n    for (const key in this.fields) {\n      if (this.fields.hasOwnProperty(key)) {\n        const validationResult = this.validateField(formData, key);\n        if (!validationResult.valid) {\n          this.notifyError(errorsCb, key, validationResult.error);\n          hasErrors = true;\n        }\n      }\n    }\n\n    return hasErrors;\n  }\n\n  /**\n   * Adds a rule to the set\n   * @param rule is a json following this structure:\n   * {\n   *   \"fieldName\": {\n   *     \"errors_key\": \"your key to be used to group this errors. optional.\"\n   *     \"validation_rules\": [\n   *        {\n   *          \"type\": \"your validation rule type\",\n   *          \"error\": \"error to be reported if the rule fails\"\n   *          // any other option your rule needs\n   *        }\n   *     ]\n   *   }\n   * }\n   */\n  addRule(rule) {\n    for (const fieldName in rule) {\n      if (rule.hasOwnProperty(fieldName)) {\n        const field = this.fields[fieldName];\n        if (field) {\n          field.errors_key = rule[fieldName].errors_key || field.errors_key;\n          field.validation_rules = [...(field.validation_rules || []), ...rule[fieldName].validation_rules];\n        } else {\n          this.fields[fieldName] = rule[fieldName];\n        }\n      }\n    }\n  }\n}\n\n/**\n * A small utility function to flatten a nested object that has rules.\n * For example, it will convert this object:\n * {\n *   a: {\n *     b: {\n *        validation_rules: [],\n *        errors_key: ''\n *     }\n *   },\n *   c: {\n *     validation_rules: []\n *   }\n * }\n * to this:\n * {\n *   'a.b' : {validation_rules: [], errors_key: ''},\n *   'c': {\n *     validation_rules: []\n *   }\n * }\n * @param {object} object input object\n * @param {array} path paths so far\n * @param {object} out object to return\n */\nfunction flatKeys(object, path, out) {\n  const p = path || [];\n  const result = out || {};\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const parent = p.concat([key]);\n      if (object[key].errors_key || object[key].validation_rules) {\n        result[parent.join('.')] = object[key];\n      } else {\n        flatKeys(object[key], parent, result);\n      }\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}