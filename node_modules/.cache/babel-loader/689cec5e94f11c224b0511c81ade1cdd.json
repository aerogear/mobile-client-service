{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { get } from 'lodash-es';\nimport { ValidationRuleBaseClass } from './ValidationRuleBaseClass';\n/**\n * This is a very simple rule. Checks that the configured field has a value.\n * It must be configured inside the JSON file as follows:\n * {\n *   \"type\": \"required\",  // this must be exactly 'required'\n *   \"error\": \"Your error message\"          // Optional. The custom error message.\n *                                          // This can be a string, a dictionary or a function (signature: (key, message) => {})\n *                                          // If not specified, a standard error message is returned.\n * }\n */\n\nexport var RequiredRule =\n/*#__PURE__*/\nfunction (_ValidationRuleBaseCl) {\n  _inherits(RequiredRule, _ValidationRuleBaseCl);\n\n  function RequiredRule() {\n    _classCallCheck(this, RequiredRule);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RequiredRule).apply(this, arguments));\n  }\n\n  _createClass(RequiredRule, [{\n    key: \"validate\",\n    value: function validate(formData, key) {\n      var value = get(formData, key);\n\n      if (!value || !value.trim()) {\n        return {\n          valid: false,\n          error: this.getErrorMessage({\n            key: key,\n            message: \"\".concat(key, \" is a required field.\")\n          })\n        };\n      }\n\n      return {\n        valid: true\n      };\n    }\n  }]);\n\n  return RequiredRule;\n}(ValidationRuleBaseClass);\nexport var NAME = 'required';","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/validator/rules/RequiredRule.js"],"names":["get","ValidationRuleBaseClass","RequiredRule","formData","key","value","trim","valid","error","getErrorMessage","message","NAME"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AAEA;;;;;;;;;;;AAUA,WAAaC,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACWC,QADX,EACqBC,GADrB,EAC0B;AACtB,UAAMC,KAAK,GAAGL,GAAG,CAACG,QAAD,EAAWC,GAAX,CAAjB;;AACA,UAAI,CAACC,KAAD,IAAU,CAACA,KAAK,CAACC,IAAN,EAAf,EAA6B;AAC3B,eAAO;AACLC,UAAAA,KAAK,EAAE,KADF;AAELC,UAAAA,KAAK,EAAE,KAAKC,eAAL,CAAqB;AAAEL,YAAAA,GAAG,EAAHA,GAAF;AAAOM,YAAAA,OAAO,YAAKN,GAAL;AAAd,WAArB;AAFF,SAAP;AAID;;AACD,aAAO;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD;AAVH;;AAAA;AAAA,EAAkCN,uBAAlC;AAaA,OAAO,IAAMU,IAAI,GAAG,UAAb","sourcesContent":["import { get } from 'lodash-es';\nimport { ValidationRuleBaseClass } from './ValidationRuleBaseClass';\n\n/**\n * This is a very simple rule. Checks that the configured field has a value.\n * It must be configured inside the JSON file as follows:\n * {\n *   \"type\": \"required\",  // this must be exactly 'required'\n *   \"error\": \"Your error message\"          // Optional. The custom error message.\n *                                          // This can be a string, a dictionary or a function (signature: (key, message) => {})\n *                                          // If not specified, a standard error message is returned.\n * }\n */\nexport class RequiredRule extends ValidationRuleBaseClass {\n  validate(formData, key) {\n    const value = get(formData, key);\n    if (!value || !value.trim()) {\n      return {\n        valid: false,\n        error: this.getErrorMessage({ key, message: `${key} is a required field.` })\n      };\n    }\n    return { valid: true };\n  }\n}\n\nexport const NAME = 'required';\n"]},"metadata":{},"sourceType":"module"}