{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Table } from './Table';\n/**\n * TablePfProvider component for Patternfly React\n */\n\nvar TablePfProvider = function TablePfProvider(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      dataTable = _ref.dataTable,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      inlineEdit = _ref.inlineEdit,\n      hover = _ref.hover,\n      condensed = _ref.condensed,\n      components = _ref.components,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'dataTable', 'striped', 'bordered', 'inlineEdit', 'hover', 'condensed', 'components']);\n\n  var headerCell = function headerCell(cellProps) {\n    return cellProps.children;\n  };\n\n  var tableCell = function tableCell(cellProps) {\n    return cellProps.children;\n  };\n\n  var tableRow = function tableRow(rowProps) {\n    return React.createElement('tr', rowProps, rowProps.children);\n  };\n\n  tableRow.shouldComponentUpdate = true;\n  components.header = _extends({\n    cell: headerCell\n  }, components.header || {});\n  components.body = _extends({\n    cell: tableCell,\n    row: tableRow\n  }, components.body || {});\n  var classes = classNames({\n    table: true,\n    dataTable: dataTable,\n    'table-striped': striped,\n    'table-bordered': bordered,\n    'table-hover': hover,\n    'table-condensed': condensed,\n    'pf-table-inline-edit': inlineEdit\n  }, className);\n  var attributes = {};\n\n  if (dataTable) {\n    attributes.role = 'grid';\n  }\n\n  return React.createElement(Table.Provider, _extends({\n    className: classes,\n    renderers: components\n  }, props, attributes), children);\n};\n\nTablePfProvider.propTypes = {\n  /** Children nodes  */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** apply dataTable class */\n  dataTable: PropTypes.bool,\n\n  /** apply Striped class */\n  striped: PropTypes.bool,\n\n  /** apply Bordered class */\n  bordered: PropTypes.bool,\n\n  /** apply Hover class */\n  hover: PropTypes.bool,\n\n  /** apply Condensed class */\n  condensed: PropTypes.bool,\n\n  /** apply pf-table-inline-edit class */\n  inlineEdit: PropTypes.bool,\n\n  /** reactabular components override */\n  components: PropTypes.object\n};\nTablePfProvider.defaultProps = {\n  children: null,\n  className: '',\n  dataTable: false,\n  striped: false,\n  bordered: false,\n  hover: false,\n  condensed: false,\n  inlineEdit: false,\n  components: {}\n};\nexport default TablePfProvider;","map":null,"metadata":{},"sourceType":"module"}