{"ast":null,"code":"import _objectSpread from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { get } from 'lodash-es';\nimport Metadata from '../k8s/metadata';\nimport AppSpec from './mobileappspec';\nimport AppStatus from './mobileappstatus';\nexport var PROPERTIES = {\n  NAME: 'name'\n};\n\nvar MobileApp =\n/*#__PURE__*/\nfunction () {\n  function MobileApp(json) {\n    _classCallCheck(this, MobileApp);\n\n    this.app = json || {};\n    this.spec = new AppSpec(this.app.spec);\n    this.metadata = new Metadata(this.app.metadata);\n    this.status = new AppStatus(this.app.status);\n    this.isNew = !this.metadata.getUID();\n  }\n\n  _createClass(MobileApp, [{\n    key: \"getID\",\n    value: function getID() {\n      return this.metadata.getName();\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.getSpec().getName();\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      return this.status;\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(propertyName, propertyValue) {\n      this.getSpec().set(propertyName, propertyValue);\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(propertyName) {\n      // the get/set property methods only supports get/set fields on the spec object for now.\n      // but it can be extended to support accessing more fields on more objects (like status).\n      return this.getSpec().get(propertyName);\n    }\n  }, {\n    key: \"_validateProperty\",\n    value: function _validateProperty(propertyName) {\n      var value = this.getProperty(propertyName);\n\n      if (value) {\n        switch (propertyName) {\n          case PROPERTIES.NAME:\n            return value.match('^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$');\n\n          default:\n            return 'success';\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(propertyName) {\n      if (propertyName) {\n        return this._validateProperty(propertyName);\n      }\n\n      return this._validateProperty(PROPERTIES.NAME);\n    }\n  }, {\n    key: \"getSpec\",\n    value: function getSpec() {\n      return this.spec;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var spec = this.spec.toJSON();\n      var metadata = this.metadata.toJSON();\n\n      if (this.isNew) {\n        metadata.name = spec.name;\n      }\n\n      return _objectSpread({}, this.app, {\n        spec: spec,\n        metadata: metadata,\n        status: this.status.toJSON()\n      });\n    }\n    /**\n     * Finds an app into an array of raw json apps and returns an instance of MobileApp if found or null otherwise\n     * @param ary the array of json apps data\n     * @param appID the id of the app to be found\n     * @returns {*}\n     */\n\n  }], [{\n    key: \"find\",\n    value: function find(ary, appID) {\n      var mobileAppJson = ary.find(function (app) {\n        return get(app, 'metadata.name') === appID;\n      });\n\n      if (mobileAppJson) {\n        return new MobileApp(mobileAppJson);\n      }\n\n      return null;\n    }\n  }]);\n\n  return MobileApp;\n}();\n\nexport { MobileApp as default };","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/models/mobileapps/mobileapp.js"],"names":["get","Metadata","AppSpec","AppStatus","PROPERTIES","NAME","MobileApp","json","app","spec","metadata","status","isNew","getUID","getName","getSpec","propertyName","propertyValue","set","value","getProperty","match","undefined","_validateProperty","toJSON","name","ary","appID","mobileAppJson","find"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,IAAI,EAAE;AADkB,CAAnB;;IAIcC,S;;;AACnB,qBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,GAAL,GAAWD,IAAI,IAAI,EAAnB;AACA,SAAKE,IAAL,GAAY,IAAIP,OAAJ,CAAY,KAAKM,GAAL,CAASC,IAArB,CAAZ;AACA,SAAKC,QAAL,GAAgB,IAAIT,QAAJ,CAAa,KAAKO,GAAL,CAASE,QAAtB,CAAhB;AACA,SAAKC,MAAL,GAAc,IAAIR,SAAJ,CAAc,KAAKK,GAAL,CAASG,MAAvB,CAAd;AACA,SAAKC,KAAL,GAAa,CAAC,KAAKF,QAAL,CAAcG,MAAd,EAAd;AACD;;;;4BAEO;AACN,aAAO,KAAKH,QAAL,CAAcI,OAAd,EAAP;AACD;;;8BAES;AACR,aAAO,KAAKC,OAAL,GAAeD,OAAf,EAAP;AACD;;;gCAEW;AACV,aAAO,KAAKH,MAAZ;AACD;;;gCAEWK,Y,EAAcC,a,EAAe;AACvC,WAAKF,OAAL,GAAeG,GAAf,CAAmBF,YAAnB,EAAiCC,aAAjC;AACD;;;gCAEWD,Y,EAAc;AACxB;AACA;AACA,aAAO,KAAKD,OAAL,GAAef,GAAf,CAAmBgB,YAAnB,CAAP;AACD;;;sCAEiBA,Y,EAAc;AAC9B,UAAMG,KAAK,GAAG,KAAKC,WAAL,CAAiBJ,YAAjB,CAAd;;AACA,UAAIG,KAAJ,EAAW;AACT,gBAAQH,YAAR;AACE,eAAKZ,UAAU,CAACC,IAAhB;AACE,mBAAOc,KAAK,CAACE,KAAN,CAAY,oEAAZ,CAAP;;AACF;AACE,mBAAO,SAAP;AAJJ;AAMD;;AAED,aAAOC,SAAP;AACD;;;4BAEON,Y,EAAc;AACpB,UAAIA,YAAJ,EAAkB;AAChB,eAAO,KAAKO,iBAAL,CAAuBP,YAAvB,CAAP;AACD;;AACD,aAAO,KAAKO,iBAAL,CAAuBnB,UAAU,CAACC,IAAlC,CAAP;AACD;;;8BAES;AACR,aAAO,KAAKI,IAAZ;AACD;;;6BAEQ;AACP,UAAMA,IAAI,GAAG,KAAKA,IAAL,CAAUe,MAAV,EAAb;AACA,UAAMd,QAAQ,GAAG,KAAKA,QAAL,CAAcc,MAAd,EAAjB;;AACA,UAAI,KAAKZ,KAAT,EAAgB;AACdF,QAAAA,QAAQ,CAACe,IAAT,GAAgBhB,IAAI,CAACgB,IAArB;AACD;;AACD,+BAAY,KAAKjB,GAAjB;AAAsBC,QAAAA,IAAI,EAAJA,IAAtB;AAA4BC,QAAAA,QAAQ,EAARA,QAA5B;AAAsCC,QAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYa,MAAZ;AAA9C;AACD;AAED;;;;;;;;;yBAMYE,G,EAAKC,K,EAAO;AACtB,UAAMC,aAAa,GAAGF,GAAG,CAACG,IAAJ,CAAS,UAAArB,GAAG;AAAA,eAAIR,GAAG,CAACQ,GAAD,EAAM,eAAN,CAAH,KAA8BmB,KAAlC;AAAA,OAAZ,CAAtB;;AACA,UAAIC,aAAJ,EAAmB;AACjB,eAAO,IAAItB,SAAJ,CAAcsB,aAAd,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;;SA7EkBtB,S","sourcesContent":["import { get } from 'lodash-es';\nimport Metadata from '../k8s/metadata';\nimport AppSpec from './mobileappspec';\nimport AppStatus from './mobileappstatus';\n\nexport const PROPERTIES = {\n  NAME: 'name'\n};\n\nexport default class MobileApp {\n  constructor(json) {\n    this.app = json || {};\n    this.spec = new AppSpec(this.app.spec);\n    this.metadata = new Metadata(this.app.metadata);\n    this.status = new AppStatus(this.app.status);\n    this.isNew = !this.metadata.getUID();\n  }\n\n  getID() {\n    return this.metadata.getName();\n  }\n\n  getName() {\n    return this.getSpec().getName();\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  setProperty(propertyName, propertyValue) {\n    this.getSpec().set(propertyName, propertyValue);\n  }\n\n  getProperty(propertyName) {\n    // the get/set property methods only supports get/set fields on the spec object for now.\n    // but it can be extended to support accessing more fields on more objects (like status).\n    return this.getSpec().get(propertyName);\n  }\n\n  _validateProperty(propertyName) {\n    const value = this.getProperty(propertyName);\n    if (value) {\n      switch (propertyName) {\n        case PROPERTIES.NAME:\n          return value.match('^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$');\n        default:\n          return 'success';\n      }\n    }\n\n    return undefined;\n  }\n\n  isValid(propertyName) {\n    if (propertyName) {\n      return this._validateProperty(propertyName);\n    }\n    return this._validateProperty(PROPERTIES.NAME);\n  }\n\n  getSpec() {\n    return this.spec;\n  }\n\n  toJSON() {\n    const spec = this.spec.toJSON();\n    const metadata = this.metadata.toJSON();\n    if (this.isNew) {\n      metadata.name = spec.name;\n    }\n    return { ...this.app, spec, metadata, status: this.status.toJSON() };\n  }\n\n  /**\n   * Finds an app into an array of raw json apps and returns an instance of MobileApp if found or null otherwise\n   * @param ary the array of json apps data\n   * @param appID the id of the app to be found\n   * @returns {*}\n   */\n  static find(ary, appID) {\n    const mobileAppJson = ary.find(app => get(app, 'metadata.name') === appID);\n    if (mobileAppJson) {\n      return new MobileApp(mobileAppJson);\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}