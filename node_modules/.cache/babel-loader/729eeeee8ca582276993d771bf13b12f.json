{"ast":null,"code":"import _objectSpread from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Resource from '../k8s/resource';\nimport Status from '../k8s/status';\n/**\n * The base class to represent the custom resources that are used by the MDC.\n * It is based on the current implementation of KeycloakRealm.\n * However, it is unlikely that all CRs will follow the same convention, so we will likely to create new classes to represent other CRs.\n * In that case, extend this class and override the methods.\n */\n\nexport var CustomResource =\n/*#__PURE__*/\nfunction (_Resource) {\n  _inherits(CustomResource, _Resource);\n\n  function CustomResource() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CustomResource);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomResource).call(this, data));\n  }\n\n  _createClass(CustomResource, [{\n    key: \"getName\",\n    value: function getName() {\n      return this.metadata.get('name');\n    }\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      var phase = this.status.get('phase');\n      return CustomResource.READY_STATUSES.indexOf(phase) > -1;\n    }\n  }, {\n    key: \"hasAppLabel\",\n    value: function hasAppLabel(appName) {\n      var labels = this.metadata.get('labels');\n\n      if (labels) {\n        return labels['mobile.aerogear.org/client'] === appName;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isInProgress\",\n    value: function isInProgress() {\n      var phase = this.status.get('phase');\n      return CustomResource.INPROGRESS_STATUSES.indexOf(phase) > -1;\n    }\n  }, {\n    key: \"isFailed\",\n    value: function isFailed() {\n      var phase = this.status.get('phase');\n      return CustomResource.FAILED_STATUSES.indexOf(phase) > -1;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var newStatus = _objectSpread({}, this.status.toJSON(), {\n        phase: 'deprovisioning'\n      });\n\n      this.status = new Status(newStatus);\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var newStatus = _objectSpread({}, this.status.toJSON(), {\n        phase: 'accepted'\n      });\n\n      this.status = new Status(newStatus);\n    }\n  }, {\n    key: \"getCurrentOperation\",\n    value: function getCurrentOperation() {\n      return this.status.get('phase');\n    }\n  }]);\n\n  return CustomResource;\n}(Resource);\nCustomResource.READY_STATUSES = ['reconcile'];\nCustomResource.INPROGRESS_STATUSES = ['accepted', 'modified', 'provision', 'deprovisioning', 'deprovisioned'];\nCustomResource.FAILED_STATUSES = ['failed', 'deprovisionFailed'];","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/models/mobileservices/customresource.js"],"names":["Resource","Status","CustomResource","data","metadata","get","phase","status","READY_STATUSES","indexOf","appName","labels","INPROGRESS_STATUSES","FAILED_STATUSES","newStatus","toJSON"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA;;;;;;;AAMA,WAAaC,cAAb;AAAA;AAAA;AAAA;;AAKE,4BAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,uFACfA,IADe;AAEtB;;AAPH;AAAA;AAAA,8BASY;AACR,aAAO,KAAKC,QAAL,CAAcC,GAAd,CAAkB,MAAlB,CAAP;AACD;AAXH;AAAA;AAAA,8BAaY;AACR,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYF,GAAZ,CAAgB,OAAhB,CAAd;AACA,aAAOH,cAAc,CAACM,cAAf,CAA8BC,OAA9B,CAAsCH,KAAtC,IAA+C,CAAC,CAAvD;AACD;AAhBH;AAAA;AAAA,gCAkBcI,OAlBd,EAkBuB;AACnB,UAAMC,MAAM,GAAG,KAAKP,QAAL,CAAcC,GAAd,CAAkB,QAAlB,CAAf;;AACA,UAAIM,MAAJ,EAAY;AACV,eAAOA,MAAM,CAAC,4BAAD,CAAN,KAAyCD,OAAhD;AACD;;AACD,aAAO,KAAP;AACD;AAxBH;AAAA;AAAA,mCA0BiB;AACb,UAAMJ,KAAK,GAAG,KAAKC,MAAL,CAAYF,GAAZ,CAAgB,OAAhB,CAAd;AACA,aAAOH,cAAc,CAACU,mBAAf,CAAmCH,OAAnC,CAA2CH,KAA3C,IAAoD,CAAC,CAA5D;AACD;AA7BH;AAAA;AAAA,+BA+Ba;AACT,UAAMA,KAAK,GAAG,KAAKC,MAAL,CAAYF,GAAZ,CAAgB,OAAhB,CAAd;AACA,aAAOH,cAAc,CAACW,eAAf,CAA+BJ,OAA/B,CAAuCH,KAAvC,IAAgD,CAAC,CAAxD;AACD;AAlCH;AAAA;AAAA,6BAoCW;AACP,UAAMQ,SAAS,qBACV,KAAKP,MAAL,CAAYQ,MAAZ,EADU;AAEbT,QAAAA,KAAK,EAAE;AAFM,QAAf;;AAIA,WAAKC,MAAL,GAAc,IAAIN,MAAJ,CAAWa,SAAX,CAAd;AACD;AA1CH;AAAA;AAAA,2BA4CS;AACL,UAAMA,SAAS,qBACV,KAAKP,MAAL,CAAYQ,MAAZ,EADU;AAEbT,QAAAA,KAAK,EAAE;AAFM,QAAf;;AAIA,WAAKC,MAAL,GAAc,IAAIN,MAAJ,CAAWa,SAAX,CAAd;AACD;AAlDH;AAAA;AAAA,0CAoDwB;AACpB,aAAO,KAAKP,MAAL,CAAYF,GAAZ,CAAgB,OAAhB,CAAP;AACD;AAtDH;;AAAA;AAAA,EAAoCL,QAApC;AAAaE,c,CACJM,c,GAAiB,CAAC,WAAD,C;AADbN,c,CAEJU,mB,GAAsB,CAAC,UAAD,EAAa,UAAb,EAAyB,WAAzB,EAAsC,gBAAtC,EAAwD,eAAxD,C;AAFlBV,c,CAGJW,e,GAAkB,CAAC,QAAD,EAAW,mBAAX,C","sourcesContent":["import Resource from '../k8s/resource';\nimport Status from '../k8s/status';\n\n/**\n * The base class to represent the custom resources that are used by the MDC.\n * It is based on the current implementation of KeycloakRealm.\n * However, it is unlikely that all CRs will follow the same convention, so we will likely to create new classes to represent other CRs.\n * In that case, extend this class and override the methods.\n */\nexport class CustomResource extends Resource {\n  static READY_STATUSES = ['reconcile'];\n  static INPROGRESS_STATUSES = ['accepted', 'modified', 'provision', 'deprovisioning', 'deprovisioned'];\n  static FAILED_STATUSES = ['failed', 'deprovisionFailed'];\n\n  constructor(data = {}) {\n    super(data);\n  }\n\n  getName() {\n    return this.metadata.get('name');\n  }\n\n  isReady() {\n    const phase = this.status.get('phase');\n    return CustomResource.READY_STATUSES.indexOf(phase) > -1;\n  }\n\n  hasAppLabel(appName) {\n    const labels = this.metadata.get('labels');\n    if (labels) {\n      return labels['mobile.aerogear.org/client'] === appName;\n    }\n    return false;\n  }\n\n  isInProgress() {\n    const phase = this.status.get('phase');\n    return CustomResource.INPROGRESS_STATUSES.indexOf(phase) > -1;\n  }\n\n  isFailed() {\n    const phase = this.status.get('phase');\n    return CustomResource.FAILED_STATUSES.indexOf(phase) > -1;\n  }\n\n  unbind() {\n    const newStatus = {\n      ...this.status.toJSON(),\n      phase: 'deprovisioning'\n    };\n    this.status = new Status(newStatus);\n  }\n\n  bind() {\n    const newStatus = {\n      ...this.status.toJSON(),\n      phase: 'accepted'\n    };\n    this.status = new Status(newStatus);\n  }\n\n  getCurrentOperation() {\n    return this.status.get('phase');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}