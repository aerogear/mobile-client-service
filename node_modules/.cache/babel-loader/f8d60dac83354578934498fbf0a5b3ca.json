{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Timer from '../../common/Timer';\nimport ToastNotification from './ToastNotification';\nimport { Alert } from '../Alert';\n/**\n * TimedToastNotification Component for Patternfly React\n */\n\nvar TimedToastNotification = function (_React$Component) {\n  _inherits(TimedToastNotification, _React$Component);\n\n  function TimedToastNotification() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TimedToastNotification);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TimedToastNotification.__proto__ || Object.getPrototypeOf(TimedToastNotification)).call.apply(_ref, [this].concat(args))), _this), _this.onMouseEnter = function () {\n      var onMouseEnter = _this.props.onMouseEnter;\n      onMouseEnter && onMouseEnter();\n    }, _this.onMouseLeave = function () {\n      var onMouseLeave = _this.props.onMouseLeave;\n      onMouseLeave && onMouseLeave();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TimedToastNotification, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          paused = _props.paused,\n          persistent = _props.persistent,\n          onDismiss = _props.onDismiss,\n          timerdelay = _props.timerdelay;\n\n      if (!persistent) {\n        this.timer = new Timer(onDismiss, timerdelay);\n        this.timer.startTimer();\n      }\n      /** if we are paused on mount, then clear the timer\n       * after having initialized with the correct delay */\n\n\n      if (paused) {\n        this.timer && this.timer.clearTimer();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      /**\n       * If paused prop changes, update our timer\n       */\n      if (nextProps.paused !== this.props.paused) {\n        if (nextProps.paused) {\n          this.timer && this.timer.clearTimer();\n        } else {\n          this.timer && this.timer.startTimer();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.timer && this.timer.clearTimer();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          className = _props2.className,\n          type = _props2.type,\n          onDismiss = _props2.onDismiss;\n      var onMouseEnter = this.onMouseEnter,\n          onMouseLeave = this.onMouseLeave;\n      var toastProps = {\n        className: className,\n        type: type,\n        onDismiss: onDismiss,\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave\n      };\n      return React.createElement(ToastNotification, toastProps, children);\n    }\n  }]);\n\n  return TimedToastNotification;\n}(React.Component); // WARNING: This should be kept consistent with ToastNotification.propTypes\n\n\nTimedToastNotification.propTypes = _extends({}, Alert.propTypes, {\n  /** pauses notification from dismissing */\n  paused: PropTypes.bool,\n\n  /** persistent keeps the notification up endlessly until closed */\n  persistent: PropTypes.bool,\n\n  /** timer delay until dismiss */\n  timerdelay: PropTypes.number,\n\n  /** onMouseEnter callback */\n  onMouseEnter: PropTypes.func,\n\n  /** onMouseLeave callback */\n  onMouseLeave: PropTypes.func\n}); // WARNING: This should be kept consistent with ToastNotification.defaultProps\n\nTimedToastNotification.defaultProps = _extends({}, Alert.defaultProps, {\n  paused: false,\n  timerdelay: 8000\n});\nTimedToastNotification.TOAST_NOTIFICATION_TYPES = [].concat(_toConsumableArray(Alert.ALERT_TYPES));\nTimedToastNotification.displayName = 'TimedToastNotification';\nexport default TimedToastNotification;","map":null,"metadata":{},"sourceType":"module"}