{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { ListGroup } from '../ListGroup';\n/**\n * WizardSidebarGroup component for Patternfly React\n */\n\nvar WizardSidebarGroup = function WizardSidebarGroup(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      step = _ref.step,\n      activeStep = _ref.activeStep,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'step', 'activeStep']);\n\n  var classes = classNames({\n    hidden: '' + step !== '' + activeStep\n  }, className);\n  return React.createElement(ListGroup, _extends({\n    componentClass: 'ul',\n    className: classes\n  }, props), children);\n};\n\nWizardSidebarGroup.propTypes = {\n  /** Children nodes */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** The wizard step number for this step */\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** The active step */\n  activeStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nWizardSidebarGroup.defaultProps = {\n  children: null,\n  className: '',\n  step: '',\n  activeStep: ''\n};\nexport default WizardSidebarGroup;","map":null,"metadata":{},"sourceType":"module"}