{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { noop, KEYS } from '../../common/helpers';\nimport TreeViewNode from './TreeViewNode';\nimport TreeViewExpand from './TreeViewExpand';\nimport TreeViewIcon from './TreeViewIcon';\nimport TreeViewIndents from './TreeViewIndents';\n\nvar TreeView = function (_React$Component) {\n  _inherits(TreeView, _React$Component);\n\n  function TreeView() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TreeView);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TreeView.__proto__ || Object.getPrototypeOf(TreeView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      focusedNodeId: '',\n      expandSiblings: ''\n    }, _this.onFocus = function (node) {\n      _this.setState(function () {\n        return {\n          focusedNodeId: node.dataset.id\n        };\n      });\n    }, _this.onKeyDown = function (event) {\n      var nodes = _this.getVisibleNodes([].concat(_toConsumableArray(_this.treeRef.current.getElementsByTagName('li'))));\n\n      var currentNodePosition = nodes.findIndex(function (element) {\n        return element.dataset.id === _this.state.focusedNodeId;\n      });\n\n      if (event.key === KEYS.ARROW_DOWN && currentNodePosition !== nodes.length - 1) {\n        nodes[currentNodePosition + 1].focus();\n      } else if (event.key === KEYS.ARROW_UP && currentNodePosition !== 0) {\n        nodes[currentNodePosition - 1].focus();\n      } else if (event.key === KEYS.HOME) {\n        var _nodes = _slicedToArray(nodes, 1),\n            firstNode = _nodes[0];\n\n        firstNode.focus();\n      } else if (event.key === KEYS.END) {\n        var _nodes$slice = nodes.slice(-1),\n            _nodes$slice2 = _slicedToArray(_nodes$slice, 1),\n            lastVisibleNode = _nodes$slice2[0];\n\n        lastVisibleNode.focus();\n      }\n    }, _this.onKeyPress = function (event) {\n      var nodes = _this.getVisibleNodes([].concat(_toConsumableArray(_this.treeRef.current.getElementsByTagName('li'))));\n\n      var currentNodePosition = nodes.findIndex(function (element) {\n        return element.dataset.id === _this.state.focusedNodeId;\n      });\n      var key = event.key;\n\n      if (/[a-zA-Z]{1}/.test(key) && key.length === 1) {\n        var searchableNodes = nodes.slice(currentNodePosition + 1);\n        var firstMatchingNode = searchableNodes.find(function (node) {\n          var nodeText = node.querySelector('.treeitem-row').textContent;\n\n          var _nodeText = _slicedToArray(nodeText, 1),\n              firstLetter = _nodeText[0];\n\n          return firstLetter === key;\n        });\n\n        if (firstMatchingNode) {\n          firstMatchingNode.focus();\n        } else {\n          var _nodes2 = _slicedToArray(nodes, 1),\n              firstNode = _nodes2[0];\n\n          firstNode.focus();\n        }\n      }\n\n      if (key === '*') {\n        _this.setState(function (prevState) {\n          return {\n            expandSiblings: prevState.focusedNodeId\n          };\n        });\n      }\n    }, _this.getVisibleNodes = function (nodes) {\n      return nodes.filter(function (node) {\n        return !node.className.match(/node-hidden/);\n      });\n    }, _this.clearExpandSiblings = function () {\n      _this.setState(function () {\n        return {\n          expandSiblings: ''\n        };\n      });\n    }, _this.treeRef = React.createRef(), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TreeView, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          nodes = _props.nodes,\n          selectNode = _props.selectNode,\n          highlightOnHover = _props.highlightOnHover,\n          highlightOnSelect = _props.highlightOnSelect,\n          accessibleName = _props.accessibleName;\n      var _state = this.state,\n          focusedNodeId = _state.focusedNodeId,\n          expandSiblings = _state.expandSiblings;\n      var classes = classNames('list-group', {\n        'treeview-select': highlightOnSelect,\n        'treeview-hover': highlightOnHover\n      });\n      return React.createElement('div', {\n        className: 'treeview'\n      }, React.createElement('ul', {\n        className: classes,\n        ref: this.treeRef,\n        onKeyDown: this.onKeyDown,\n        onKeyPress: this.onKeyPress,\n        role: 'tree',\n        'aria-label': accessibleName\n      }, nodes && nodes.map(function (node, index) {\n        return React.createElement(TreeViewNode, {\n          node: node,\n          key: index,\n          index: index,\n          nodeId: String(index),\n          level: 1,\n          selectNode: selectNode,\n          onFocus: _this2.onFocus,\n          focusedNodeId: focusedNodeId,\n          setSize: nodes.length,\n          expandSiblings: expandSiblings,\n          clearExpandSiblings: _this2.clearExpandSiblings\n        });\n      })));\n    }\n  }]);\n\n  return TreeView;\n}(React.Component);\n\nTreeView.propTypes = {\n  /** Array of node objects */\n  nodes: PropTypes.array,\n\n  /** Function that will be triggered when a selectable node is clicked */\n  selectNode: PropTypes.func,\n\n  /** Highlight node row on hover */\n  highlightOnHover: PropTypes.bool,\n\n  /** Highlight node row when clicked */\n  highlightOnSelect: PropTypes.bool,\n\n  /** Identification for assistive devices */\n  accessibleName: PropTypes.string\n};\nTreeView.defaultProps = {\n  highlightOnHover: false,\n  highlightOnSelect: false,\n  nodes: [],\n  selectNode: noop,\n  accessibleName: ''\n};\nTreeView.Node = TreeViewNode;\nTreeView.Expand = TreeViewExpand;\nTreeView.Icon = TreeViewIcon;\nTreeView.Indents = TreeViewIndents;\nexport default TreeView;","map":null,"metadata":{},"sourceType":"module"}