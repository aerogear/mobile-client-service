{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { CustomResource } from './customresource';\nexport var KeycloakRealmCR =\n/*#__PURE__*/\nfunction (_CustomResource) {\n  _inherits(KeycloakRealmCR, _CustomResource);\n\n  function KeycloakRealmCR() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, KeycloakRealmCR);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(KeycloakRealmCR).call(this, data));\n  }\n\n  _createClass(KeycloakRealmCR, [{\n    key: \"getConfiguration\",\n    value: function getConfiguration(serviceHost) {\n      var realmId = this.spec.get('realm');\n      return [{\n        type: 'string',\n        label: 'Keycloak Realm',\n        value: realmId\n      }, {\n        type: 'href',\n        label: 'Service Host',\n        value: serviceHost\n      }, {\n        type: 'href',\n        label: 'Keycloak Realm URL',\n        value: \"\".concat(serviceHost, \"/auth/admin/\").concat(realmId, \"/console/#/realms/\").concat(realmId)\n      }];\n    }\n  }], [{\n    key: \"bindForm\",\n    value: function bindForm(params) {\n      return {\n        schema: {\n          additionalProperties: false,\n          properties: {\n            CLIENT_ID: {\n              title: 'Mobile App ID',\n              type: 'string',\n              default: params.appName\n            },\n            realmSettings: {\n              type: 'object',\n              title: 'Realm Settings',\n              properties: {\n                realmId: {\n                  title: 'Realm Id',\n                  type: 'string',\n                  default: \"\".concat(params.appName, \"-realm\")\n                },\n                adminUsername: {\n                  title: 'Admin User name',\n                  type: 'string'\n                },\n                adminPassword: {\n                  title: 'Admin User password',\n                  type: 'string'\n                }\n              }\n            },\n            clientSettings: {\n              type: 'object',\n              title: 'Client Settings',\n              properties: {\n                clientId: {\n                  title: 'Client Id',\n                  type: 'string',\n                  default: \"\".concat(params.appName, \"-client\")\n                },\n                CLIENT_TYPE: {\n                  default: 'public',\n                  enum: ['bearer', 'public'],\n                  title: 'Client type',\n                  type: 'string'\n                }\n              }\n            }\n          },\n          type: 'object'\n        },\n        uiSchema: {\n          CLIENT_ID: {\n            'ui:widget': 'hidden'\n          },\n          clientSettings: {\n            clientId: {\n              'ui:readonly': true\n            }\n          },\n          realmSettings: {\n            realmId: {\n              'ui:readonly': true\n            },\n            adminPassword: {\n              'ui:widget': 'password'\n            }\n          }\n        },\n        validationRules: {\n          IDM_BINDING: {\n            comment: 'This is the set of rules that will be used to validate IDM bindings',\n            fields: {\n              realmSettings: {\n                adminUsername: {\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'Admin username is required'\n                  }]\n                },\n                adminPassword: {\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'Admin password is required'\n                  }]\n                }\n              }\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"newInstance\",\n    value: function newInstance(params) {\n      var CLIENT_ID = params.CLIENT_ID;\n      var _params$realmSettings = params.realmSettings,\n          realmId = _params$realmSettings.realmId,\n          adminUsername = _params$realmSettings.adminUsername,\n          adminPassword = _params$realmSettings.adminPassword;\n      var _params$clientSetting = params.clientSettings,\n          clientId = _params$clientSetting.clientId,\n          CLIENT_TYPE = _params$clientSetting.CLIENT_TYPE;\n      return {\n        apiVersion: 'aerogear.org/v1alpha1',\n        kind: 'KeycloakRealm',\n        metadata: {\n          name: realmId,\n          labels: {\n            'mobile.aerogear.org/client': CLIENT_ID\n          }\n        },\n        spec: {\n          id: realmId,\n          realm: realmId,\n          displayName: \"Realm for mobile app \".concat(CLIENT_ID),\n          enabled: true,\n          createOnly: true,\n          clients: [{\n            name: clientId,\n            clientId: clientId,\n            publicClient: CLIENT_TYPE === 'public',\n            bearerOnly: CLIENT_TYPE === 'bearer',\n            webOrigins: ['http://localhost:8100', '*'],\n            redirectUris: ['http://localhost:*'],\n            standardFlowEnabled: true,\n            enabled: true\n          }],\n          users: [{\n            username: adminUsername,\n            password: adminPassword,\n            outputSecret: \"\".concat(params.CLIENT_ID, \"-admin-pass\"),\n            enabled: true,\n            emailVerified: false,\n            firstName: '',\n            lastName: '',\n            email: '',\n            realmRoles: ['offline_access', 'uma_authorization'],\n            clientRoles: {\n              account: ['manage-account', 'view-profile'],\n              'realm-management': ['realm-admin']\n            }\n          }]\n        }\n      };\n    }\n  }, {\n    key: \"getDocumentationUrl\",\n    value: function getDocumentationUrl() {\n      return 'https://docs.aerogear.org/external/apb/keycloak.html';\n    }\n  }]);\n\n  return KeycloakRealmCR;\n}(CustomResource);","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/models/mobileservices/keycloakrealmcr.js"],"names":["CustomResource","KeycloakRealmCR","data","serviceHost","realmId","spec","get","type","label","value","params","schema","additionalProperties","properties","CLIENT_ID","title","default","appName","realmSettings","adminUsername","adminPassword","clientSettings","clientId","CLIENT_TYPE","enum","uiSchema","validationRules","IDM_BINDING","comment","fields","validation_rules","error","apiVersion","kind","metadata","name","labels","id","realm","displayName","enabled","createOnly","clients","publicClient","bearerOnly","webOrigins","redirectUris","standardFlowEnabled","users","username","password","outputSecret","emailVerified","firstName","lastName","email","realmRoles","clientRoles","account"],"mappings":"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","sourcesContent":["import { CustomResource } from './customresource';\n\nexport class KeycloakRealmCR extends CustomResource {\n  constructor(data = {}) {\n    super(data);\n  }\n\n  getConfiguration(serviceHost) {\n    const realmId = this.spec.get('realm');\n    return [\n      { type: 'string', label: 'Keycloak Realm', value: realmId },\n      { type: 'href', label: 'Service Host', value: serviceHost },\n      {\n        type: 'href',\n        label: 'Keycloak Realm URL',\n        value: `${serviceHost}/auth/admin/${realmId}/console/#/realms/${realmId}`\n      }\n    ];\n  }\n\n  static bindForm(params) {\n    return {\n      schema: {\n        additionalProperties: false,\n        properties: {\n          CLIENT_ID: {\n            title: 'Mobile App ID',\n            type: 'string',\n            default: params.appName\n          },\n          realmSettings: {\n            type: 'object',\n            title: 'Realm Settings',\n            properties: {\n              realmId: {\n                title: 'Realm Id',\n                type: 'string',\n                default: `${params.appName}-realm`\n              },\n              adminUsername: {\n                title: 'Admin User name',\n                type: 'string'\n              },\n              adminPassword: {\n                title: 'Admin User password',\n                type: 'string'\n              }\n            }\n          },\n          clientSettings: {\n            type: 'object',\n            title: 'Client Settings',\n            properties: {\n              clientId: {\n                title: 'Client Id',\n                type: 'string',\n                default: `${params.appName}-client`\n              },\n              CLIENT_TYPE: {\n                default: 'public',\n                enum: ['bearer', 'public'],\n                title: 'Client type',\n                type: 'string'\n              }\n            }\n          }\n        },\n        type: 'object'\n      },\n      uiSchema: {\n        CLIENT_ID: {\n          'ui:widget': 'hidden'\n        },\n        clientSettings: {\n          clientId: {\n            'ui:readonly': true\n          }\n        },\n        realmSettings: {\n          realmId: {\n            'ui:readonly': true\n          },\n          adminPassword: {\n            'ui:widget': 'password'\n          }\n        }\n      },\n      validationRules: {\n        IDM_BINDING: {\n          comment: 'This is the set of rules that will be used to validate IDM bindings',\n          fields: {\n            realmSettings: {\n              adminUsername: {\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'Admin username is required'\n                  }\n                ]\n              },\n              adminPassword: {\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'Admin password is required'\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n    };\n  }\n\n  static newInstance(params) {\n    const { CLIENT_ID } = params;\n    const { realmId, adminUsername, adminPassword } = params.realmSettings;\n    const { clientId, CLIENT_TYPE } = params.clientSettings;\n    return {\n      apiVersion: 'aerogear.org/v1alpha1',\n      kind: 'KeycloakRealm',\n      metadata: {\n        name: realmId,\n        labels: {\n          'mobile.aerogear.org/client': CLIENT_ID\n        }\n      },\n      spec: {\n        id: realmId,\n        realm: realmId,\n        displayName: `Realm for mobile app ${CLIENT_ID}`,\n        enabled: true,\n        createOnly: true,\n        clients: [\n          {\n            name: clientId,\n            clientId,\n            publicClient: CLIENT_TYPE === 'public',\n            bearerOnly: CLIENT_TYPE === 'bearer',\n            webOrigins: ['http://localhost:8100', '*'],\n            redirectUris: ['http://localhost:*'],\n            standardFlowEnabled: true,\n            enabled: true\n          }\n        ],\n        users: [\n          {\n            username: adminUsername,\n            password: adminPassword,\n            outputSecret: `${params.CLIENT_ID}-admin-pass`,\n            enabled: true,\n            emailVerified: false,\n            firstName: '',\n            lastName: '',\n            email: '',\n            realmRoles: ['offline_access', 'uma_authorization'],\n            clientRoles: {\n              account: ['manage-account', 'view-profile'],\n              'realm-management': ['realm-admin']\n            }\n          }\n        ]\n      }\n    };\n  }\n\n  static getDocumentationUrl() {\n    return 'https://docs.aerogear.org/external/apb/keycloak.html';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}