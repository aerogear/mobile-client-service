{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nvar Spinner = function Spinner(_ref) {\n  var loading = _ref.loading,\n      size = _ref.size,\n      inline = _ref.inline,\n      children = _ref.children,\n      inverse = _ref.inverse,\n      className = _ref.className,\n      props = _objectWithoutProperties(_ref, ['loading', 'size', 'inline', 'children', 'inverse', 'className']);\n\n  if (loading) {\n    var classes = classNames(className, 'spinner', 'spinner-' + size, {\n      'spinner-inline': inline,\n      'spinner-inverse': inverse\n    });\n    return React.createElement('div', _extends({\n      className: classes\n    }, props));\n  }\n\n  return children || null;\n};\n\nSpinner.propTypes = {\n  loading: PropTypes.bool,\n  inline: PropTypes.bool,\n  inverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nSpinner.defaultProps = {\n  loading: false,\n  size: 'md',\n  inline: false,\n  inverse: false,\n  children: null,\n  className: ''\n};\nexport default Spinner;","map":null,"metadata":{},"sourceType":"module"}