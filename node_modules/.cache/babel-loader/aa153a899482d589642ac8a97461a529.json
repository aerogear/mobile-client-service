{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n/**\n * ListViewGroupItem is a root node of each ListViewItem\n */\n\nvar ListViewGroupItem = function ListViewGroupItem(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      stacked = _ref.stacked,\n      expanded = _ref.expanded,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'stacked', 'expanded']);\n\n  var classes = classNames('list-group-item', {\n    'list-view-pf-expand-active': expanded,\n    'list-view-pf-stacked': stacked\n  }, className);\n  return React.createElement('div', _extends({\n    className: classes\n  }, props), children);\n};\n\nListViewGroupItem.propTypes = {\n  /** Children nodes */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** Toggles the item expanded */\n  expanded: PropTypes.bool,\n\n  /** Toggles the item stacked */\n  stacked: PropTypes.bool\n};\nListViewGroupItem.defaultProps = {\n  children: null,\n  expanded: false,\n  stacked: false,\n  className: ''\n};\nexport default ListViewGroupItem;","map":null,"metadata":{},"sourceType":"module"}