{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n/**\n * ListViewInfoItem renders contents of individual Info item\n */\n\nvar ListViewInfoItem = function ListViewInfoItem(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      stacked = _ref.stacked,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'stacked']);\n\n  var classes = classNames({\n    'list-view-pf-additional-info-item-stacked': stacked\n  }, 'list-view-pf-additional-info-item', className);\n  return React.createElement('div', _extends({\n    className: classes,\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    }\n  }, props), children);\n};\n\nListViewInfoItem.propTypes = {\n  /** Child node - contents of the additional info item */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** Toggle the InfoItem contents stacking */\n  stacked: PropTypes.bool\n};\nListViewInfoItem.defaultProps = {\n  children: null,\n  className: '',\n  stacked: false\n};\nexport default ListViewInfoItem;","map":null,"metadata":{},"sourceType":"module"}