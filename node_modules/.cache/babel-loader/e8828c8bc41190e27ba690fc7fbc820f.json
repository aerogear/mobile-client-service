{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotificationDrawer } from '../NotificationDrawer/index';\nimport { NotificationDrawerPanelWrapper } from './index';\nimport { noop } from '../../../common/helpers';\n\nvar NotificationDrawerWrapper = function NotificationDrawerWrapper(_ref) {\n  var panels = _ref.panels,\n      translations = _ref.translations,\n      toggleDrawerHide = _ref.toggleDrawerHide,\n      toggleDrawerExpand = _ref.toggleDrawerExpand,\n      isExpandable = _ref.isExpandable,\n      isExpanded = _ref.isExpanded,\n      expandedPanel = _ref.expandedPanel,\n      togglePanel = _ref.togglePanel,\n      onNotificationClick = _ref.onNotificationClick,\n      onNotificationAsRead = _ref.onNotificationAsRead,\n      onNotificationHide = _ref.onNotificationHide,\n      onMarkPanelAsRead = _ref.onMarkPanelAsRead,\n      onMarkPanelAsClear = _ref.onMarkPanelAsClear,\n      onClickedLink = _ref.onClickedLink;\n\n  var translationsWrapper = _extends({}, NotificationDrawerPanelWrapper.defaultProps.translations, translations);\n\n  var notificationPanels = panels.map(function (panel, i) {\n    return React.createElement(NotificationDrawerPanelWrapper, {\n      key: i,\n      panelName: panel.panelName,\n      panelkey: panel.panelkey,\n      onClickedLink: onClickedLink,\n      notifications: panel.notifications,\n      togglePanel: togglePanel,\n      isExpanded: expandedPanel === panel.panelkey,\n      onNotificationClick: onNotificationClick,\n      onNotificationAsRead: onNotificationAsRead,\n      onNotificationHide: onNotificationHide,\n      onMarkPanelAsRead: onMarkPanelAsRead,\n      onMarkPanelAsClear: onMarkPanelAsClear,\n      showLoading: panel.showLoading,\n      translations: translationsWrapper\n    });\n  });\n  var noNotificationsMessage = React.createElement(NotificationDrawer.EmptyState, {\n    title: translations.emptyState\n  });\n  return React.createElement(NotificationDrawer, {\n    expanded: isExpanded\n  }, React.createElement(NotificationDrawer.Title, {\n    title: translations.title,\n    onCloseClick: function onCloseClick() {\n      return toggleDrawerHide();\n    },\n    expandable: isExpandable,\n    onExpandClick: toggleDrawerExpand\n  }), React.createElement(NotificationDrawer.Accordion, null, notificationPanels.length === 0 ? noNotificationsMessage : notificationPanels));\n};\n\nNotificationDrawerWrapper.propTypes = {\n  /** toggleDrawer Hide/Expand func */\n  toggleDrawerExpand: PropTypes.func,\n  toggleDrawerHide: PropTypes.func,\n\n  /** Notification Panels Array */\n  panels: PropTypes.array,\n\n  /** is Expanded Bool */\n  isExpanded: PropTypes.bool,\n\n  /** function(panelkey, notificationkey) on Notification Click */\n  onNotificationClick: PropTypes.func,\n\n  /** function(panelkey, notificationkey) on Notification Mark as Read Click */\n  onNotificationAsRead: PropTypes.func,\n\n  /** on function(panelkey) Panel Read All Click */\n  onMarkPanelAsRead: PropTypes.func,\n\n  /** function(url) on Dropdown Link Click */\n  onClickedLink: PropTypes.func,\n\n  /** function(panelkey, notificationkey) on Notification Hide Click */\n  onNotificationHide: PropTypes.func,\n\n  /** function(panelkey) Panel Clear All Click */\n  onMarkPanelAsClear: PropTypes.func,\n\n  /** function() togglePanel Click */\n  togglePanel: PropTypes.func,\n\n  /** show Loading notification Bool */\n  isExpandable: PropTypes.bool,\n\n  /** expanded Panel */\n  expandedPanel: PropTypes.string,\n\n  /** translations for Title, EmptyState, Read/Clear */\n  translations: PropTypes.shape({\n    title: PropTypes.string,\n    unreadEvent: PropTypes.string,\n    unreadEvents: PropTypes.string,\n    emptyState: PropTypes.string,\n    readAll: PropTypes.string,\n    clearAll: PropTypes.string,\n    deleteNotification: PropTypes.string\n  })\n};\nNotificationDrawerWrapper.defaultProps = {\n  panels: null,\n  toggleDrawerHide: noop,\n  toggleDrawerExpand: noop,\n  togglePanel: null,\n  isExpanded: false,\n  onNotificationClick: noop,\n  onNotificationAsRead: noop,\n  onMarkPanelAsRead: noop,\n  onClickedLink: noop,\n  onNotificationHide: noop,\n  onMarkPanelAsClear: noop,\n  isExpandable: true,\n  expandedPanel: null,\n  translations: {}\n};\nexport default NotificationDrawerWrapper;","map":null,"metadata":{},"sourceType":"module"}