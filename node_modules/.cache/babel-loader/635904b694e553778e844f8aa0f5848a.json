{"ast":null,"code":"import { CustomResource } from './customresource';\nimport { KeycloakRealmCR } from './keycloakrealmcr';\nimport { PushVariantCR } from './pushvariantcr';\nimport { MetricsCR } from './metricscr';\n/**\n * Produce an instance of a custom resouce based on the passed in data.\n * For now it always return an instance of the base CustomResource class, but it can be easily changed to return subclasses.\n * @param {*} data\n */\n\nexport function newCustomResource(data) {\n  if (data && data.kind === 'KeycloakRealm') {\n    return new KeycloakRealmCR(data);\n  } // TODO: use the right kind\n\n\n  if (data && data.kind === 'PushVariant') {\n    return new PushVariantCR(data);\n  }\n\n  if (data && data.kind === 'MetricsApp') {\n    return new MetricsCR(data);\n  }\n\n  return new CustomResource(data);\n}\nexport function newCustomResourceClass(type) {\n  if (type === 'KeycloakRealm') {\n    return KeycloakRealmCR;\n  } // TODO: use the right kind\n\n\n  if (type === 'PushVariant') {\n    return PushVariantCR;\n  }\n\n  if (type === 'MetricsApp') {\n    return MetricsCR;\n  }\n\n  return CustomResource;\n}","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/models/mobileservices/customresourcefactory.js"],"names":["CustomResource","KeycloakRealmCR","PushVariantCR","MetricsCR","newCustomResource","data","kind","newCustomResourceClass","type"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA;;;;;;AAKA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,MAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,eAA1B,EAA2C;AACzC,WAAO,IAAIL,eAAJ,CAAoBI,IAApB,CAAP;AACD,GAHqC,CAItC;;;AACA,MAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,aAA1B,EAAyC;AACvC,WAAO,IAAIJ,aAAJ,CAAkBG,IAAlB,CAAP;AACD;;AACD,MAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,YAA1B,EAAwC;AACtC,WAAO,IAAIH,SAAJ,CAAcE,IAAd,CAAP;AACD;;AACD,SAAO,IAAIL,cAAJ,CAAmBK,IAAnB,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,MAAIA,IAAI,KAAK,eAAb,EAA8B;AAC5B,WAAOP,eAAP;AACD,GAH0C,CAI3C;;;AACA,MAAIO,IAAI,KAAK,aAAb,EAA4B;AAC1B,WAAON,aAAP;AACD;;AACD,MAAIM,IAAI,KAAK,YAAb,EAA2B;AACzB,WAAOL,SAAP;AACD;;AACD,SAAOH,cAAP;AACD","sourcesContent":["import { CustomResource } from './customresource';\nimport { KeycloakRealmCR } from './keycloakrealmcr';\nimport { PushVariantCR } from './pushvariantcr';\nimport { MetricsCR } from './metricscr';\n\n/**\n * Produce an instance of a custom resouce based on the passed in data.\n * For now it always return an instance of the base CustomResource class, but it can be easily changed to return subclasses.\n * @param {*} data\n */\nexport function newCustomResource(data) {\n  if (data && data.kind === 'KeycloakRealm') {\n    return new KeycloakRealmCR(data);\n  }\n  // TODO: use the right kind\n  if (data && data.kind === 'PushVariant') {\n    return new PushVariantCR(data);\n  }\n  if (data && data.kind === 'MetricsApp') {\n    return new MetricsCR(data);\n  }\n  return new CustomResource(data);\n}\n\nexport function newCustomResourceClass(type) {\n  if (type === 'KeycloakRealm') {\n    return KeycloakRealmCR;\n  }\n  // TODO: use the right kind\n  if (type === 'PushVariant') {\n    return PushVariantCR;\n  }\n  if (type === 'MetricsApp') {\n    return MetricsCR;\n  }\n  return CustomResource;\n}\n"]},"metadata":{},"sourceType":"module"}