{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport PaginationRow from './PaginationRow';\nimport { noop } from '../../common/helpers';\nimport { PAGINATION_VIEW_TYPES } from './PaginationConstants';\n\nvar Paginator = function (_React$Component) {\n  _inherits(Paginator, _React$Component);\n\n  function Paginator(props) {\n    _classCallCheck(this, Paginator);\n\n    var _this = _possibleConstructorReturn(this, (Paginator.__proto__ || Object.getPrototypeOf(Paginator)).call(this, props));\n\n    _this.handleFormSubmit = function (e) {\n      _this.setPage(_this.state.pageChangeValue);\n    };\n\n    _this.initPagination(props);\n\n    _this.state = {\n      pageChangeValue: props.pagination.page\n    };\n    return _this;\n  }\n\n  _createClass(Paginator, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var pagination = nextProps.pagination;\n\n      if (this.state.pageChangeValue !== pagination.page) {\n        this.setState({\n          pageChangeValue: Number(pagination.page)\n        });\n      }\n\n      this.initPagination(nextProps);\n    }\n  }, {\n    key: 'setPage',\n    value: function setPage(value) {\n      var page = Number(value);\n\n      if (!Number.isNaN(value) && value !== '' && page > 0 && page <= this.totalPages()) {\n        this.props.onPageSet(page);\n      }\n    }\n  }, {\n    key: 'setPageRelative',\n    value: function setPageRelative(diff) {\n      var pagination = this.props.pagination;\n      var page = Number(pagination.page) + diff;\n      this.setPage(page);\n    }\n  }, {\n    key: 'handlePageChange',\n    value: function handlePageChange(e) {\n      this.setState({\n        pageChangeValue: e.target.value\n      });\n    }\n  }, {\n    key: 'initPagination',\n    value: function initPagination(props) {\n      var pagination = props.pagination;\n      this.perPage = Number(pagination.perPage);\n      this.currentPage = Number(pagination.page);\n      this.itemCount = Number(props.itemCount);\n    }\n  }, {\n    key: 'totalPages',\n    value: function totalPages() {\n      return Math.ceil(this.props.itemCount / this.perPage);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var pageChangeValue = this.state.pageChangeValue;\n      var _props = this.props,\n          className = _props.className,\n          viewType = _props.viewType,\n          itemCount = _props.itemCount,\n          messages = _props.messages,\n          dropdownButtonId = _props.dropdownButtonId,\n          onPerPageSelect = _props.onPerPageSelect,\n          pagination = _props.pagination;\n      var itemsStart = (this.currentPage - 1) * this.perPage + 1;\n      var itemsEnd = Math.min(itemsStart + this.perPage - 1, this.itemCount);\n      var totalPages = this.totalPages();\n      return React.createElement(PaginationRow, {\n        className: className,\n        onSubmit: this.handleFormSubmit,\n        viewType: viewType,\n        pagination: pagination,\n        pageInputValue: pageChangeValue,\n        amountOfPages: this.totalPages(),\n        itemCount: itemCount,\n        itemsStart: itemsStart,\n        itemsEnd: itemsEnd,\n        messages: messages,\n        dropdownButtonId: dropdownButtonId,\n        onPerPageSelect: onPerPageSelect,\n        onFirstPage: function onFirstPage() {\n          return _this2.setPage(1);\n        },\n        onPreviousPage: function onPreviousPage() {\n          return _this2.setPageRelative(-1);\n        },\n        onPageInput: function onPageInput(e) {\n          return _this2.handlePageChange(e);\n        },\n        onNextPage: function onNextPage() {\n          return _this2.setPageRelative(1);\n        },\n        onLastPage: function onLastPage() {\n          return _this2.setPage(totalPages);\n        }\n      });\n    }\n  }]);\n\n  return Paginator;\n}(React.Component);\n\nPaginator.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** pagination row view type */\n  viewType: PropTypes.oneOf(PAGINATION_VIEW_TYPES).isRequired,\n\n  /** user pagination settings */\n  pagination: PropTypes.shape({\n    /** the current page */\n    page: PropTypes.number.isRequired,\n\n    /** the current per page setting */\n    perPage: PropTypes.number.isRequired,\n\n    /** per page options */\n    perPageOptions: PropTypes.array\n  }).isRequired,\n\n  /** calculated number of rows */\n  itemCount: PropTypes.number.isRequired,\n\n  /** message text inputs for i18n */\n  messages: PropTypes.shape({\n    firstPage: PropTypes.string,\n    previousPage: PropTypes.string,\n    nextPage: PropTypes.string,\n    lastPage: PropTypes.string,\n    perPage: PropTypes.string,\n    of: PropTypes.string\n  }),\n\n  /** dropdown button id */\n  dropdownButtonId: PropTypes.string,\n\n  /** A callback triggered when a page is switched */\n  onPageSet: PropTypes.func,\n\n  /** per page selection callback */\n  onPerPageSelect: PropTypes.func\n};\nPaginator.defaultProps = {\n  className: '',\n  messages: {\n    firstPage: 'First Page',\n    previousPage: 'Previous Page',\n    currentPage: 'Current Page',\n    nextPage: 'Next Page',\n    lastPage: 'Last Page',\n    perPage: 'per page',\n    of: 'of'\n  },\n  dropdownButtonId: 'pagination-row-dropdown',\n  onPerPageSelect: noop,\n  onPageSet: noop\n};\nexport default Paginator;","map":null,"metadata":{},"sourceType":"module"}