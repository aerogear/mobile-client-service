{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nvar ALIGN_LEFT = 'left';\nvar ALIGN_CENTER = 'center';\nvar ALIGN_TYPES = [ALIGN_LEFT, ALIGN_CENTER];\n\nvar ExpandCollapse = function (_React$Component) {\n  _inherits(ExpandCollapse, _React$Component);\n\n  function ExpandCollapse() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ExpandCollapse);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandCollapse.__proto__ || Object.getPrototypeOf(ExpandCollapse)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      expanded: false,\n      mirroredExpanded: false\n    }, _this.onClick = function () {\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ExpandCollapse, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          textCollapsed = _props.textCollapsed,\n          textExpanded = _props.textExpanded,\n          align = _props.align,\n          className = _props.className,\n          bordered = _props.bordered;\n      var expanded = this.state.expanded;\n      var separatorClass = classNames('expand-collapse-pf-separator', {\n        bordered: bordered\n      });\n      return React.createElement('div', {\n        className: classNames('expand-collapse-pf', className)\n      }, React.createElement('div', {\n        className: 'expand-collapse-pf-link-container'\n      }, align === ALIGN_CENTER && React.createElement('span', {\n        className: separatorClass\n      }), React.createElement(Button, {\n        bsStyle: 'link',\n        onClick: this.onClick\n      }, React.createElement(Icon, {\n        type: 'fa',\n        name: expanded ? 'angle-down' : 'angle-right'\n      }), expanded ? textExpanded : textCollapsed), React.createElement('span', {\n        className: separatorClass\n      })), this.state.expanded && children);\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (prevState.mirroredExpanded !== nextProps.expanded) {\n        return {\n          expanded: nextProps.expanded,\n          mirroredExpanded: nextProps.expanded\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ExpandCollapse;\n}(React.Component);\n\nExpandCollapse.propTypes = {\n  children: PropTypes.any.isRequired,\n\n  /** Top-level custom class */\n  className: PropTypes.string,\n\n  /** Text for the link in collapsed state */\n  textCollapsed: PropTypes.string,\n\n  /** Text for the link in expanded state */\n  textExpanded: PropTypes.string,\n\n  /** Align the link to the left or center. */\n  align: PropTypes.oneOf(ALIGN_TYPES),\n\n  /** Flag to show a separation border line */\n  bordered: PropTypes.bool,\n\n  /** Flag to control expansion state */\n  expanded: PropTypes.bool // eslint-disable-line react/no-unused-prop-types\n\n};\nExpandCollapse.defaultProps = {\n  className: '',\n  textCollapsed: 'Show Advanced Options',\n  textExpanded: 'Hide Advanced Options',\n  align: ALIGN_LEFT,\n  bordered: true,\n  expanded: false\n};\nExpandCollapse.ALIGN_LEFT = ALIGN_LEFT;\nExpandCollapse.ALIGN_CENTER = ALIGN_CENTER;\nExpandCollapse.ALIGN_TYPES = ALIGN_TYPES;\nexport default ExpandCollapse;","map":null,"metadata":{},"sourceType":"module"}