{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from 'react-bootstrap/es/Collapse';\nimport { Notification } from '../index';\nimport { NotificationDrawer } from '../NotificationDrawer/index';\nimport { Icon } from '../../Icon';\nimport { Button } from '../../Button';\nimport { MenuItem } from '../../MenuItem';\nimport { noop } from '../../../common/helpers';\nimport getIconClass from './Icon.consts';\n\nvar NotificationDrawerPanelWrapper = function NotificationDrawerPanelWrapper(_ref) {\n  var panelkey = _ref.panelkey,\n      panelName = _ref.panelName,\n      className = _ref.className,\n      notifications = _ref.notifications,\n      isExpanded = _ref.isExpanded,\n      togglePanel = _ref.togglePanel,\n      onNotificationClick = _ref.onNotificationClick,\n      onNotificationAsRead = _ref.onNotificationAsRead,\n      onNotificationHide = _ref.onNotificationHide,\n      onMarkPanelAsRead = _ref.onMarkPanelAsRead,\n      onClickedLink = _ref.onClickedLink,\n      onMarkPanelAsClear = _ref.onMarkPanelAsClear,\n      showLoading = _ref.showLoading,\n      translations = _ref.translations;\n  var unreadCount = notifications.filter(function (notification) {\n    return !notification.seen;\n  }).length;\n\n  var getUnread = function getUnread() {\n    if (unreadCount !== 1) return unreadCount + ' ' + translations.unreadEvents;\n    return '1 ' + translations.unreadEvent;\n  };\n\n  var notificationClickHandler = function notificationClickHandler(panel, notification, seen) {\n    onNotificationClick(panel, notification);\n\n    if (!seen) {\n      onNotificationAsRead(panel, notification);\n    }\n  };\n\n  var notificationsMap = notifications.map(function (notification, i) {\n    return React.createElement(Notification, {\n      key: i,\n      seen: notification.seen,\n      onClick: function onClick() {\n        return notificationClickHandler(panelkey, notification.id, notification.seen);\n      }\n    }, notification.actions ? Object.keys(notification.actions).length > 0 && React.createElement(NotificationDrawer.Dropdown, {\n      pullRight: true,\n      id: i\n    }, notification.actions.links.map(function (link, j) {\n      return React.createElement(MenuItem, {\n        key: j,\n        id: 'notification-kebab-' + j,\n        onClick: function onClick() {\n          return onClickedLink(link);\n        }\n      }, link.title);\n    }), React.createElement(MenuItem, {\n      divider: true\n    }), React.createElement(MenuItem, {\n      id: 'notification-kebab-hide',\n      onClick: function onClick() {\n        return onNotificationHide(panelkey, notification.id);\n      }\n    }, translations.deleteNotification)) : null, React.createElement(Icon, {\n      className: 'pull-left',\n      type: 'pf',\n      name: getIconClass(notification.level)\n    }), React.createElement(Notification.Content, null, React.createElement(Notification.Message, null, notification.text), notification.created_at && React.createElement(Notification.Info, {\n      leftText: new Date(notification.created_at).toLocaleDateString(),\n      rightText: new Date(notification.created_at).toLocaleTimeString()\n    })));\n  });\n  var renderNotifications = React.createElement(NotificationDrawer.PanelBody, {\n    key: 'containsNotifications'\n  }, showLoading ? [notificationsMap, React.createElement(Notification, {\n    key: 'loading',\n    type: 'loading'\n  })] : notificationsMap);\n  var renderClearReadButtons = React.createElement(NotificationDrawer.PanelAction, {\n    key: panelkey\n  }, unreadCount > 0 && React.createElement(NotificationDrawer.PanelActionLink, {\n    className: 'drawer-pf-action-link',\n    'data-toggle': 'mark-all-read'\n  }, React.createElement(Button, {\n    bsStyle: 'link',\n    onClick: function onClick() {\n      return onMarkPanelAsRead(panelkey);\n    }\n  }, translations.readAll)), React.createElement(NotificationDrawer.PanelActionLink, {\n    'data-toggle': 'clear-all'\n  }, React.createElement(Button, {\n    bsStyle: 'link',\n    onClick: function onClick() {\n      return onMarkPanelAsClear(panelkey);\n    }\n  }, React.createElement(Icon, {\n    type: 'pf',\n    name: 'close'\n  }), translations.clearAll)));\n  var noNotificationsMessage = React.createElement(NotificationDrawer.EmptyState, {\n    title: translations.emptyState\n  });\n  return React.createElement(NotificationDrawer.Panel, {\n    className: className,\n    expanded: isExpanded\n  }, React.createElement(NotificationDrawer.PanelHeading, {\n    onClick: function onClick() {\n      return togglePanel(panelkey);\n    }\n  }, React.createElement(NotificationDrawer.PanelTitle, null, React.createElement('a', {\n    className: isExpanded ? '' : 'collapsed'\n  }, panelName)), React.createElement(NotificationDrawer.PanelCounter, {\n    text: getUnread()\n  })), React.createElement(Collapse, {\n    'in': isExpanded\n  }, React.createElement(NotificationDrawer.PanelCollapse, {\n    id: panelkey\n  }, notifications.length > 0 ? [renderNotifications, renderClearReadButtons] : noNotificationsMessage)));\n};\n\nNotificationDrawerPanelWrapper.propTypes = {\n  /** Panel Key,Name */\n  panelkey: PropTypes.string,\n  panelName: PropTypes.string,\n  className: PropTypes.string,\n\n  /** Notification Panels Array */\n  notifications: PropTypes.array,\n\n  /** is Expanded Bool */\n  isExpanded: PropTypes.bool,\n\n  /** function(panelkey, notificationkey) on Notification Click */\n  onNotificationClick: PropTypes.func,\n\n  /** function(panelkey, notificationkey) on Notification Mark as Read Click */\n  onNotificationAsRead: PropTypes.func,\n\n  /** on function(panelkey) Panel Read All Click */\n  onMarkPanelAsRead: PropTypes.func,\n\n  /** function(url) on Dropdown Link Click */\n  onClickedLink: PropTypes.func,\n\n  /** function(panelkey, notificationkey) on Notification Hide Click */\n  onNotificationHide: PropTypes.func,\n\n  /** function(panelkey) Panel Clear All Click */\n  onMarkPanelAsClear: PropTypes.func,\n\n  /** function() togglePanel Click */\n  togglePanel: PropTypes.func,\n\n  /** show Loading notification Bool */\n  showLoading: PropTypes.bool,\n\n  /** translations for Title, EmptyState, Read/Clear */\n  translations: PropTypes.shape({\n    title: PropTypes.string,\n    unreadEvent: PropTypes.string,\n    unreadEvents: PropTypes.string,\n    emptyState: PropTypes.string,\n    readAll: PropTypes.string,\n    clearAll: PropTypes.string,\n    deleteNotification: PropTypes.string\n  })\n};\nNotificationDrawerPanelWrapper.defaultProps = {\n  panelkey: '1',\n  notifications: PropTypes.array,\n  isExpanded: false,\n  className: null,\n  panelName: null,\n  onNotificationClick: noop,\n  onNotificationAsRead: noop,\n  onMarkPanelAsRead: noop,\n  onClickedLink: noop,\n  onNotificationHide: noop,\n  onMarkPanelAsClear: noop,\n  togglePanel: noop,\n  showLoading: false,\n  translations: {\n    title: 'Notifications',\n    unreadEvent: 'Unread Event',\n    unreadEvents: 'Unread Events',\n    emptyState: 'No Notifications Available',\n    readAll: 'Mark All Read',\n    clearAll: 'Clear All',\n    deleteNotification: 'Hide this notification'\n  }\n};\nexport default NotificationDrawerPanelWrapper;","map":null,"metadata":{},"sourceType":"module"}