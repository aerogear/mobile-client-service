{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DropdownButton, MenuItem } from '../../../../index';\nimport { noop } from '../../../../common/helpers';\n\nvar LoginLanguagePicker = function (_React$Component) {\n  _inherits(LoginLanguagePicker, _React$Component);\n\n  function LoginLanguagePicker(props) {\n    _classCallCheck(this, LoginLanguagePicker);\n\n    var _this = _possibleConstructorReturn(this, (LoginLanguagePicker.__proto__ || Object.getPrototypeOf(LoginLanguagePicker)).call(this, props));\n\n    _this.handleClick = function (e) {\n      var onLanguageChange = _this.props.onLanguageChange;\n      onLanguageChange(e);\n\n      _this.setState({\n        title: e.target.text\n      });\n    };\n\n    var selectedLanguage = props.selectedLanguage,\n        availableLanguages = props.availableLanguages;\n    _this.state = {\n      title: selectedLanguage || availableLanguages && availableLanguages[0].text\n    };\n    return _this;\n  }\n\n  _createClass(LoginLanguagePicker, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var selectedLanguage = nextProps.selectedLanguage,\n          availableLanguages = nextProps.availableLanguages;\n      var title = selectedLanguage || availableLanguages && availableLanguages[0].text;\n      this.setState({\n        title: title\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          availableLanguages = _props.availableLanguages,\n          className = _props.className,\n          id = _props.id;\n      var title = this.state.title;\n\n      if (!availableLanguages) {\n        return null;\n      }\n\n      var menuItems = availableLanguages.map(function (language, index) {\n        return React.createElement(MenuItem, {\n          key: index,\n          value: language.value,\n          active: title === language.text,\n          onClick: _this2.handleClick\n        }, language.text);\n      });\n      return React.createElement('div', {\n        className: classNames('bootstrap-select btn-group', className)\n      }, React.createElement(DropdownButton, {\n        title: title,\n        id: id\n      }, menuItems));\n    }\n  }]);\n\n  return LoginLanguagePicker;\n}(React.Component);\n\nLoginLanguagePicker.propTypes = {\n  /** Provided languages to pass into the dropdown menu */\n  availableLanguages: PropTypes.arrayOf(PropTypes.shape({\n    /** the language menu item's value */\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n    /** the language menu item's text */\n    text: PropTypes.string\n  })),\n\n  /** The default selected language */\n  selectedLanguage: PropTypes.string,\n\n  /** Callback to trigger when selecting a language */\n  onLanguageChange: PropTypes.func,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** The dropdown's id */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nLoginLanguagePicker.defaultProps = {\n  selectedLanguage: null,\n  availableLanguages: null,\n  onLanguageChange: noop,\n  className: null,\n  id: 'language-picker'\n};\nexport default LoginLanguagePicker;","map":null,"metadata":{},"sourceType":"module"}