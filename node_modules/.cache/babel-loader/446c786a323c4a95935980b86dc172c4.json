{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport forge from 'node-forge';\nimport { get } from 'lodash-es';\nimport { ValidationRuleBaseClass } from './ValidationRuleBaseClass';\n/**\n * This rule is used to verify that the provided Base64 string is a valid PKCS#12 file.\n * It can even check if the provided password is valid (if configured)\n *\n * The configuration for this rule must be as follows:\n * {\n *   \"type\": \"P12VALIDATOR\",                // this must be exactly 'required'\n *   \"error\": \"Your error message\"          // Optional. The custom error message.\n *                                          // This can be a string, a dictionary or a function (signature: (key, message) => {})\n *                                          // If not specified, a standard error message is returned.\n *   \"password_field\": \"passwordFieldName\"  // Optional. The name of the field containing the PKCS#12 password\n * }\n */\n\nexport var P12ValidationRule =\n/*#__PURE__*/\nfunction (_ValidationRuleBaseCl) {\n  _inherits(P12ValidationRule, _ValidationRuleBaseCl);\n\n  function P12ValidationRule(config) {\n    var _this;\n\n    _classCallCheck(this, P12ValidationRule);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(P12ValidationRule).call(this, config));\n    _this.passwordField = config.password_field;\n    return _this;\n  }\n\n  _createClass(P12ValidationRule, [{\n    key: \"validate\",\n    value: function validate(data, key) {\n      var p12b64 = get(data, key);\n\n      if (p12b64) {\n        try {\n          var p12Der = forge.util.decode64(p12b64);\n          var p12Asn1 = forge.asn1.fromDer(p12Der);\n\n          if (this.passwordField) {\n            var password = get(data, this.passwordField);\n            forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n          }\n        } catch (error) {\n          return {\n            valid: false,\n            error: this.getErrorMessage({\n              key: error.message,\n              message: error.message\n            })\n          };\n        }\n      }\n\n      return {\n        valid: true\n      };\n    }\n  }]);\n\n  return P12ValidationRule;\n}(ValidationRuleBaseClass);\nexport var NAME = 'P12VALIDATOR';","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/validator/rules/P12ValidatorRule.js"],"names":["forge","get","ValidationRuleBaseClass","P12ValidationRule","config","passwordField","password_field","data","key","p12b64","p12Der","util","decode64","p12Asn1","asn1","fromDer","password","pkcs12","pkcs12FromAsn1","error","valid","getErrorMessage","message","NAME"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AAEA;;;;;;;;;;;;;;AAaA,WAAaC,iBAAb;AAAA;AAAA;AAAA;;AACE,6BAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,2FAAMA,MAAN;AACA,UAAKC,aAAL,GAAqBD,MAAM,CAACE,cAA5B;AAFkB;AAGnB;;AAJH;AAAA;AAAA,6BAMWC,IANX,EAMiBC,GANjB,EAMsB;AAClB,UAAMC,MAAM,GAAGR,GAAG,CAACM,IAAD,EAAOC,GAAP,CAAlB;;AACA,UAAIC,MAAJ,EAAY;AACV,YAAI;AACF,cAAMC,MAAM,GAAGV,KAAK,CAACW,IAAN,CAAWC,QAAX,CAAoBH,MAApB,CAAf;AACA,cAAMI,OAAO,GAAGb,KAAK,CAACc,IAAN,CAAWC,OAAX,CAAmBL,MAAnB,CAAhB;;AACA,cAAI,KAAKL,aAAT,EAAwB;AACtB,gBAAMW,QAAQ,GAAGf,GAAG,CAACM,IAAD,EAAO,KAAKF,aAAZ,CAApB;AACAL,YAAAA,KAAK,CAACiB,MAAN,CAAaC,cAAb,CAA4BL,OAA5B,EAAqCG,QAArC;AACD;AACF,SAPD,CAOE,OAAOG,KAAP,EAAc;AACd,iBAAO;AACLC,YAAAA,KAAK,EAAE,KADF;AAELD,YAAAA,KAAK,EAAE,KAAKE,eAAL,CAAqB;AAAEb,cAAAA,GAAG,EAAEW,KAAK,CAACG,OAAb;AAAsBA,cAAAA,OAAO,EAAEH,KAAK,CAACG;AAArC,aAArB;AAFF,WAAP;AAID;AACF;;AACD,aAAO;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD;AAxBH;;AAAA;AAAA,EAAuClB,uBAAvC;AA2BA,OAAO,IAAMqB,IAAI,GAAG,cAAb","sourcesContent":["import forge from 'node-forge';\nimport { get } from 'lodash-es';\nimport { ValidationRuleBaseClass } from './ValidationRuleBaseClass';\n\n/**\n * This rule is used to verify that the provided Base64 string is a valid PKCS#12 file.\n * It can even check if the provided password is valid (if configured)\n *\n * The configuration for this rule must be as follows:\n * {\n *   \"type\": \"P12VALIDATOR\",                // this must be exactly 'required'\n *   \"error\": \"Your error message\"          // Optional. The custom error message.\n *                                          // This can be a string, a dictionary or a function (signature: (key, message) => {})\n *                                          // If not specified, a standard error message is returned.\n *   \"password_field\": \"passwordFieldName\"  // Optional. The name of the field containing the PKCS#12 password\n * }\n */\nexport class P12ValidationRule extends ValidationRuleBaseClass {\n  constructor(config) {\n    super(config);\n    this.passwordField = config.password_field;\n  }\n\n  validate(data, key) {\n    const p12b64 = get(data, key);\n    if (p12b64) {\n      try {\n        const p12Der = forge.util.decode64(p12b64);\n        const p12Asn1 = forge.asn1.fromDer(p12Der);\n        if (this.passwordField) {\n          const password = get(data, this.passwordField);\n          forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n        }\n      } catch (error) {\n        return {\n          valid: false,\n          error: this.getErrorMessage({ key: error.message, message: error.message })\n        };\n      }\n    }\n    return { valid: true };\n  }\n}\n\nexport const NAME = 'P12VALIDATOR';\n"]},"metadata":{},"sourceType":"module"}