{"ast":null,"code":"import _slicedToArray from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { RuleSetValidator } from './RuleSetValidator';\n/**\n * Performs the form validation based on a set of rules defined in a JSON file.\n * The structure of the JSON is:\n * {\n *   \"rulesets\": {\n *     \"ruleset_name\": {\n *       \"executionConstraints\": [\n *         {\n *           \"comment\": \"constraint configuration: look at the constraints to see what should be put here. This is an optional section.\"\n *         }\n *       ],\n *       \"fields\": {\n *          \"field_name\": {\n *            \"errors_key\": \"this is optional. It is the key used to bound the error messages into the UI\",\n *            \"validation_rules\": [\n *              {\n *                \"comment\": \"a set of rules to be executed. Look at rules to see what should be put here\"\n *              }\n *            ]\n *          }\n *        }\n *     }\n *   }\n * }\n */\n\nexport var FormValidator =\n/*#__PURE__*/\nfunction () {\n  function FormValidator() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, FormValidator);\n\n    this.ruleSets = {};\n\n    var _arr = Object.entries(config.rulesets || config);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var _ref3 = _arr[_i];\n\n      var _ref2 = _slicedToArray(_ref3, 2);\n\n      var rulesetName = _ref2[0];\n      var rulesetDefinition = _ref2[1];\n      this.ruleSets[rulesetName] = new RuleSetValidator(rulesetName, rulesetDefinition);\n    }\n  }\n  /**\n   * Validates the form\n   * @param formData for to be validated\n   * @param {Function} errorsCb(key, message) a callback used to notify the caller about validation errors. key is the\n   * key identifying the error group, while message is the message error.\n   * @returns {boolean} true if the form is valid\n   */\n\n\n  _createClass(FormValidator, [{\n    key: \"validate\",\n    value: function validate(formData, errorsCb) {\n      var hasErrors = false;\n\n      for (var rulesetName in this.ruleSets) {\n        if (this.ruleSets.hasOwnProperty(rulesetName) && this.ruleSets[rulesetName].validate(formData, errorsCb)) {\n          hasErrors = true;\n        }\n      }\n\n      return !hasErrors;\n    }\n  }, {\n    key: \"withRule\",\n    value: function withRule(ruleSetName, rule) {\n      var ruleSet = this.ruleSets[ruleSetName];\n\n      if (!ruleSet) {\n        ruleSet = new RuleSetValidator(ruleSetName);\n        this.ruleSets[ruleSetName] = ruleSet;\n      }\n\n      ruleSet.addRule(rule);\n      return this;\n    }\n  }]);\n\n  return FormValidator;\n}();","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/mobileservices/validator/FormValidator.js"],"names":["RuleSetValidator","FormValidator","config","ruleSets","Object","entries","rulesets","rulesetName","rulesetDefinition","formData","errorsCb","hasErrors","hasOwnProperty","validate","ruleSetName","rule","ruleSet","addRule"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,oBAAjC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,WAAaC,aAAb;AAAA;AAAA;AACE,2BAAyB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AACvB,SAAKC,QAAL,GAAgB,EAAhB;;AADuB,eAEwBC,MAAM,CAACC,OAAP,CAAeH,MAAM,CAACI,QAAP,IAAmBJ,MAAlC,CAFxB;;AAEvB,6CAA0F;AAAA;;AAAA;;AAAA,UAA9EK,WAA8E;AAAA,UAAjEC,iBAAiE;AACxF,WAAKL,QAAL,CAAcI,WAAd,IAA6B,IAAIP,gBAAJ,CAAqBO,WAArB,EAAkCC,iBAAlC,CAA7B;AACD;AACF;AAED;;;;;;;;;AARF;AAAA;AAAA,6BAeWC,QAfX,EAeqBC,QAfrB,EAe+B;AAC3B,UAAIC,SAAS,GAAG,KAAhB;;AAEA,WAAK,IAAMJ,WAAX,IAA0B,KAAKJ,QAA/B,EAAyC;AACvC,YAAI,KAAKA,QAAL,CAAcS,cAAd,CAA6BL,WAA7B,KAA6C,KAAKJ,QAAL,CAAcI,WAAd,EAA2BM,QAA3B,CAAoCJ,QAApC,EAA8CC,QAA9C,CAAjD,EAA0G;AACxGC,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF;;AACD,aAAO,CAACA,SAAR;AACD;AAxBH;AAAA;AAAA,6BA0BWG,WA1BX,EA0BwBC,IA1BxB,EA0B8B;AAC1B,UAAIC,OAAO,GAAG,KAAKb,QAAL,CAAcW,WAAd,CAAd;;AACA,UAAI,CAACE,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAG,IAAIhB,gBAAJ,CAAqBc,WAArB,CAAV;AACA,aAAKX,QAAL,CAAcW,WAAd,IAA6BE,OAA7B;AACD;;AACDA,MAAAA,OAAO,CAACC,OAAR,CAAgBF,IAAhB;AACA,aAAO,IAAP;AACD;AAlCH;;AAAA;AAAA","sourcesContent":["import { RuleSetValidator } from './RuleSetValidator';\n\n/**\n * Performs the form validation based on a set of rules defined in a JSON file.\n * The structure of the JSON is:\n * {\n *   \"rulesets\": {\n *     \"ruleset_name\": {\n *       \"executionConstraints\": [\n *         {\n *           \"comment\": \"constraint configuration: look at the constraints to see what should be put here. This is an optional section.\"\n *         }\n *       ],\n *       \"fields\": {\n *          \"field_name\": {\n *            \"errors_key\": \"this is optional. It is the key used to bound the error messages into the UI\",\n *            \"validation_rules\": [\n *              {\n *                \"comment\": \"a set of rules to be executed. Look at rules to see what should be put here\"\n *              }\n *            ]\n *          }\n *        }\n *     }\n *   }\n * }\n */\nexport class FormValidator {\n  constructor(config = {}) {\n    this.ruleSets = {};\n    for (const [rulesetName, rulesetDefinition] of Object.entries(config.rulesets || config)) {\n      this.ruleSets[rulesetName] = new RuleSetValidator(rulesetName, rulesetDefinition);\n    }\n  }\n\n  /**\n   * Validates the form\n   * @param formData for to be validated\n   * @param {Function} errorsCb(key, message) a callback used to notify the caller about validation errors. key is the\n   * key identifying the error group, while message is the message error.\n   * @returns {boolean} true if the form is valid\n   */\n  validate(formData, errorsCb) {\n    let hasErrors = false;\n\n    for (const rulesetName in this.ruleSets) {\n      if (this.ruleSets.hasOwnProperty(rulesetName) && this.ruleSets[rulesetName].validate(formData, errorsCb)) {\n        hasErrors = true;\n      }\n    }\n    return !hasErrors;\n  }\n\n  withRule(ruleSetName, rule) {\n    let ruleSet = this.ruleSets[ruleSetName];\n    if (!ruleSet) {\n      ruleSet = new RuleSetValidator(ruleSetName);\n      this.ruleSets[ruleSetName] = ruleSet;\n    }\n    ruleSet.addRule(rule);\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}