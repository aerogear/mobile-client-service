{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { find } from 'lodash-es';\nimport { CustomResource } from './customresource';\n\nfunction hasPlatform(service, platform) {\n  return service.customResources && find(service.customResources, function (cr) {\n    return typeof cr.getPlatform === 'function' && cr.getPlatform() === platform;\n  });\n}\n\nexport var PushVariantCR =\n/*#__PURE__*/\nfunction (_CustomResource) {\n  _inherits(PushVariantCR, _CustomResource);\n\n  function PushVariantCR() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PushVariantCR);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PushVariantCR).call(this, data));\n  }\n\n  _createClass(PushVariantCR, [{\n    key: \"getPlatform\",\n    value: function getPlatform() {\n      // TODO: fix me!!\n      return this.spec.get('platform');\n    }\n  }, {\n    key: \"getConfiguration\",\n    value: function getConfiguration(serviceHost) {\n      // TODO: need to make sure the push app id is here\n      var pushAppId = this.spec.get('pushApplicationId');\n      return [{\n        type: 'string',\n        label: 'Push Application Id',\n        value: pushAppId\n      }, {\n        type: 'href',\n        label: 'UPS Admin Console URL',\n        value: serviceHost\n      }, {\n        type: 'href',\n        label: 'Push Application',\n        value: \"\".concat(serviceHost, \"/#/app/\").concat(pushAppId, \"/variants\")\n      }];\n    }\n  }], [{\n    key: \"bindForm\",\n    value: function bindForm(params) {\n      var service = params.service;\n      var hasIOS = hasPlatform(service, 'ios');\n      var hasAndroid = hasPlatform(service, 'android');\n      var defaultPlatform = 'Android';\n      var platforms = ['Android', 'iOS'];\n      var androidConfig = {\n        title: 'Android',\n        type: 'object',\n        properties: {\n          googlekey: {\n            title: 'Your Server Key for Firebase Cloud Messaging',\n            type: 'string'\n          },\n          projectNumber: {\n            title: 'Your Sender ID, needed to connecting to FCM',\n            type: 'string'\n          }\n        }\n      };\n      var iosConfig = {\n        type: 'object',\n        title: 'iOS',\n        properties: {\n          cert: {\n            title: 'iOS .p12 file (encode contents in base64 before pasting)',\n            type: 'string'\n          },\n          passphrase: {\n            title: 'The passphrase',\n            type: 'string'\n          },\n          iosIsProduction: {\n            default: false,\n            title: 'Is this a production certificate?',\n            type: 'boolean'\n          }\n        }\n      };\n      var platformConfig = androidConfig;\n\n      if (hasIOS && hasAndroid) {\n        platforms = [];\n        defaultPlatform = '';\n      } else if (hasIOS) {\n        defaultPlatform = 'Android';\n        platforms = ['Android'];\n        platformConfig = androidConfig;\n      } else if (hasAndroid) {\n        defaultPlatform = 'iOS';\n        platforms = ['iOS'];\n        platformConfig = iosConfig;\n      }\n\n      var schema = {\n        additionalProperties: false,\n        properties: {\n          CLIENT_ID: {\n            title: 'Mobile Client ID',\n            type: 'string',\n            default: params.appName\n          },\n          CLIENT_TYPE: {\n            default: defaultPlatform,\n            enum: platforms,\n            title: 'Mobile Client Type',\n            type: 'string'\n          },\n          platformConfig: platformConfig\n        },\n        type: 'object'\n      };\n      return {\n        schema: schema,\n        uiSchema: {\n          CLIENT_ID: {\n            'ui:readonly': true\n          },\n          platformConfig: {\n            // TODO: should change this to a file field and extract the content automatically\n            cert: {\n              'ui:widget': 'textarea'\n            },\n            passphrase: {\n              'ui:widget': 'password'\n            }\n          }\n        },\n        onChangeHandler: function onChangeHandler(formData, oldSchema) {\n          var s = oldSchema;\n\n          if (oldSchema.properties.platformConfig.title === 'Android' && formData.CLIENT_TYPE === 'iOS') {\n            delete s.properties.platformConfig;\n            s.properties.CLIENT_TYPE.default = 'iOS';\n            s.properties.platformConfig = iosConfig;\n          } else if (oldSchema.properties.platformConfig.title === 'iOS' && formData.CLIENT_TYPE === 'Android') {\n            delete s.properties.platformConfig;\n            s.properties.CLIENT_TYPE.default = 'Android';\n            s.properties.platformConfig = androidConfig;\n          }\n\n          return s;\n        },\n        validationRules: {\n          UPSCOMMON: {\n            comment: 'This set of rules is always executed when service is UPS. It is used to validate common fields.',\n            fields: {\n              CLIENT_ID: {\n                validation_rules: [{\n                  type: 'required'\n                }]\n              },\n              CLIENT_TYPE: {\n                validation_rules: [{\n                  type: 'required'\n                }]\n              }\n            }\n          },\n          IOS_UPS_BINDING: {\n            comment: 'This is the set of rules that will be used to validate IOS UPS Binding.',\n            executionConstraints: [{\n              comment: \"Execute this ruleset only when the field named 'CLIENT_TYPE' has value 'IOS'\",\n              type: 'FIELD_VALUE',\n              name: 'CLIENT_TYPE',\n              value: 'iOS'\n            }],\n            fields: {\n              platformConfig: {\n                cert: {\n                  comment: \"Errors relative to this field should be bound to the key 'iosIsProduction'\",\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'APNS requires a certificate.'\n                  }, {\n                    type: 'P12VALIDATOR',\n                    error: 'Invalid PKCS#12 data or bad password',\n                    password_field: 'platformConfig.passphrase'\n                  }]\n                },\n                passphrase: {\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'APNS certificate passphrase is required.'\n                  }]\n                }\n              }\n            }\n          },\n          ANDROID_UPS_BINDING: {\n            comment: 'This is the set of rules that will be used to validate Android UPS Binding.',\n            executionConstraints: [{\n              comment: \"Execute this ruleset only when the field named 'CLIENT_TYPE' has value 'Android'\",\n              type: 'FIELD_VALUE',\n              name: 'CLIENT_TYPE',\n              value: 'Android'\n            }],\n            fields: {\n              platformConfig: {\n                googlekey: {\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'FCM requires a Server Key.'\n                  }]\n                },\n                projectNumber: {\n                  validation_rules: [{\n                    type: 'required',\n                    error: 'FCM requires a Sender ID..'\n                  }]\n                }\n              }\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"newInstance\",\n    value: function newInstance(params) {\n      // TODO: implement me!\n      return {};\n    }\n  }, {\n    key: \"getDocumentationUrl\",\n    value: function getDocumentationUrl() {\n      return 'https://docs.aerogear.org/external/apb/unifiedpush.html';\n    }\n  }]);\n\n  return PushVariantCR;\n}(CustomResource);","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/models/mobileservices/pushvariantcr.js"],"names":["find","CustomResource","hasPlatform","service","platform","customResources","cr","getPlatform","PushVariantCR","data","spec","get","serviceHost","pushAppId","type","label","value","params","hasIOS","hasAndroid","defaultPlatform","platforms","androidConfig","title","properties","googlekey","projectNumber","iosConfig","cert","passphrase","iosIsProduction","default","platformConfig","schema","additionalProperties","CLIENT_ID","appName","CLIENT_TYPE","enum","uiSchema","onChangeHandler","formData","oldSchema","s","validationRules","UPSCOMMON","comment","fields","validation_rules","IOS_UPS_BINDING","executionConstraints","name","error","password_field","ANDROID_UPS_BINDING"],"mappings":"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","sourcesContent":["import { find } from 'lodash-es';\nimport { CustomResource } from './customresource';\n\nfunction hasPlatform(service, platform) {\n  return (\n    service.customResources &&\n    find(service.customResources, cr => typeof cr.getPlatform === 'function' && cr.getPlatform() === platform)\n  );\n}\n\nexport class PushVariantCR extends CustomResource {\n  constructor(data = {}) {\n    super(data);\n  }\n\n  getPlatform() {\n    // TODO: fix me!!\n    return this.spec.get('platform');\n  }\n\n  getConfiguration(serviceHost) {\n    // TODO: need to make sure the push app id is here\n    const pushAppId = this.spec.get('pushApplicationId');\n    return [\n      { type: 'string', label: 'Push Application Id', value: pushAppId },\n      { type: 'href', label: 'UPS Admin Console URL', value: serviceHost },\n      {\n        type: 'href',\n        label: 'Push Application',\n        value: `${serviceHost}/#/app/${pushAppId}/variants`\n      }\n    ];\n  }\n\n  static bindForm(params) {\n    const { service } = params;\n    const hasIOS = hasPlatform(service, 'ios');\n    const hasAndroid = hasPlatform(service, 'android');\n    let defaultPlatform = 'Android';\n    let platforms = ['Android', 'iOS'];\n    const androidConfig = {\n      title: 'Android',\n      type: 'object',\n      properties: {\n        googlekey: {\n          title: 'Your Server Key for Firebase Cloud Messaging',\n          type: 'string'\n        },\n        projectNumber: {\n          title: 'Your Sender ID, needed to connecting to FCM',\n          type: 'string'\n        }\n      }\n    };\n    const iosConfig = {\n      type: 'object',\n      title: 'iOS',\n      properties: {\n        cert: {\n          title: 'iOS .p12 file (encode contents in base64 before pasting)',\n          type: 'string'\n        },\n        passphrase: {\n          title: 'The passphrase',\n          type: 'string'\n        },\n        iosIsProduction: {\n          default: false,\n          title: 'Is this a production certificate?',\n          type: 'boolean'\n        }\n      }\n    };\n    let platformConfig = androidConfig;\n    if (hasIOS && hasAndroid) {\n      platforms = [];\n      defaultPlatform = '';\n    } else if (hasIOS) {\n      defaultPlatform = 'Android';\n      platforms = ['Android'];\n      platformConfig = androidConfig;\n    } else if (hasAndroid) {\n      defaultPlatform = 'iOS';\n      platforms = ['iOS'];\n      platformConfig = iosConfig;\n    }\n    const schema = {\n      additionalProperties: false,\n      properties: {\n        CLIENT_ID: {\n          title: 'Mobile Client ID',\n          type: 'string',\n          default: params.appName\n        },\n        CLIENT_TYPE: {\n          default: defaultPlatform,\n          enum: platforms,\n          title: 'Mobile Client Type',\n          type: 'string'\n        },\n        platformConfig\n      },\n      type: 'object'\n    };\n    return {\n      schema,\n      uiSchema: {\n        CLIENT_ID: {\n          'ui:readonly': true\n        },\n        platformConfig: {\n          // TODO: should change this to a file field and extract the content automatically\n          cert: {\n            'ui:widget': 'textarea'\n          },\n          passphrase: {\n            'ui:widget': 'password'\n          }\n        }\n      },\n      onChangeHandler(formData, oldSchema) {\n        const s = oldSchema;\n        if (oldSchema.properties.platformConfig.title === 'Android' && formData.CLIENT_TYPE === 'iOS') {\n          delete s.properties.platformConfig;\n          s.properties.CLIENT_TYPE.default = 'iOS';\n          s.properties.platformConfig = iosConfig;\n        } else if (oldSchema.properties.platformConfig.title === 'iOS' && formData.CLIENT_TYPE === 'Android') {\n          delete s.properties.platformConfig;\n          s.properties.CLIENT_TYPE.default = 'Android';\n          s.properties.platformConfig = androidConfig;\n        }\n        return s;\n      },\n      validationRules: {\n        UPSCOMMON: {\n          comment: 'This set of rules is always executed when service is UPS. It is used to validate common fields.',\n          fields: {\n            CLIENT_ID: {\n              validation_rules: [\n                {\n                  type: 'required'\n                }\n              ]\n            },\n            CLIENT_TYPE: {\n              validation_rules: [\n                {\n                  type: 'required'\n                }\n              ]\n            }\n          }\n        },\n        IOS_UPS_BINDING: {\n          comment: 'This is the set of rules that will be used to validate IOS UPS Binding.',\n          executionConstraints: [\n            {\n              comment: \"Execute this ruleset only when the field named 'CLIENT_TYPE' has value 'IOS'\",\n              type: 'FIELD_VALUE',\n              name: 'CLIENT_TYPE',\n              value: 'iOS'\n            }\n          ],\n          fields: {\n            platformConfig: {\n              cert: {\n                comment: \"Errors relative to this field should be bound to the key 'iosIsProduction'\",\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'APNS requires a certificate.'\n                  },\n                  {\n                    type: 'P12VALIDATOR',\n                    error: 'Invalid PKCS#12 data or bad password',\n                    password_field: 'platformConfig.passphrase'\n                  }\n                ]\n              },\n              passphrase: {\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'APNS certificate passphrase is required.'\n                  }\n                ]\n              }\n            }\n          }\n        },\n        ANDROID_UPS_BINDING: {\n          comment: 'This is the set of rules that will be used to validate Android UPS Binding.',\n          executionConstraints: [\n            {\n              comment: \"Execute this ruleset only when the field named 'CLIENT_TYPE' has value 'Android'\",\n              type: 'FIELD_VALUE',\n              name: 'CLIENT_TYPE',\n              value: 'Android'\n            }\n          ],\n          fields: {\n            platformConfig: {\n              googlekey: {\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'FCM requires a Server Key.'\n                  }\n                ]\n              },\n              projectNumber: {\n                validation_rules: [\n                  {\n                    type: 'required',\n                    error: 'FCM requires a Sender ID..'\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n    };\n  }\n\n  static newInstance(params) {\n    // TODO: implement me!\n    return {};\n  }\n\n  static getDocumentationUrl() {\n    return 'https://docs.aerogear.org/external/apb/unifiedpush.html';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}