{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n/**\n * WizardSubStep component for Patternfly React\n */\n\nvar WizardSubStep = function WizardSubStep(_ref) {\n  var className = _ref.className,\n      subStep = _ref.subStep,\n      title = _ref.title,\n      activeSubStep = _ref.activeSubStep,\n      props = _objectWithoutProperties(_ref, ['className', 'subStep', 'title', 'activeSubStep']);\n\n  var classes = classNames('wizard-pf-step-title-substep', {\n    active: '' + subStep === '' + activeSubStep\n  }, className);\n  return React.createElement('span', _extends({\n    className: classes\n  }, props), title);\n};\n\nWizardSubStep.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** The wizard sub step for this step */\n  subStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** The wizard sub step title */\n  title: PropTypes.string,\n\n  /** The active step */\n  activeSubStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nWizardSubStep.defaultProps = {\n  className: '',\n  subStep: '',\n  title: '',\n  activeSubStep: ''\n};\nexport default WizardSubStep;","map":null,"metadata":{},"sourceType":"module"}