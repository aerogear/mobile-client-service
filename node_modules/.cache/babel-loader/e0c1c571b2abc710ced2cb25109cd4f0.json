{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { noop, KEYS } from '../../common/helpers';\nimport TreeViewExpand from './TreeViewExpand';\nimport TreeViewIcon from './TreeViewIcon';\nimport TreeViewIndents from './TreeViewIndents';\n\nvar TreeViewNode = function (_Component) {\n  _inherits(TreeViewNode, _Component);\n\n  function TreeViewNode() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TreeViewNode);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TreeViewNode.__proto__ || Object.getPrototypeOf(TreeViewNode)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      expanded: _this.props.node.hasOwnProperty('state') && _this.props.node.state.expanded || false,\n      focused: false,\n      tabIndex: -1,\n      nodeId: _this.props.nodeId\n    }, _this.onKeyDown = function (e) {\n      var nodeId = _this.state.nodeId;\n      var _this$props = _this.props,\n          node = _this$props.node,\n          focusedNodeId = _this$props.focusedNodeId;\n      var key = e.key;\n\n      if (node.nodes && focusedNodeId === nodeId && (key === KEYS.ARROW_RIGHT || key === KEYS.ARROW_LEFT)) {\n        e.stopPropagation();\n\n        if (key === KEYS.ARROW_RIGHT) {\n          _this.setState(function () {\n            return {\n              expanded: true\n            };\n          });\n        } else {\n          _this.setState(function () {\n            return {\n              expanded: false\n            };\n          });\n        }\n      }\n\n      if (key === KEYS.SPACE || key === KEYS.ENTER) {\n        e.stopPropagation();\n\n        _this.handleSelect(e);\n      }\n    }, _this.onFocus = function (e) {\n      e.stopPropagation();\n\n      _this.props.onFocus(_this.nodeRef.current);\n\n      _this.setState(function () {\n        return {\n          focused: true\n        };\n      });\n    }, _this.onBlur = function () {\n      _this.setState(function () {\n        return {\n          focused: false\n        };\n      });\n    }, _this.handleSelect = function (e) {\n      var _this$props2 = _this.props,\n          node = _this$props2.node,\n          selectNode = _this$props2.selectNode;\n      e.stopPropagation();\n\n      if (node.selectable) {\n        _this.nodeRef.current.focus();\n\n        selectNode(node);\n      }\n    }, _this.toggleExpand = function (e) {\n      e.stopPropagation();\n\n      _this.toggleExpandedState();\n    }, _this.toggleExpandedState = function () {\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    }, _this.nodeRef = React.createRef(), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(TreeViewNode, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          node = _props.node,\n          level = _props.level,\n          visible = _props.visible,\n          selectNode = _props.selectNode,\n          index = _props.index,\n          onFocus = _props.onFocus,\n          focusedNodeId = _props.focusedNodeId,\n          setSize = _props.setSize,\n          expandSiblings = _props.expandSiblings,\n          clearExpandSiblings = _props.clearExpandSiblings;\n      var _state = this.state,\n          expanded = _state.expanded,\n          focused = _state.focused,\n          tabIndex = _state.tabIndex,\n          nodeId = _state.nodeId;\n      var treeitemClasses = classNames('list-group-item', {\n        'node-hidden': level > 1 ? !visible : false,\n        'node-selected': node.selected\n      });\n      var treeitemRowClasses = classNames('treeitem-row', {\n        focus: focused\n      });\n      return React.createElement('li', {\n        className: treeitemClasses,\n        onClick: this.handleSelect,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        ref: this.nodeRef,\n        tabIndex: tabIndex,\n        'data-id': nodeId,\n        role: 'treeitem',\n        'aria-expanded': node.nodes && expanded,\n        'aria-level': level,\n        'aria-posinset': index + 1,\n        'aria-setsize': setSize\n      }, React.createElement('span', {\n        className: treeitemRowClasses\n      }, React.createElement(TreeViewIndents, {\n        level: level\n      }), React.createElement(TreeViewExpand, {\n        nodes: node.nodes,\n        expanded: expanded,\n        toggleExpand: this.toggleExpand\n      }), React.createElement(TreeViewIcon, {\n        icon: node.icon\n      }), node.text), node.nodes && React.createElement('ul', {\n        className: 'list-group',\n        role: 'group'\n      }, node.nodes.map(function (childNode, idx) {\n        return React.createElement(TreeViewNode, {\n          node: childNode,\n          key: idx,\n          index: idx,\n          level: level + 1,\n          visible: expanded,\n          selectNode: selectNode,\n          onFocus: onFocus,\n          focusedNodeId: focusedNodeId,\n          setSize: node.nodes.length,\n          expandSiblings: expandSiblings,\n          clearExpandSiblings: clearExpandSiblings,\n          nodeId: nodeId + '-' + idx\n        });\n      })));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      // Collapse the current node if any of its parents is collapsed. This should\n      // only fire for nodes that are level 2 or greater\n      if (!nextProps.visible && nextProps.level > 1) {\n        return {\n          expanded: false\n        };\n      } // Roving tab index\n      // When a treeview is first rendered and not interacted with, the first\n      // node should have a tabindex of 0, while the rest of the nodes have a\n      // tabindex of -1. Subsequently, the tabindex \"roves\" to whatever node has\n      // gained focus\n\n\n      var tabIndex = nextProps.focusedNodeId === prevState.nodeId || !nextProps.focusedNodeId && prevState.nodeId === '0' ? 0 : -1;\n\n      if (tabIndex !== prevState.tabIndex) {\n        return {\n          tabIndex: tabIndex\n        };\n      } // * keyboard action\n\n\n      if (nextProps.expandSiblings) {\n        var siblingsLevel = nextProps.expandSiblings.split('-').length;\n\n        if (parseInt(siblingsLevel, 10) === nextProps.level) {\n          nextProps.clearExpandSiblings();\n          return {\n            expanded: true\n          };\n        }\n      }\n\n      return null;\n    } // A node can be set to be expanded by default\n\n  }]);\n\n  return TreeViewNode;\n}(Component);\n\nTreeViewNode.propTypes = {\n  node: PropTypes.object,\n  level: PropTypes.number.isRequired,\n  visible: PropTypes.bool,\n  selectNode: PropTypes.func,\n  index: PropTypes.number.isRequired,\n  onFocus: PropTypes.func,\n  focusedNodeId: PropTypes.string.isRequired,\n  setSize: PropTypes.number.isRequired,\n  expandSiblings: PropTypes.string,\n  clearExpandSiblings: PropTypes.func,\n  nodeId: PropTypes.string\n};\nTreeViewNode.defaultProps = {\n  node: {},\n  visible: false,\n  selectNode: noop,\n  onFocus: noop,\n  expandSiblings: '',\n  clearExpandSiblings: noop,\n  nodeId: ''\n};\nexport default TreeViewNode;","map":null,"metadata":{},"sourceType":"module"}