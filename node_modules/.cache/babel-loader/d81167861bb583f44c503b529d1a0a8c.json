{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel } from '../Form';\nimport { noop } from '../../common/helpers';\n/**\n * TableCheckbox component for Patternfly React\n */\n\nvar TableCheckbox = function TableCheckbox(_ref) {\n  var id = _ref.id,\n      label = _ref.label,\n      checked = _ref.checked,\n      onChange = _ref.onChange,\n      props = _objectWithoutProperties(_ref, ['id', 'label', 'checked', 'onChange']);\n\n  return React.createElement(React.Fragment, null, React.createElement(ControlLabel, {\n    srOnly: true,\n    htmlFor: id\n  }, label), React.createElement('input', _extends({\n    type: 'checkbox',\n    id: id,\n    checked: checked,\n    onChange: onChange\n  }, props)));\n};\n\nTableCheckbox.propTypes = {\n  /** checkbox id */\n  id: PropTypes.string,\n\n  /** checkbox label */\n  label: PropTypes.string,\n\n  /** checkbox is checked */\n  checked: PropTypes.bool,\n\n  /** onChange callback */\n  onChange: PropTypes.func\n};\nTableCheckbox.defaultProps = {\n  id: '',\n  label: '',\n  checked: false,\n  onChange: noop\n};\nexport default TableCheckbox;","map":null,"metadata":{},"sourceType":"module"}