{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotificationDrawer } from '../NotificationDrawer/index';\nimport { StatefulNotificationDrawerWrapper } from './index';\n\nvar StatefulToggleNotificationDrawerWrapper = function (_React$Component) {\n  _inherits(StatefulToggleNotificationDrawerWrapper, _React$Component);\n\n  function StatefulToggleNotificationDrawerWrapper(props) {\n    _classCallCheck(this, StatefulToggleNotificationDrawerWrapper);\n\n    var _this = _possibleConstructorReturn(this, (StatefulToggleNotificationDrawerWrapper.__proto__ || Object.getPrototypeOf(StatefulToggleNotificationDrawerWrapper)).call(this, props));\n\n    _this.toggleDrawer = function () {\n      _this.setState(function (prevState) {\n        return {\n          isDrawerOpen: !prevState.isDrawerOpen\n        };\n      });\n    };\n\n    _this.updateUnreadCount = function (bool) {\n      if (bool) _this.setState({\n        hasUnreadMessages: true\n      });else _this.setState({\n        hasUnreadMessages: false\n      });\n    };\n\n    _this.state = {\n      panels: props.panels,\n      isDrawerOpen: props.isDrawerOpen,\n      hasUnreadMessages: props.hasUnreadMessages\n    };\n    return _this;\n  }\n\n  _createClass(StatefulToggleNotificationDrawerWrapper, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement('ul', {\n        className: 'nav navbar-nav navbar-right navbar-iconic'\n      }, React.createElement(NotificationDrawer.Toggle, {\n        hasUnreadMessages: this.state.hasUnreadMessages,\n        onClick: this.toggleDrawer\n      }), this.state.isDrawerOpen && React.createElement(StatefulNotificationDrawerWrapper, {\n        panels: this.state.panels,\n        maxPanelHeight: this.props.maxPanelHeight,\n        isDrawerOpen: true,\n        isExpandable: this.props.isExpandable,\n        hasUnreadMessages: true,\n        updateUnreadCount: this.updateUnreadCount,\n        toggleDrawer: this.toggleDrawer\n      }));\n    }\n  }]);\n\n  return StatefulToggleNotificationDrawerWrapper;\n}(React.Component);\n\nStatefulToggleNotificationDrawerWrapper.propTypes = {\n  /** Notification Panels Array */\n  panels: PropTypes.array,\n\n  /** Is Drawer Open Bool */\n  isDrawerOpen: PropTypes.bool,\n\n  /** has Unread Messages Bool */\n  hasUnreadMessages: PropTypes.bool,\n\n  /** is Drawer Expandable */\n  isExpandable: PropTypes.bool,\n\n  /** Max Panel Height */\n  maxPanelHeight: PropTypes.string\n};\nStatefulToggleNotificationDrawerWrapper.defaultProps = {\n  panels: null,\n  isDrawerOpen: false,\n  hasUnreadMessages: false,\n  isExpandable: true,\n  maxPanelHeight: null\n};\nexport default StatefulToggleNotificationDrawerWrapper;","map":null,"metadata":{},"sourceType":"module"}