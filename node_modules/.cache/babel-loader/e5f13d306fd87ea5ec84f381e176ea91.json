{"ast":null,"code":"var _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/build/create_build_config/AndroidCredentialsSection.js\";\nimport React from 'react';\nimport { FormGroup, FormControl, HelpBlock, ControlLabel } from 'patternfly-react';\nimport { get as _get } from 'lodash-es';\nimport { KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE, KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD, KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME, KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS, PATH_CR_BUILD_ANDROID_CREDENTIALS, ofValidation } from '../Constants';\nimport UploadControl from '../../common/UploadControl';\nimport { createBuildConfigConnect } from './ReduxCommon';\nimport { androidCredentialsValidation } from './Validations';\n\nvar AndroidCredentialsSection = function AndroidCredentialsSection(_ref) {\n  var createBuildConfigState = _ref.createBuildConfigState,\n      setField = _ref.setField,\n      setUiState = _ref.setUiState;\n\n  var _get2 = _get(createBuildConfigState, PATH_CR_BUILD_ANDROID_CREDENTIALS, {}),\n      name = _get2[KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME],\n      keystoreAlias = _get2[KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS],\n      password = _get2[KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD];\n\n  var _get3 = _get(createBuildConfigState, ofValidation(PATH_CR_BUILD_ANDROID_CREDENTIALS), {}),\n      nameValidation = _get3[KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME],\n      keystoreValidation = _get3[KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE],\n      keystoreAliasValidation = _get3[KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS],\n      passwordValidation = _get3[KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    validationState: nameValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Name\"), React.createElement(FormControl, {\n    type: \"text\",\n    onChange: function onChange(e) {\n      return setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME, e.target.value);\n    },\n    value: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(HelpBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"A name for the credentials.\")), React.createElement(FormGroup, {\n    validationState: keystoreValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Android Keystore\"), React.createElement(UploadControl, {\n    onTextLoaded: function onTextLoaded(text) {\n      return setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE, Buffer.from(text).toString('base64'));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(HelpBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Password protected PKCS12 file containing a key protected by the same password.\")), React.createElement(FormGroup, {\n    validationState: passwordValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Android Keystore Password\"), React.createElement(FormControl, {\n    type: \"password\",\n    onChange: function onChange(e) {\n      return setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD, e.target.value);\n    },\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(HelpBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Password for the PKCS12 archive and key.\")), React.createElement(FormGroup, {\n    validationState: keystoreAliasValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Keystore Alias\"), React.createElement(FormControl, {\n    type: \"input\",\n    onChange: function onChange(e) {\n      return setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS, e.target.value);\n    },\n    value: keystoreAlias,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(HelpBlock, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"The entry name of the private key/certificate chain you want to use to sign your APK(s). This entry must exist in the key store uploaded. If your key store contains only one key entry, which is the most common case, you can leave this field blank.\")));\n};\n\nexport default createBuildConfigConnect(PATH_CR_BUILD_ANDROID_CREDENTIALS, androidCredentialsValidation, AndroidCredentialsSection);","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/build/create_build_config/AndroidCredentialsSection.js"],"names":["React","FormGroup","FormControl","HelpBlock","ControlLabel","get","_get","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD","KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS","PATH_CR_BUILD_ANDROID_CREDENTIALS","ofValidation","UploadControl","createBuildConfigConnect","androidCredentialsValidation","AndroidCredentialsSection","createBuildConfigState","setField","setUiState","name","keystoreAlias","password","nameValidation","keystoreValidation","keystoreAliasValidation","passwordValidation","e","target","value","text","Buffer","from","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormGroup, FormControl, HelpBlock, ControlLabel } from 'patternfly-react';\nimport { get as _get } from 'lodash-es';\nimport {\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS,\n  PATH_CR_BUILD_ANDROID_CREDENTIALS,\n  ofValidation\n} from '../Constants';\nimport UploadControl from '../../common/UploadControl';\nimport { createBuildConfigConnect } from './ReduxCommon';\nimport { androidCredentialsValidation } from './Validations';\n\nconst AndroidCredentialsSection = ({ createBuildConfigState, setField, setUiState }) => {\n  const {\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME]: name,\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS]: keystoreAlias,\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD]: password\n  } = _get(createBuildConfigState, PATH_CR_BUILD_ANDROID_CREDENTIALS, {});\n  const {\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME]: nameValidation,\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE]: keystoreValidation,\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS]: keystoreAliasValidation,\n    [KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD]: passwordValidation\n  } = _get(createBuildConfigState, ofValidation(PATH_CR_BUILD_ANDROID_CREDENTIALS), {});\n\n  return (\n    <div>\n      <FormGroup validationState={nameValidation}>\n        <ControlLabel className=\"required\">Name</ControlLabel>\n        <FormControl\n          type=\"text\"\n          onChange={e => setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME, e.target.value)}\n          value={name}\n        />\n        <HelpBlock>A name for the credentials.</HelpBlock>\n      </FormGroup>\n      <FormGroup validationState={keystoreValidation}>\n        <ControlLabel className=\"required\">Android Keystore</ControlLabel>\n        <UploadControl\n          onTextLoaded={text =>\n            setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE, Buffer.from(text).toString('base64'))\n          }\n        />\n        <HelpBlock>Password protected PKCS12 file containing a key protected by the same password.</HelpBlock>\n      </FormGroup>\n      <FormGroup validationState={passwordValidation}>\n        <ControlLabel className=\"required\">Android Keystore Password</ControlLabel>\n        <FormControl\n          type=\"password\"\n          onChange={e => setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD, e.target.value)}\n          value={password}\n        />\n        <HelpBlock>Password for the PKCS12 archive and key.</HelpBlock>\n      </FormGroup>\n      <FormGroup validationState={keystoreAliasValidation}>\n        <ControlLabel className=\"required\">Keystore Alias</ControlLabel>\n        <FormControl\n          type=\"input\"\n          onChange={e => setField(KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS, e.target.value)}\n          value={keystoreAlias}\n        />\n        <HelpBlock>\n          The entry name of the private key/certificate chain you want to use to sign your APK(s). This entry must exist\n          in the key store uploaded. If your key store contains only one key entry, which is the most common case, you\n          can leave this field blank.\n        </HelpBlock>\n      </FormGroup>\n    </div>\n  );\n};\nexport default createBuildConfigConnect(\n  PATH_CR_BUILD_ANDROID_CREDENTIALS,\n  androidCredentialsValidation,\n  AndroidCredentialsSection\n);\n"]},"metadata":{},"sourceType":"module"}