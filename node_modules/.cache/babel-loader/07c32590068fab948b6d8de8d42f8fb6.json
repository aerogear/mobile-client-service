{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { FormControl } from '../Form';\nimport { noop } from '../../common/helpers';\n\nvar ToolbarFind = function (_React$Component) {\n  _inherits(ToolbarFind, _React$Component);\n\n  function ToolbarFind() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ToolbarFind);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToolbarFind.__proto__ || Object.getPrototypeOf(ToolbarFind)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      dropdownShown: false,\n      currentValue: ''\n    }, _this.onValueKeyPress = function (keyEvent) {\n      var onEnter = _this.props.onEnter;\n      var currentValue = _this.state.currentValue;\n\n      if (keyEvent.key === 'Enter' && onEnter) {\n        onEnter(currentValue);\n      }\n    }, _this.handleFindNext = function () {\n      var currentValue = _this.state.currentValue;\n      var onFindNext = _this.props.onFindNext;\n\n      if (onFindNext) {\n        onFindNext(currentValue);\n      }\n    }, _this.handleFindPrevious = function () {\n      var currentValue = _this.state.currentValue;\n      var onFindPrevious = _this.props.onFindPrevious;\n\n      if (onFindPrevious) {\n        onFindPrevious(currentValue);\n      }\n    }, _this.handleValueChange = function (event) {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        currentValue: event.target.value\n      });\n\n      if (onChange) {\n        onChange(event.target.value);\n      }\n    }, _this.hideDropdown = function () {\n      _this.setState({\n        dropdownShown: false\n      });\n    }, _this.toggleDropdownShown = function () {\n      _this.setState(function (prevState) {\n        return {\n          dropdownShown: !prevState.dropdownShown\n        };\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ToolbarFind, [{\n    key: 'renderCounts',\n    value: function renderCounts() {\n      var currentValue = this.state.currentValue;\n      var _props = this.props,\n          currentIndex = _props.currentIndex,\n          totalCount = _props.totalCount;\n\n      if (currentValue && currentValue !== '') {\n        return [React.createElement('span', {\n          className: 'find-pf-nums',\n          key: 'findCountText'\n        }, currentIndex || 0, ' of ', totalCount), React.createElement(Button, {\n          bsStyle: 'link',\n          key: 'findPrevious',\n          onClick: this.handleFindPrevious\n        }, React.createElement(Icon, {\n          type: 'fa',\n          name: 'angle-up'\n        })), React.createElement(Button, {\n          bsStyle: 'link',\n          key: 'findNext',\n          onClick: this.handleFindNext\n        }, React.createElement(Icon, {\n          type: 'fa',\n          name: 'angle-down'\n        }))];\n      }\n\n      return null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          dropdownShown = _state.dropdownShown,\n          currentValue = _state.currentValue;\n      var _props2 = this.props,\n          className = _props2.className,\n          placeholder = _props2.placeholder;\n      var classes = classNames('form-group toolbar-pf-find', className);\n      var dropdownClasses = classNames('find-pf-dropdown-container', {\n        show: dropdownShown\n      });\n      return React.createElement('div', {\n        className: classes\n      }, React.createElement(Button, {\n        bsStyle: 'link',\n        className: 'btn-find',\n        onClick: this.toggleDropdownShown\n      }, React.createElement(Icon, {\n        type: 'fa',\n        name: 'search'\n      })), React.createElement('div', {\n        className: dropdownClasses\n      }, React.createElement(FormControl, {\n        type: 'text',\n        id: 'find',\n        value: currentValue,\n        placeholder: placeholder,\n        onKeyPress: function onKeyPress(e) {\n          return _this2.onValueKeyPress(e);\n        },\n        onChange: this.handleValueChange\n      }), React.createElement('div', {\n        className: 'find-pf-buttons'\n      }, this.renderCounts(), React.createElement(Button, {\n        bsStyle: 'link',\n        className: 'btn-find-close',\n        onClick: this.hideDropdown\n      }, React.createElement(Icon, {\n        type: 'pf',\n        name: 'close'\n      })))));\n    }\n  }]);\n\n  return ToolbarFind;\n}(React.Component);\n\nToolbarFind.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** index of current item */\n  currentIndex: PropTypes.number,\n\n  /** total number of items */\n  totalCount: PropTypes.number.isRequired,\n\n  /** Placeholder text when empty */\n  placeholder: PropTypes.string,\n\n  /** Callback function when user hits the enter key */\n  onEnter: PropTypes.func,\n\n  /** Callback function when the find value changes */\n  onChange: PropTypes.func,\n\n  /** Callback function when the find next is selected */\n  onFindNext: PropTypes.func,\n\n  /** Callback function when the find previous is selected */\n  onFindPrevious: PropTypes.func\n};\nToolbarFind.defaultProps = {\n  className: '',\n  currentIndex: 0,\n  placeholder: '',\n  onEnter: noop,\n  onChange: noop,\n  onFindNext: noop,\n  onFindPrevious: noop\n};\nexport default ToolbarFind;","map":null,"metadata":{},"sourceType":"module"}