{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport LoginCard from '../LoginCardComponents/LoginCard';\nimport LoginCardHeader from '../LoginCardComponents/LoginCardHeader';\nimport LoginPageContainer from './LoginPageContainer';\n\nvar LoginPageWithTranslation = function (_React$Component) {\n  _inherits(LoginPageWithTranslation, _React$Component);\n\n  function LoginPageWithTranslation(props) {\n    _classCallCheck(this, LoginPageWithTranslation);\n\n    var _this = _possibleConstructorReturn(this, (LoginPageWithTranslation.__proto__ || Object.getPrototypeOf(LoginPageWithTranslation)).call(this, props));\n\n    _this.onLanguageChange = function (e) {\n      var newLanguage = e.target.attributes.value.value;\n\n      if (!newLanguage || _this.state.language === newLanguage) {\n        return;\n      }\n\n      _this.switchToLanguage(newLanguage);\n    };\n\n    _this.onPasswordChange = function (e) {\n      var card = _this.props.card;\n      card.form.passwordField.onChange && card.form.passwordField.onChange(e);\n\n      _this.setState({\n        passwordValue: e.target.value\n      });\n    };\n\n    _this.onUsernameChange = function (e) {\n      var card = _this.props.card;\n      card.form.usernameField.onChange && card.form.usernameField.onChange(e);\n\n      _this.setState({\n        usernameValue: e.target.value\n      });\n    };\n\n    _this.getDefaultPropsToPass = function () {\n      var card = _this.props.card;\n      return {\n        card: _extends({}, card, {\n          onLanguageChange: function onLanguageChange(e) {\n            return _this.onLanguageChange(e);\n          },\n          form: _extends({}, card.form, {\n            usernameField: _extends({}, card.form.usernameField, {\n              value: _this.state.usernameValue,\n              onChange: function onChange(e) {\n                return _this.onUsernameChange(e);\n              }\n            }),\n            passwordField: _extends({}, card.form.passwordField, {\n              value: _this.state.passwordValue,\n              onChange: function onChange(e) {\n                return _this.onPasswordChange(e);\n              }\n            })\n          })\n        })\n      };\n    };\n\n    _this.switchToLanguage = function (language) {\n      var _this$props = _this.props,\n          container = _this$props.container,\n          card = _this$props.card,\n          header = _this$props.header;\n      var languageFile = container.translations[language];\n\n      var translatedProps = _extends({}, _this.props, {\n        container: _extends({}, container, {\n          alert: _extends({}, header.alert, {\n            message: languageFile.header.alert\n          })\n        }),\n        header: _extends({}, header, {\n          logoTitle: languageFile.header.logo,\n          caption: languageFile.header.caption\n        }),\n        footerLinks: languageFile.footerLinks,\n        card: _extends({}, card, {\n          title: languageFile.card.header.title,\n          selectedLanguage: languageFile.card.header.selectedLanguage,\n          availableLanguages: languageFile.card.header.availableLanguages,\n          onLanguageChange: function onLanguageChange(e) {\n            return _this.onLanguageChange(e);\n          },\n          signUp: {\n            label: languageFile.card.signUp.label,\n            link: _extends({}, card.signUp.link, {\n              children: languageFile.card.signUp.link.label\n            })\n          },\n          form: _extends({}, card.form, {\n            submitError: languageFile.card.form.error,\n            usernameField: _extends({}, card.form.usernameField, {\n              onChange: function onChange(e) {\n                return _this.onUsernameChange(e);\n              },\n              value: _this.state.usernameValue,\n              placeholder: languageFile.card.usernameField.placeholder,\n              errors: languageFile.card.usernameField.errors\n            }),\n            passwordField: _extends({}, card.form.passwordField, {\n              onChange: function onChange(e) {\n                return _this.onPasswordChange(e);\n              },\n              value: _this.state.passwordValue,\n              placeholder: languageFile.card.passwordField.placeholder,\n              errors: languageFile.card.passwordField.errors,\n              warnings: languageFile.card.passwordField.warnings\n            }),\n            submitText: languageFile.card.form.submitText,\n            rememberMe: _extends({}, card.rememberMe, {\n              label: languageFile.card.rememberMe\n            }),\n            forgotPassword: _extends({}, card.forgotPassword, {\n              label: languageFile.card.forgotPassword\n            })\n          })\n        })\n      });\n\n      _this.setState({\n        translatedProps: translatedProps,\n        language: language\n      });\n    };\n\n    var _props$card = props.card,\n        selectedLanguage = _props$card.selectedLanguage,\n        availableLanguages = _props$card.availableLanguages;\n    _this.state = {\n      language: selectedLanguage && selectedLanguage.value || availableLanguages && availableLanguages[0] && availableLanguages[0].value,\n      passwordValue: '',\n      usernameValue: '',\n      translatedProps: {}\n    };\n    return _this;\n  }\n\n  _createClass(LoginPageWithTranslation, [{\n    key: 'render',\n    value: function render() {\n      var newProps = _extends({}, this.props, this.getDefaultPropsToPass(), this.state.translatedProps);\n\n      return React.cloneElement(this.props.children, newProps);\n    }\n  }]);\n\n  return LoginPageWithTranslation;\n}(React.Component);\n\nLoginPageWithTranslation.propTypes = {\n  card: PropTypes.shape(_extends({}, LoginCard.LanguagePicker.propTypes, LoginCard.Form.propTypes, LoginCard.SignUp.propTypes, LoginCard.RememberMe.propTypes, LoginCard.ForgotPassword.propTypes)),\n  header: PropTypes.shape(_extends({}, LoginCardHeader.propTypes)),\n  container: PropTypes.shape(_extends({}, LoginPageContainer.propTypes)),\n  children: PropTypes.node.isRequired\n};\nLoginPageWithTranslation.defaultProps = {\n  card: _extends({}, LoginCard.LanguagePicker.defaultProps, LoginCard.Form.defaultProps, LoginCard.SignUp.defaultProps, LoginCard.RememberMe.defaultProps, LoginCard.ForgotPassword.defaultProps),\n  header: _extends({}, LoginCardHeader.defaultProps),\n  container: _extends({}, LoginPageContainer.defaultProps)\n};\nexport default LoginPageWithTranslation;","map":null,"metadata":{},"sourceType":"module"}