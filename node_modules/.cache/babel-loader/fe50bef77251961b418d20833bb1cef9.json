{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/common/UploadControl.js\";\nimport React, { Component } from 'react';\nimport { FormControl } from 'patternfly-react';\n\nvar UploadControl =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UploadControl, _Component);\n\n  function UploadControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UploadControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UploadControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.localUpload = function (e) {\n      var files = e.target.files;\n\n      if (!files.length) {\n        return;\n      }\n\n      var file = files[0];\n      var start = 0;\n      var stop = file.size;\n      var reader = new FileReader();\n\n      var component = _assertThisInitialized(_assertThisInitialized(_this)); // If we use onloadend, we need to check the readyState.\n\n\n      reader.onload = function (evt) {\n        if (evt.target.readyState === FileReader.DONE) {\n          component.props.onTextLoaded && component.props.onTextLoaded(evt.target.result);\n        }\n      };\n\n      var blob = file.slice(start, stop);\n      reader.readAsText(blob);\n    };\n\n    _this.render = function () {\n      return React.createElement(FormControl, {\n        type: \"file\",\n        onChange: _this.localUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      });\n    };\n\n    return _this;\n  }\n\n  return UploadControl;\n}(Component);\n\nexport default UploadControl;","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/common/UploadControl.js"],"names":["React","Component","FormControl","UploadControl","localUpload","e","files","target","length","file","start","stop","size","reader","FileReader","component","onload","evt","readyState","DONE","props","onTextLoaded","result","blob","slice","readAsText","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;IAEMC,a;;;;;;;;;;;;;;;;;;UACJC,W,GAAc,UAAAC,CAAC,EAAI;AAAA,UACTC,KADS,GACCD,CAAC,CAACE,MADH,CACTD,KADS;;AAEjB,UAAI,CAACA,KAAK,CAACE,MAAX,EAAmB;AACjB;AACD;;AAED,UAAMC,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMI,KAAK,GAAG,CAAd;AACA,UAAMC,IAAI,GAAGF,IAAI,CAACG,IAAlB;AAEA,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACA,UAAMC,SAAS,wDAAf,CAXiB,CAYjB;;;AACAF,MAAAA,MAAM,CAACG,MAAP,GAAgB,UAAAC,GAAG,EAAI;AACrB,YAAIA,GAAG,CAACV,MAAJ,CAAWW,UAAX,KAA0BJ,UAAU,CAACK,IAAzC,EAA+C;AAC7CJ,UAAAA,SAAS,CAACK,KAAV,CAAgBC,YAAhB,IAAgCN,SAAS,CAACK,KAAV,CAAgBC,YAAhB,CAA6BJ,GAAG,CAACV,MAAJ,CAAWe,MAAxC,CAAhC;AACD;AACF,OAJD;;AAMA,UAAMC,IAAI,GAAGd,IAAI,CAACe,KAAL,CAAWd,KAAX,EAAkBC,IAAlB,CAAb;AACAE,MAAAA,MAAM,CAACY,UAAP,CAAkBF,IAAlB;AACD,K;;UAEDG,M,GAAS;AAAA,aAAM,oBAAC,WAAD;AAAa,QAAA,IAAI,EAAC,MAAlB;AAAyB,QAAA,QAAQ,EAAE,MAAKtB,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN;AAAA,K;;;;;;EAxBiBH,S;;AA2B5B,eAAeE,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { FormControl } from 'patternfly-react';\n\nclass UploadControl extends Component {\n  localUpload = e => {\n    const { files } = e.target;\n    if (!files.length) {\n      return;\n    }\n\n    const file = files[0];\n    const start = 0;\n    const stop = file.size;\n\n    const reader = new FileReader();\n    const component = this;\n    // If we use onloadend, we need to check the readyState.\n    reader.onload = evt => {\n      if (evt.target.readyState === FileReader.DONE) {\n        component.props.onTextLoaded && component.props.onTextLoaded(evt.target.result);\n      }\n    };\n\n    const blob = file.slice(start, stop);\n    reader.readAsText(blob);\n  };\n\n  render = () => <FormControl type=\"file\" onChange={this.localUpload} />;\n}\n\nexport default UploadControl;\n"]},"metadata":{},"sourceType":"module"}