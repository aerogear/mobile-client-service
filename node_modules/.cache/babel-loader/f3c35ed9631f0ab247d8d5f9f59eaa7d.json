{"ast":null,"code":"var _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/configuration/ServiceSDKDocs.js\";\nimport React from 'react';\nimport './ServiceSDKDocs.css';\nimport { ServiceSDKSetup } from './ServiceSDKSetup';\nexport var ServiceSDKDocs = function ServiceSDKDocs(_ref) {\n  var framework = _ref.framework,\n      mobileApp = _ref.mobileApp;\n\n  if (mobileApp) {\n    var status = mobileApp.getStatus();\n    var _services = {\n      services: status.getServices()\n    },\n        _services$services = _services.services,\n        services = _services$services === void 0 ? [] : _services$services;\n    return services ? React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, framework.steps.map(function (docs, index) {\n      return React.createElement(ServiceSDKSetup, {\n        docs: docs,\n        key: \"docs-\".concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      });\n    }), services.map(function (_ref2, index) {\n      var type = _ref2.type;\n\n      if (framework.services[type]) {\n        return framework.services[type].steps.map(function (docs) {\n          return React.createElement(ServiceSDKSetup, {\n            key: \"sdk-setup-\".concat(index),\n            docs: docs,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 17\n            },\n            __self: this\n          });\n        });\n      }\n\n      console.error(\"Bad service type found '\".concat(type, \"'\"));\n      return null;\n    })) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/configuration/ServiceSDKDocs.js"],"names":["React","ServiceSDKSetup","ServiceSDKDocs","framework","mobileApp","status","getStatus","services","getServices","steps","map","docs","index","type","console","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAA8B;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAC1D,MAAIA,SAAJ,EAAe;AACb,QAAMC,MAAM,GAAGD,SAAS,CAACE,SAAV,EAAf;AADa,oBAEa;AAAEC,MAAAA,QAAQ,EAAEF,MAAM,CAACG,WAAP;AAAZ,KAFb;AAAA,uCAELD,QAFK;AAAA,QAELA,QAFK,mCAEM,EAFN;AAGb,WAAOA,QAAQ,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,SAAS,CAACM,KAAV,CAAgBC,GAAhB,CAAoB,UAACC,IAAD,EAAOC,KAAP;AAAA,aACnB,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,IAAvB;AAA6B,QAAA,GAAG,iBAAUC,KAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADmB;AAAA,KAApB,CADH,EAIGL,QAAQ,CAACG,GAAT,CAAa,iBAAWE,KAAX,EAAqB;AAAA,UAAlBC,IAAkB,SAAlBA,IAAkB;;AACjC,UAAIV,SAAS,CAACI,QAAV,CAAmBM,IAAnB,CAAJ,EAA8B;AAC5B,eAAOV,SAAS,CAACI,QAAV,CAAmBM,IAAnB,EAAyBJ,KAAzB,CAA+BC,GAA/B,CAAmC,UAAAC,IAAI;AAAA,iBAC5C,oBAAC,eAAD;AAAiB,YAAA,GAAG,sBAAeC,KAAf,CAApB;AAA4C,YAAA,IAAI,EAAED,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAD4C;AAAA,SAAvC,CAAP;AAGD;;AACDG,MAAAA,OAAO,CAACC,KAAR,mCAAyCF,IAAzC;AACA,aAAO,IAAP;AACD,KARA,CAJH,CADa,GAgBb,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBF;AAkBD;;AACD,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAxBM","sourcesContent":["import React from 'react';\nimport './ServiceSDKDocs.css';\nimport { ServiceSDKSetup } from './ServiceSDKSetup';\n\nexport const ServiceSDKDocs = ({ framework, mobileApp }) => {\n  if (mobileApp) {\n    const status = mobileApp.getStatus();\n    const { services = [] } = { services: status.getServices() };\n    return services ? (\n      <ol>\n        {framework.steps.map((docs, index) => (\n          <ServiceSDKSetup docs={docs} key={`docs-${index}`} />\n        ))}\n        {services.map(({ type }, index) => {\n          if (framework.services[type]) {\n            return framework.services[type].steps.map(docs => (\n              <ServiceSDKSetup key={`sdk-setup-${index}`} docs={docs} />\n            ));\n          }\n          console.error(`Bad service type found '${type}'`);\n          return null;\n        })}\n      </ol>\n    ) : (\n      <React.Fragment />\n    );\n  }\n  return <React.Fragment />;\n};\n"]},"metadata":{},"sourceType":"module"}