{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DualListItemTooltip from './DualListItemTooltip';\nimport { TypeAheadSelect } from '../../../components/TypeAheadSelect';\nimport { noop } from '../../../common/helpers';\nvar Highlighter = TypeAheadSelect.Highlighter;\n\nvar DualListItem = function DualListItem(_ref) {\n  var checked = _ref.checked,\n      className = _ref.className,\n      position = _ref.position,\n      parentPosition = _ref.parentPosition,\n      value = _ref.value,\n      label = _ref.label,\n      filterTerm = _ref.filterTerm,\n      onChange = _ref.onChange,\n      side = _ref.side,\n      hidden = _ref.hidden,\n      disabled = _ref.disabled,\n      tooltipID = _ref.tooltipID,\n      tooltipText = _ref.tooltipText;\n  var cx = classNames('dual-list-pf-item', className, checked && 'selected', disabled && 'disabled');\n  var itemLabel = React.createElement('span', {\n    className: 'dual-list-pf-item-label'\n  }, React.createElement(Highlighter, {\n    search: filterTerm\n  }, label));\n  var item = React.createElement('label', {\n    className: cx,\n    hidden: hidden\n  }, React.createElement('input', {\n    type: 'checkbox',\n    'data-position': position,\n    'data-parent-position': parentPosition,\n    onChange: onChange,\n    checked: checked || false,\n    value: value,\n    'data-side': side,\n    disabled: disabled\n  }), itemLabel);\n\n  var getTooltipID = function getTooltipID() {\n    var uniqueTooltipID = 'dual-list-item-tooltip-' + side;\n\n    if (parentPosition) {\n      uniqueTooltipID += '-' + parentPosition;\n    }\n\n    uniqueTooltipID += '-' + position;\n    return uniqueTooltipID;\n  };\n\n  return tooltipText ? React.createElement(DualListItemTooltip, {\n    text: tooltipText,\n    id: tooltipID || getTooltipID()\n  }, item) : item;\n};\n\nDualListItem.propTypes = {\n  /** Is the element chacked */\n  checked: PropTypes.bool,\n\n  /** Additional html class */\n  className: PropTypes.string,\n\n  /** The element position, used by the onChange function. */\n  position: PropTypes.number,\n\n  /** The element parent position, used by the onChange function. */\n  parentPosition: PropTypes.number,\n\n  /** The element value, used by the onChange function. */\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** The element label, used by the onChange function. */\n  label: PropTypes.string,\n\n  /** The term which is flitering the list. */\n  filterTerm: PropTypes.string,\n\n  /** A function that is running when the item selected state is toggled. */\n  onChange: PropTypes.func,\n\n  /** The side of the selector. */\n  side: PropTypes.string,\n\n  /** Sets the item visibillity when filtering. */\n  hidden: PropTypes.bool,\n\n  /** Disable the item to move between lists */\n  disabled: PropTypes.bool,\n\n  /** unique tooltip ID */\n  tooltipID: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** text to be shown on the tooltip */\n  tooltipText: PropTypes.string\n};\nDualListItem.defaultProps = {\n  checked: false,\n  className: null,\n  parentPosition: null,\n  position: 0,\n  value: '',\n  label: null,\n  filterTerm: null,\n  onChange: noop,\n  side: null,\n  hidden: false,\n  disabled: false,\n  tooltipID: null,\n  tooltipText: null\n};\nexport default DualListItem;","map":null,"metadata":{},"sourceType":"module"}