{"ast":null,"code":"import _toConsumableArray from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/containers/ErrorMessages.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastNotificationList, ToastNotification } from 'patternfly-react';\nimport { withRouter } from 'react-router-dom';\nimport { dismiss, dismissAll } from '../actions/errors';\nexport var ErrorMessages =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ErrorMessages, _Component);\n\n  function ErrorMessages() {\n    _classCallCheck(this, ErrorMessages);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ErrorMessages).apply(this, arguments));\n  }\n\n  _createClass(ErrorMessages, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$props = this.props,\n          history = _this$props.history,\n          dismissAllErrors = _this$props.dismissAllErrors;\n      this.unlisten = history.listen(dismissAllErrors);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unlisten();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          errors = _this$props2.errors,\n          dismissError = _this$props2.dismissError;\n      return React.createElement(ToastNotificationList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, _toConsumableArray(new Set(errors.map(function (error) {\n        return error.message;\n      }))).map(function (error, index) {\n        return React.createElement(ToastNotification, {\n          key: index,\n          onDismiss: function onDismiss() {\n            return dismissError(error);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, error));\n      }));\n    }\n  }]);\n\n  return ErrorMessages;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    errors: _toConsumableArray(state.errors.errors)\n  };\n};\n\nvar mapDispatchToProps = {\n  dismissError: dismiss,\n  dismissAllErrors: dismissAll\n};\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ErrorMessages));","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/containers/ErrorMessages.js"],"names":["React","Component","connect","ToastNotificationList","ToastNotification","withRouter","dismiss","dismissAll","ErrorMessages","props","history","dismissAllErrors","unlisten","listen","errors","dismissError","Set","map","error","message","index","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,kBAAzD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,mBAApC;AAEA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,yCACuB;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACXC,OADW,eACXA,OADW;AAAA,UACFC,gBADE,eACFA,gBADE;AAEnB,WAAKC,QAAL,GAAgBF,OAAO,CAACG,MAAR,CAAeF,gBAAf,CAAhB;AACD;AAJH;AAAA;AAAA,2CAMyB;AACrB,WAAKC,QAAL;AACD;AARH;AAAA;AAAA,6BAUW;AAAA,yBAC0B,KAAKH,KAD/B;AAAA,UACCK,MADD,gBACCA,MADD;AAAA,UACSC,YADT,gBACSA,YADT;AAEP,aACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,mBAAI,IAAIC,GAAJ,CAAQF,MAAM,CAACG,GAAP,CAAW,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,OAAV;AAAA,OAAhB,CAAR,CAAJ,EAAiDF,GAAjD,CAAqD,UAACC,KAAD,EAAQE,KAAR;AAAA,eACpD,oBAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEA,KAAxB;AAA+B,UAAA,SAAS,EAAE;AAAA,mBAAML,YAAY,CAACG,KAAD,CAAlB;AAAA,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOA,KAAP,CADF,CADoD;AAAA,OAArD,CADH,CADF;AASD;AArBH;;AAAA;AAAA,EAAmCjB,SAAnC;;AAwBA,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCR,IAAAA,MAAM,qBAAMQ,KAAK,CAACR,MAAN,CAAaA,MAAnB;AAD0B,GAAL;AAAA,CAA7B;;AAIA,IAAMS,kBAAkB,GAAG;AACzBR,EAAAA,YAAY,EAAET,OADW;AAEzBK,EAAAA,gBAAgB,EAAEJ;AAFO,CAA3B;AAKA,eAAeF,UAAU,CACvBH,OAAO,CACLmB,eADK,EAELE,kBAFK,CAAP,CAGEf,aAHF,CADuB,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ToastNotificationList, ToastNotification } from 'patternfly-react';\nimport { withRouter } from 'react-router-dom';\nimport { dismiss, dismissAll } from '../actions/errors';\n\nexport class ErrorMessages extends Component {\n  componentWillMount() {\n    const { history, dismissAllErrors } = this.props;\n    this.unlisten = history.listen(dismissAllErrors);\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  render() {\n    const { errors, dismissError } = this.props;\n    return (\n      <ToastNotificationList>\n        {[...new Set(errors.map(error => error.message))].map((error, index) => (\n          <ToastNotification key={index} onDismiss={() => dismissError(error)}>\n            <span>{error}</span>\n          </ToastNotification>\n        ))}\n      </ToastNotificationList>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: [...state.errors.errors]\n});\n\nconst mapDispatchToProps = {\n  dismissError: dismiss,\n  dismissAllErrors: dismissAll\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(ErrorMessages)\n);\n"]},"metadata":{},"sourceType":"module"}