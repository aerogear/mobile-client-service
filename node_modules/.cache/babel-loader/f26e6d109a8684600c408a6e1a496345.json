{"ast":null,"code":"var _jsxFileName = \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/configuration/ServiceSDKSetup.js\";\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from '../common/CodeBlock';\nexport var ServiceSDKSetup = function ServiceSDKSetup(_ref) {\n  var _ref$docs = _ref.docs,\n      docs = _ref$docs === void 0 ? {} : _ref$docs;\n  var introduction = docs.introduction,\n      commands = docs.commands;\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, introduction ? React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(ReactMarkdown, {\n    source: introduction,\n    renderers: {\n      code: CodeBlock\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  })) : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, commands ? commands.map(function (commandHelp, index) {\n    var simpleString = typeof commandHelp === 'string';\n    var command = simpleString ? commandHelp : \"\".concat(commandHelp[0], \"\\n\\n\").concat(commandHelp[1]);\n    return React.createElement(\"li\", {\n      key: \"cmd-\".concat(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(ReactMarkdown, {\n      source: command,\n      skipHtml: true,\n      escapeHtml: true,\n      renderers: {\n        code: CodeBlock\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }) : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/configuration/ServiceSDKSetup.js"],"names":["React","ReactMarkdown","CodeBlock","ServiceSDKSetup","docs","introduction","commands","code","map","commandHelp","index","simpleString","command"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAmB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,0BAAT,EAAS;AAAA,MACxCC,YADwC,GACbD,IADa,CACxCC,YADwC;AAAA,MAC1BC,QAD0B,GACbF,IADa,CAC1BE,QAD0B;AAEhD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,YAAY,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAEA,YAAvB;AAAqC,IAAA,SAAS,EAAE;AAAEE,MAAAA,IAAI,EAAEL;AAAR,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADW,GAKX,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,QAAQ,GACPA,QAAQ,CAACE,GAAT,CAAa,UAACC,WAAD,EAAcC,KAAd,EAAwB;AACnC,QAAMC,YAAY,GAAG,OAAOF,WAAP,KAAuB,QAA5C;AACA,QAAMG,OAAO,GAAGD,YAAY,GAAGF,WAAH,aAAoBA,WAAW,CAAC,CAAD,CAA/B,iBAAyCA,WAAW,CAAC,CAAD,CAApD,CAA5B;AACA,WACE;AAAI,MAAA,GAAG,gBAASC,KAAT,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,MAAM,EAAEE,OAAvB;AAAgC,MAAA,QAAQ,MAAxC;AAAyC,MAAA,UAAU,MAAnD;AAAoD,MAAA,SAAS,EAAE;AAAEL,QAAAA,IAAI,EAAEL;AAAR,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GARD,CADO,GAWP,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CARF,CADF;AA0BD,CA5BM","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from '../common/CodeBlock';\n\nexport const ServiceSDKSetup = ({ docs = {} }) => {\n  const { introduction, commands } = docs;\n  return (\n    <li>\n      {introduction ? (\n        <h4>\n          <ReactMarkdown source={introduction} renderers={{ code: CodeBlock }} />\n        </h4>\n      ) : (\n        <React.Fragment />\n      )}\n      <ul>\n        {commands ? (\n          commands.map((commandHelp, index) => {\n            const simpleString = typeof commandHelp === 'string';\n            const command = simpleString ? commandHelp : `${commandHelp[0]}\\n\\n${commandHelp[1]}`;\n            return (\n              <li key={`cmd-${index}`}>\n                <ReactMarkdown source={command} skipHtml escapeHtml renderers={{ code: CodeBlock }} />\n              </li>\n            );\n          })\n        ) : (\n          <React.Fragment />\n        )}\n      </ul>\n    </li>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}