{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { ConfirmButton, CancelButton } from '../InlineEdit';\nimport { noop, debounce } from '../../common/helpers';\nimport '../../common/closestPolyfill';\n\nvar TableConfirmButtonsRow = function (_React$Component) {\n  _inherits(TableConfirmButtonsRow, _React$Component);\n\n  function TableConfirmButtonsRow(props) {\n    _classCallCheck(this, TableConfirmButtonsRow);\n\n    var _this = _possibleConstructorReturn(this, (TableConfirmButtonsRow.__proto__ || Object.getPrototypeOf(TableConfirmButtonsRow)).call(this, props));\n\n    _this.saveRowDimensions = function (element) {\n      if (element) {\n        _this.element = element;\n      }\n\n      if (_this.element) {\n        _this.setState({\n          rowDimensions: _this.element.getBoundingClientRect()\n        });\n      }\n    };\n\n    _this.handleScroll = function (event) {\n      _this.saveRowDimensions();\n    };\n\n    _this.handleResize = function (event) {\n      _this.fetchClientDimensions();\n\n      _this.saveRowDimensions();\n    };\n\n    _this.state = {};\n    _this.handleScroll = debounce(_this.handleScroll, 100);\n    _this.handleResize = debounce(_this.handleResize, 100);\n    return _this;\n  }\n\n  _createClass(TableConfirmButtonsRow, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.fetchClientDimensions();\n      window.addEventListener('scroll', this.handleScroll);\n      window.addEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.handleScroll);\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: 'fetchClientDimensions',\n    value: function fetchClientDimensions() {\n      this.setState({\n        window: {\n          width: document.documentElement.clientWidth,\n          height: document.documentElement.clientHeight\n        }\n      });\n    }\n  }, {\n    key: 'renderConfirmButtons',\n    value: function renderConfirmButtons() {\n      var _this2 = this;\n\n      var divStyle = this.state.rowDimensions ? this.props.buttonsPosition(this.state.window, this.element.getBoundingClientRect()) : {};\n      var buttonsClass = 'inline-edit-buttons ' + this.props.buttonsClassName;\n      return React.createElement('div', {\n        style: divStyle,\n        className: buttonsClass,\n        key: 'confirmButtons'\n      }, React.createElement(ConfirmButton, {\n        bsStyle: 'primary',\n        key: 'confirm',\n        'aria-label': this.props.messages.confirmButtonLabel,\n        onMouseUp: function onMouseUp() {\n          return _this2.props.onConfirm();\n        }\n      }), React.createElement(CancelButton, {\n        bsStyle: 'default',\n        key: 'cancel',\n        'aria-label': this.props.messages.cancelButtonLabel,\n        onMouseUp: function onMouseUp() {\n          return _this2.props.onCancel();\n        }\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var editing = this.props.isEditing();\n      var rowClass = editing ? 'editing' : '';\n      var elements = [React.createElement('tr', {\n        ref: this.saveRowDimensions,\n        className: rowClass,\n        key: 'tableRow'\n      }, this.props.children)];\n\n      if (editing && (this.element || this.props.buttonsMountpoint)) {\n        elements.push( // mount the confirm buttons below the table\n        createPortal(this.renderConfirmButtons(), this.props.buttonsMountpoint || this.element.closest('table').parentNode));\n      }\n\n      return elements;\n    }\n  }]);\n\n  return TableConfirmButtonsRow;\n}(React.Component);\n\nTableConfirmButtonsRow.shouldComponentUpdate = true;\nTableConfirmButtonsRow.defaultProps = {\n  isEditing: noop,\n  onConfirm: noop,\n  onCancel: noop,\n  buttonsPosition: noop,\n  buttonsClassName: '',\n  children: [],\n  messages: {\n    confirmButtonLabel: 'Save',\n    cancelButtonLabel: 'Cancel'\n  },\n  buttonsMountpoint: undefined\n};\nTableConfirmButtonsRow.propTypes = {\n  /** Function that determines whether values or edit components should be rendered */\n  isEditing: PropTypes.func,\n\n  /** Confirm edit callback */\n  onConfirm: PropTypes.func,\n\n  /** Cancel edit callback */\n  onCancel: PropTypes.func,\n\n  /** Inject confirm buttons positions */\n  buttonsPosition: PropTypes.func,\n\n  /** Additional confirm buttons classes */\n  buttonsClassName: PropTypes.string,\n\n  /** Row cells */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /** Message text inputs for i18n */\n  messages: PropTypes.shape({\n    confirmButtonLabel: PropTypes.string,\n    cancelButtonLabel: PropTypes.string\n  }),\n  buttonsMountpoint: PropTypes.any\n};\nexport default TableConfirmButtonsRow;","map":null,"metadata":{},"sourceType":"module"}