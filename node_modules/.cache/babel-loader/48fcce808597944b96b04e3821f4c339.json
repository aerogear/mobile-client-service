{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { noop, hasDisplayName } from '../../common/helpers';\nimport TimedToastNotification from './TimedToastNotification';\n/**\n * ToastNotificationList Component for Patternfly React\n */\n\nvar ToastNotificationList = function (_React$Component) {\n  _inherits(ToastNotificationList, _React$Component);\n\n  function ToastNotificationList() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ToastNotificationList);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ToastNotificationList.__proto__ || Object.getPrototypeOf(ToastNotificationList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      paused: false\n    }, _this.onMouseEnter = function () {\n      _this.setState({\n        paused: true\n      });\n\n      var onMouseEnter = _this.props.onMouseEnter;\n      onMouseEnter();\n    }, _this.onMouseLeave = function () {\n      _this.setState({\n        paused: false\n      });\n\n      var onMouseLeave = _this.props.onMouseLeave;\n      onMouseLeave();\n    }, _this.onMouseOver = function () {\n      _this.setState({\n        paused: true\n      });\n\n      var onMouseOver = _this.props.onMouseOver;\n      onMouseOver();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ToastNotificationList, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps() {\n      this.setState({\n        paused: false\n      });\n    }\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren() {\n      var paused = this.state.paused;\n      return React.Children.map(this.props.children, function (child) {\n        if (hasDisplayName(child, TimedToastNotification.displayName)) {\n          /**\n           * If any of the notifications are hovered, pause\n           * all child notifications from dismissing\n           */\n          return React.cloneElement(child, {\n            paused: paused\n          });\n        }\n\n        return child;\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var className = this.props.className;\n      var classes = classNames('toast-notifications-list-pf', className);\n      return React.createElement('div', {\n        onMouseEnter: this.onMouseEnter,\n        onMouseLeave: this.onMouseLeave,\n        onMouseOver: this.onMouseOver,\n        onFocus: this.onMouseOver,\n        className: classes\n      }, this.renderChildren());\n    }\n  }]);\n\n  return ToastNotificationList;\n}(React.Component);\n\nToastNotificationList.propTypes = {\n  /** additional notification list classes */\n  className: PropTypes.string,\n\n  /** onMouseEnter callback */\n  onMouseEnter: PropTypes.func,\n\n  /** onMouseLeave callback */\n  onMouseLeave: PropTypes.func,\n\n  /** onMouseOver callback */\n  onMouseOver: PropTypes.func,\n\n  /** children nodes  */\n  children: PropTypes.node\n};\nToastNotificationList.defaultProps = {\n  className: '',\n  onMouseEnter: noop,\n  onMouseLeave: noop,\n  onMouseOver: noop,\n  children: null\n};\nexport default ToastNotificationList;","map":null,"metadata":{},"sourceType":"module"}