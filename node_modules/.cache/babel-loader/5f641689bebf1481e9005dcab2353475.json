{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nexport var filterByHiding = function filterByHiding(list, value) {\n  var filterValue = value.toLowerCase();\n  return list.map(function (item) {\n    var itemLabel = item.label.toLowerCase();\n    var included = itemLabel.includes(filterValue); // if the item label matches the filter value.\n\n    item.hidden = !included; // if it is a parent and its label doesn't match the filter value.\n\n    if (itemHasChildren(item)) {\n      if (isItemHidden(item)) {\n        var childrenIncludedAmount = 0;\n        item.children.forEach(function (childItem) {\n          var childLabel = childItem.label.toLowerCase();\n          var childIncluded = childLabel.includes(filterValue);\n          childItem.hidden = !childIncluded;\n          childrenIncludedAmount += childIncluded ? 1 : 0;\n        });\n        item.hidden = childrenIncludedAmount === 0;\n      } else {\n        item.children = makeAllItemsVisible(item.children);\n      }\n    }\n\n    return item;\n  });\n};\nexport var makeAllItemsVisible = function makeAllItemsVisible(list) {\n  return list.map(function (item) {\n    item.hidden = false;\n\n    if (itemHasChildren(item)) {\n      item.children.forEach(function (childItem) {\n        childItem.hidden = false;\n      });\n    }\n\n    return item;\n  });\n};\nexport var sortItems = function sortItems(items) {\n  var sortFactor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'label';\n  return items.sort(function (a, b) {\n    return a[sortFactor].toLowerCase() > b[sortFactor].toLowerCase() ? 1 : -1;\n  });\n};\nexport var shouldItemBeChecked = function shouldItemBeChecked(item, isMainChecked, resetAllSelected) {\n  var checked = item.checked || false;\n  var isItemEditable = !item.disabled || !item.hidden;\n\n  if (!isItemEditable) {\n    return checked;\n  }\n\n  if (resetAllSelected) {\n    checked = false;\n  } else if (isMainChecked) {\n    checked = isMainChecked;\n  }\n\n  return checked;\n};\nexport var arrangeArray = function arrangeArray(_ref) {\n  var items = _ref.items,\n      sortBy = _ref.sortBy,\n      _ref$isSortAsc = _ref.isSortAsc,\n      isSortAsc = _ref$isSortAsc === undefined ? true : _ref$isSortAsc,\n      _ref$isMainChecked = _ref.isMainChecked,\n      isMainChecked = _ref$isMainChecked === undefined ? false : _ref$isMainChecked,\n      _ref$resetAllSelected = _ref.resetAllSelected,\n      resetAllSelected = _ref$resetAllSelected === undefined ? false : _ref$resetAllSelected; // sort the items\n\n  var itemsCopy = sortItems(items, sortBy).map(function (item, index) {\n    // add position to the item and update if the main checkbox is initialy checked.\n    var modifiedItem = _extends({}, item, {\n      position: index,\n      checked: shouldItemBeChecked(item, isMainChecked, resetAllSelected)\n    });\n\n    if (itemHasChildren(item)) {\n      // sort the children array and add a position, parentPosition and update check state.\n      modifiedItem.children = sortItems(item.children, sortBy).map(function (child, childIndex) {\n        return _extends({}, child, {\n          position: childIndex,\n          parentPosition: index,\n          checked: shouldItemBeChecked(child, isMainChecked, resetAllSelected)\n        });\n      });\n    }\n\n    return modifiedItem;\n  });\n  itemsCopy = isSortAsc ? itemsCopy : reverseAllItemsOrder(itemsCopy);\n  return itemsCopy;\n};\nexport var getDefaultProps = function getDefaultProps() {\n  return {\n    items: [],\n    options: null,\n    isSortAsc: true,\n    sortBy: 'label',\n    filterTerm: '',\n    isMainChecked: false\n  };\n};\nexport var getCheckedAmount = function getCheckedAmount(items) {\n  var checkedAmount = 0;\n  items.forEach(function (item) {\n    if (isItemSelected(item)) {\n      checkedAmount += 1;\n\n      if (itemHasChildren(item)) {\n        checkedAmount += item.children.length;\n      }\n    } else if (itemHasChildren(item)) {\n      item.children.forEach(function (child) {\n        if (isItemSelected(child)) {\n          checkedAmount += 1;\n        }\n      });\n    }\n  });\n  return checkedAmount;\n};\nexport var getCounterMessage = function getCounterMessage(selected, total) {\n  return selected + ' of ' + total + ' items selected';\n};\n\nvar adjustProps = function adjustProps(_ref2) {\n  var left = _ref2.left,\n      right = _ref2.right,\n      props = _objectWithoutProperties(_ref2, ['left', 'right']);\n\n  var defaultProps = getDefaultProps();\n  var leftItems = arrangeArray(_extends({}, left));\n  var rightItems = arrangeArray(_extends({}, right));\n  return _extends({}, props, {\n    left: _extends({}, defaultProps, left, {\n      items: leftItems,\n      selectCount: getCheckedAmount(leftItems)\n    }),\n    right: _extends({}, defaultProps, right, {\n      items: rightItems,\n      selectCount: getCheckedAmount(rightItems)\n    })\n  });\n};\n\nexport { adjustProps };\nexport var isAllChildrenChecked = function isAllChildrenChecked(_ref3) {\n  var children = _ref3.children;\n  return children && children.filter(function (_ref4) {\n    var checked = _ref4.checked;\n    return checked;\n  }).length === children.length;\n};\nexport var getItemsLength = function getItemsLength(items) {\n  var length = items.length;\n\n  if (length === 0) {\n    return 0;\n  }\n\n  items.forEach(function (_ref5) {\n    var children = _ref5.children;\n\n    if (children) {\n      // add the children amount and reduce the parent.\n      length += children.length - 1;\n    }\n  });\n  return length;\n};\nexport var reverseAllItemsOrder = function reverseAllItemsOrder(items) {\n  var reversedItems = [].concat(_toConsumableArray(items)).reverse();\n  return reversedItems.map(function (item) {\n    return item.children ? _extends({}, item, {\n      children: item.children.reverse()\n    }) : item;\n  });\n};\nexport var getItem = function getItem(isSortAsc, items, position, parentPosition) {\n  // if item is a child.\n  if (parentPosition !== undefined) {\n    var parent = items[getItemPosition(items, parentPosition, isSortAsc)];\n    return parent.children[getItemPosition(parent.children, position, isSortAsc)];\n  }\n\n  return items[getItemPosition(items, position, isSortAsc)];\n};\nexport var getUpdatedSelectCount = function getUpdatedSelectCount(selectCount, checked) {\n  var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return selectCount + (checked ? amount : -1 * amount);\n};\nexport var itemHasParent = function itemHasParent(item) {\n  return item.parentPosition !== undefined;\n};\nexport var itemHasChildren = function itemHasChildren(item) {\n  return item.children !== undefined;\n};\nexport var getItemPosition = function getItemPosition(array, position, isSortAsc) {\n  return isSortAsc ? position : array.length - position - 1;\n};\nexport var toggleAllItems = function toggleAllItems(list, checked) {\n  var toggleCount = 0;\n  list.forEach(function (item) {\n    if (item.disabled) {\n      return;\n    }\n\n    if (item.checked !== checked) {\n      item.checked = checked;\n      toggleCount += 1;\n    }\n\n    if (itemHasChildren(item)) {\n      var childrenToggleCount = 0;\n      item.children.forEach(function (childItem) {\n        if (childItem.checked !== checked) {\n          childItem.checked = checked;\n          childrenToggleCount += 1;\n        }\n      });\n\n      if (childrenToggleCount > 0) {\n        toggleCount += childrenToggleCount - 1;\n      }\n    }\n  });\n  return toggleCount;\n};\nexport var isAllItemsChecked = function isAllItemsChecked(items, selectCount) {\n  return selectCount > 0 && selectCount === getItemsLength(items);\n};\nexport var isItemExistOnList = function isItemExistOnList(list, itemLabel) {\n  var parentIndex = null; // find if the parent already exist on the list.\n\n  list.forEach(function (listItem, index) {\n    if (listItem.label === itemLabel) {\n      parentIndex = index;\n    }\n  });\n  return {\n    isParentExist: parentIndex !== null,\n    parentIndex: parentIndex\n  };\n};\nexport var getFilterredItems = function getFilterredItems(list) {\n  var filteredItems = [];\n  list.forEach(function (item) {\n    if (!isItemHidden(item)) {\n      filteredItems.push(item);\n    } else if (itemHasChildren(item)) {\n      var filteredChildren = [];\n      item.children.forEach(function (childItem) {\n        if (!isItemHidden(childItem)) {\n          filteredChildren.push(childItem);\n        }\n      });\n\n      if (filteredChildren.length > 0) {\n        filteredItems.push(_extends({}, item, {\n          children: filteredChildren\n        }));\n      }\n    }\n  });\n  return filteredItems;\n};\nexport var getFilterredItemsLength = function getFilterredItemsLength(list) {\n  return getItemsLength(getFilterredItems(list));\n};\nexport var getSelectedFilterredItemsLength = function getSelectedFilterredItemsLength(list) {\n  var filteredItems = getFilterredItems(list);\n  var selectedAmount = 0;\n  filteredItems.forEach(function (item) {\n    if (isItemSelected(item)) {\n      selectedAmount += 1;\n\n      if (itemHasChildren(item)) {\n        var selectedChildrenAmount = 0;\n        item.children.forEach(function (childItem) {\n          if (isItemSelected(childItem)) {\n            selectedChildrenAmount += 1;\n          }\n        });\n\n        if (selectedChildrenAmount) {\n          selectedAmount += selectedChildrenAmount - 1;\n        }\n      }\n    }\n  });\n  return selectedAmount;\n};\nexport var isItemSelected = function isItemSelected(item) {\n  return item.checked;\n};\nexport var isItemHidden = function isItemHidden(item) {\n  return item.hidden;\n};\nexport var isItemDisabled = function isItemDisabled(item) {\n  return item.disabled;\n};","map":null,"metadata":{},"sourceType":"module"}