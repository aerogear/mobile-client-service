{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport ModalPattern from './ModalPattern';\nimport { propOrState, excludeKeys } from '../../../index';\n/**\n * Stateful Modal Pattern component.\n */\n\nvar StatefulModalPattern = function (_React$Component) {\n  _inherits(StatefulModalPattern, _React$Component);\n\n  _createClass(StatefulModalPattern, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return {\n        show: propOrState(nextProps, prevState, 'show')\n      };\n    }\n  }]);\n\n  function StatefulModalPattern(props) {\n    _classCallCheck(this, StatefulModalPattern);\n\n    var _this = _possibleConstructorReturn(this, (StatefulModalPattern.__proto__ || Object.getPrototypeOf(StatefulModalPattern)).call(this, props));\n\n    _this.open = function () {\n      _this.setState({\n        show: true\n      });\n    };\n\n    _this.close = function () {\n      _this.setState({\n        show: false\n      });\n    };\n\n    _this.getModalPatternProps = function () {\n      return _this.props;\n    };\n\n    _this.state = {\n      show: false\n    };\n    return _this;\n  }\n\n  _createClass(StatefulModalPattern, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement(ModalPattern, _extends({}, this.getModalPatternProps(), {\n        show: this.state.show,\n        onClose: this.close\n      }));\n    }\n  }]);\n\n  return StatefulModalPattern;\n}(React.Component);\n\nStatefulModalPattern.propTypes = _extends({}, excludeKeys(ModalPattern.propTypes, ['onClose']));\nStatefulModalPattern.defaultProps = _extends({}, excludeKeys(ModalPattern.defaultProps, ['onClose', 'show']));\nStatefulModalPattern.displayName = 'StatefulModalPattern';\nexport default StatefulModalPattern;","map":null,"metadata":{},"sourceType":"module"}