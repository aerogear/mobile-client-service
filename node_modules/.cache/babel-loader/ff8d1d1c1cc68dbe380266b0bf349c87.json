{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getContext } from 'recompose';\nimport Navbar from 'react-bootstrap/es/Navbar';\nimport VerticalNavBrand from './VerticalNavBrand';\nimport { navContextTypes } from './VerticalNavConstants';\nimport { noop, hasDisplayName, filterChildren } from '../../common/helpers';\n/**\n * VerticalNavMasthead - the first child of a VerticalNav component\n */\n\nvar BaseVerticalNavMasthead = function BaseVerticalNavMasthead(props) {\n  var children = props.children,\n      href = props.href,\n      iconImg = props.iconImg,\n      titleImg = props.titleImg,\n      title = props.title;\n  var brandChildren = filterChildren(children, function (child) {\n    return hasDisplayName(child, VerticalNavBrand.displayName);\n  });\n  var otherChildren = filterChildren(children, function (child) {\n    return !hasDisplayName(child, VerticalNavBrand.displayName);\n  });\n  return React.createElement(React.Fragment, null, React.createElement(Navbar.Header, null, React.createElement(Navbar.Toggle, {\n    onClick: props.updateNavOnMenuToggleClick\n  }, React.createElement('span', {\n    className: 'sr-only'\n  }, 'Toggle navigation'), React.createElement('span', {\n    className: 'icon-bar'\n  }), React.createElement('span', {\n    className: 'icon-bar'\n  }), React.createElement('span', {\n    className: 'icon-bar'\n  })), brandChildren && brandChildren.length > 0 ? brandChildren : React.createElement(VerticalNavBrand, {\n    title: title,\n    titleImg: titleImg,\n    iconImg: iconImg,\n    href: href\n  })), otherChildren);\n};\n\nBaseVerticalNavMasthead.propTypes = _extends({}, navContextTypes, {\n  /** See VerticalNavBrand.propTypes */\n  title: PropTypes.string,\n\n  /** See VerticalNavBrand.propTypes */\n  titleImg: PropTypes.string,\n\n  /** See VerticalNavBrand.propTypes */\n  iconImg: PropTypes.string,\n\n  /** See VerticalNavBrand.propTypes */\n  href: PropTypes.string,\n\n  /** See VerticalNavBrand.propTypes */\n  updateNavOnMenuToggleClick: PropTypes.func,\n\n  /** If any non-Brand children are passed, they will be rendered after the .navbar-header */\n  children: PropTypes.node\n});\nBaseVerticalNavMasthead.defaultProps = {\n  title: '',\n  titleImg: '',\n  iconImg: '',\n  href: '',\n  updateNavOnMenuToggleClick: noop,\n  children: null\n};\nvar VerticalNavMasthead = getContext(navContextTypes)(BaseVerticalNavMasthead);\nVerticalNavMasthead.propTypes = _extends({}, BaseVerticalNavMasthead.propTypes);\nVerticalNavMasthead.displayName = 'VerticalNav.Masthead';\nexport default VerticalNavMasthead;","map":null,"metadata":{},"sourceType":"module"}