{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport C3Chart from 'react-c3js';\nimport { findDOMNode } from 'react-dom';\nimport { lifecycle, compose } from 'recompose';\nimport { patternfly } from '../../common/patternfly';\nimport { getComposer } from './ChartConstants';\nvar pfSetDonutChartTitle = patternfly.pfSetDonutChartTitle;\n\nvar colIndexOfMaxValue = function colIndexOfMaxValue(columns) {\n  return columns.reduce(function (iMax, x, i, arr) {\n    return x[1] > arr[iMax][1] ? i : iMax;\n  }, 0);\n};\n\nvar setDonutTitle = function setDonutTitle(obj) {\n  var primary = void 0;\n  var secondary = void 0;\n  var props = obj.props;\n  var data = props.data,\n      _props$title = props.title,\n      title = _props$title === undefined ? {} : _props$title;\n  var columns = data.columns;\n  var sum = columns.reduce(function (acc, x) {\n    return acc + x[1];\n  }, 0);\n  var iMax = colIndexOfMaxValue(columns);\n\n  switch (title.type) {\n    case 'percent':\n      primary = Math.round(100 * columns[iMax][1] / sum).toString() + '%';\n\n      var _columns$iMax = _slicedToArray(columns[iMax], 1);\n\n      secondary = _columns$iMax[0];\n      break;\n\n    case 'max':\n      primary = Math.round(columns[iMax][1]).toString();\n\n      var _columns$iMax2 = _slicedToArray(columns[iMax], 1);\n\n      secondary = _columns$iMax2[0];\n      break;\n\n    case 'total':\n    default:\n      primary = Math.round(sum).toString();\n      break;\n  }\n\n  pfSetDonutChartTitle( // eslint-disable-next-line react/no-find-dom-node\n  findDOMNode(obj), title.primary || primary, title.secondary || secondary);\n};\n\nvar addDonutTitle = lifecycle({\n  componentDidMount: function componentDidMount() {\n    setDonutTitle(this);\n  },\n  componentDidUpdate: function componentDidUpdate(prevProps) {\n    setDonutTitle(this);\n  }\n});\nvar DonutChart = compose(getComposer('DONUT_CHART'), addDonutTitle)(function (_ref) {\n  var className = _ref.className,\n      type = _ref.type,\n      data = _ref.data,\n      props = _objectWithoutProperties(_ref, ['className', 'type', 'data']);\n\n  return React.createElement(C3Chart, _extends({\n    className: className,\n    type: type,\n    data: data\n  }, props));\n});\nexport default DonutChart;","map":null,"metadata":{},"sourceType":"module"}