{"ast":null,"code":"import { has } from 'lodash-es';\nimport { KEY_CR_NAME, KEY_CR_SOURCE_GITURL, KEY_CR_SOURCE_GITREF, KEY_CR_SOURCE_JENKINS_FILE_PATH, KEY_CR_BASIC_AUTH_NAME, KEY_CR_BASIC_AUTH_PASSWORD, KEY_CR_BASIC_AUTH_USERNAME, KEY_CR_SSH_AUTH_NAME, KEY_CR_SSH_PRIVATE_KEY, KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME, KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE, KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS, KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD, KEY_CR_BUILD_IOS_CREDENTIALS_NAME, KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE, KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD, withPath } from '../Constants';\nimport { VALIDATION_OK, validateNotEmpty, validateGitUrl, VALIDATION_ERROR } from '../../common/Validation';\nexport var setWithValidation = function setWithValidation(dispatcher, validation) {\n  return function (key, value) {\n    return dispatcher(key, value, validation(key, value));\n  };\n};\n/**\n * Check if object has all validations Ok.\n * @param {Object} obj\n */\n\nexport function isAllValid(obj) {\n  var resolution = true;\n  Object.keys(obj).forEach(function (key) {\n    var value = obj[key];\n\n    if (value instanceof Object) {\n      resolution = resolution && isAllValid(value);\n    }\n\n    if (value === VALIDATION_ERROR) {\n      resolution = false;\n    }\n  });\n  return resolution;\n}\n/**\n * Checks if the state has all mandatory fields filled.\n * @param {*} state create build config state\n */\n\nexport function checkMandatoryFields(state) {\n  var _state$validation = state.validation,\n      validation = _state$validation === void 0 ? {} : _state$validation;\n  var _validation$mandatory = validation.mandatoryFields,\n      mandatoryFields = _validation$mandatory === void 0 ? {} : _validation$mandatory;\n  var valid = true;\n  Object.keys(mandatoryFields).forEach(function (path) {\n    var _mandatoryFields$path = mandatoryFields[path],\n        fields = _mandatoryFields$path.fields,\n        _mandatoryFields$path2 = _mandatoryFields$path.affectsFun,\n        affectsFun = _mandatoryFields$path2 === void 0 ? function () {\n      return true;\n    } : _mandatoryFields$path2;\n    fields.forEach(function (field) {\n      var hasIt = has(state, withPath(path, field));\n      if (affectsFun(state)) valid = valid && hasIt;\n    });\n  });\n  return valid;\n}\nexport function configValidation(key, value) {\n  switch (key) {\n    case KEY_CR_NAME:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function buildValidation(key, value) {\n  return VALIDATION_OK;\n}\nexport function sourceValidation(key, value) {\n  switch (key) {\n    case KEY_CR_SOURCE_GITURL:\n      return validateGitUrl(value);\n\n    case KEY_CR_SOURCE_GITREF:\n      return validateNotEmpty(value);\n\n    case KEY_CR_SOURCE_JENKINS_FILE_PATH:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function basicAuthValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BASIC_AUTH_NAME:\n    case KEY_CR_BASIC_AUTH_USERNAME:\n    case KEY_CR_BASIC_AUTH_PASSWORD:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function sshAuthValidation(key, value) {\n  switch (key) {\n    case KEY_CR_SSH_AUTH_NAME:\n    case KEY_CR_SSH_PRIVATE_KEY:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function androidCredentialsValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function iOSCredentialsValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BUILD_IOS_CREDENTIALS_NAME:\n    case KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE:\n    case KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD:\n      return validateNotEmpty(value);\n\n    default:\n      return VALIDATION_OK;\n  }\n}","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/build/create_build_config/Validations.js"],"names":["has","KEY_CR_NAME","KEY_CR_SOURCE_GITURL","KEY_CR_SOURCE_GITREF","KEY_CR_SOURCE_JENKINS_FILE_PATH","KEY_CR_BASIC_AUTH_NAME","KEY_CR_BASIC_AUTH_PASSWORD","KEY_CR_BASIC_AUTH_USERNAME","KEY_CR_SSH_AUTH_NAME","KEY_CR_SSH_PRIVATE_KEY","KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD","KEY_CR_BUILD_IOS_CREDENTIALS_NAME","KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE","KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD","withPath","VALIDATION_OK","validateNotEmpty","validateGitUrl","VALIDATION_ERROR","setWithValidation","dispatcher","validation","key","value","isAllValid","obj","resolution","Object","keys","forEach","checkMandatoryFields","state","mandatoryFields","valid","path","fields","affectsFun","field","hasIt","configValidation","buildValidation","sourceValidation","basicAuthValidation","sshAuthValidation","androidCredentialsValidation","iOSCredentialsValidation"],"mappings":"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","sourcesContent":["import { has } from 'lodash-es';\nimport {\n  KEY_CR_NAME,\n  KEY_CR_SOURCE_GITURL,\n  KEY_CR_SOURCE_GITREF,\n  KEY_CR_SOURCE_JENKINS_FILE_PATH,\n  KEY_CR_BASIC_AUTH_NAME,\n  KEY_CR_BASIC_AUTH_PASSWORD,\n  KEY_CR_BASIC_AUTH_USERNAME,\n  KEY_CR_SSH_AUTH_NAME,\n  KEY_CR_SSH_PRIVATE_KEY,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS,\n  KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD,\n  KEY_CR_BUILD_IOS_CREDENTIALS_NAME,\n  KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE,\n  KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD,\n  withPath\n} from '../Constants';\nimport { VALIDATION_OK, validateNotEmpty, validateGitUrl, VALIDATION_ERROR } from '../../common/Validation';\n\nexport const setWithValidation = (dispatcher, validation) => (key, value) =>\n  dispatcher(key, value, validation(key, value));\n\n/**\n * Check if object has all validations Ok.\n * @param {Object} obj\n */\nexport function isAllValid(obj) {\n  let resolution = true;\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (value instanceof Object) {\n      resolution = resolution && isAllValid(value);\n    }\n    if (value === VALIDATION_ERROR) {\n      resolution = false;\n    }\n  });\n  return resolution;\n}\n\n/**\n * Checks if the state has all mandatory fields filled.\n * @param {*} state create build config state\n */\nexport function checkMandatoryFields(state) {\n  const { validation = {} } = state;\n  const { mandatoryFields = {} } = validation;\n  let valid = true;\n  Object.keys(mandatoryFields).forEach(path => {\n    const { fields, affectsFun = () => true } = mandatoryFields[path];\n    fields.forEach(field => {\n      const hasIt = has(state, withPath(path, field));\n      if (affectsFun(state)) valid = valid && hasIt;\n    });\n  });\n  return valid;\n}\n\nexport function configValidation(key, value) {\n  switch (key) {\n    case KEY_CR_NAME:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\n\nexport function buildValidation(key, value) {\n  return VALIDATION_OK;\n}\n\nexport function sourceValidation(key, value) {\n  switch (key) {\n    case KEY_CR_SOURCE_GITURL:\n      return validateGitUrl(value);\n    case KEY_CR_SOURCE_GITREF:\n      return validateNotEmpty(value);\n    case KEY_CR_SOURCE_JENKINS_FILE_PATH:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\n\nexport function basicAuthValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BASIC_AUTH_NAME:\n    case KEY_CR_BASIC_AUTH_USERNAME:\n    case KEY_CR_BASIC_AUTH_PASSWORD:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\n\nexport function sshAuthValidation(key, value) {\n  switch (key) {\n    case KEY_CR_SSH_AUTH_NAME:\n    case KEY_CR_SSH_PRIVATE_KEY:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\n\nexport function androidCredentialsValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS:\n    case KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\nexport function iOSCredentialsValidation(key, value) {\n  switch (key) {\n    case KEY_CR_BUILD_IOS_CREDENTIALS_NAME:\n    case KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE:\n    case KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD:\n      return validateNotEmpty(value);\n    default:\n      return VALIDATION_OK;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}