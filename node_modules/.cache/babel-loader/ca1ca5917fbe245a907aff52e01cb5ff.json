{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotificationDrawerWrapper } from './index';\n\nvar StatefulNotificationDrawerWrapper = function (_React$Component) {\n  _inherits(StatefulNotificationDrawerWrapper, _React$Component);\n\n  function StatefulNotificationDrawerWrapper(props) {\n    _classCallCheck(this, StatefulNotificationDrawerWrapper);\n\n    var _this = _possibleConstructorReturn(this, (StatefulNotificationDrawerWrapper.__proto__ || Object.getPrototypeOf(StatefulNotificationDrawerWrapper)).call(this, props));\n\n    _this.onClickLink = function (url) {\n      window.open(url.href);\n    };\n\n    _this.onMarkPanelAsRead = function (panelkey) {\n      var panels = _this.state.panels.map(function (panel) {\n        if (panel.panelkey === panelkey) {\n          panel.notifications.map(function (notification) {\n            notification.seen = true;\n            return notification;\n          });\n        }\n\n        return panel;\n      });\n\n      _this.setState({\n        panels: panels\n      });\n\n      _this.updateUnreadCount();\n    };\n\n    _this.onMarkPanelAsClear = function (key) {\n      var panels = _this.state.panels.map(function (panel) {\n        if (panel.panelkey === key) panel.notifications = [];\n        return panel;\n      });\n\n      _this.setState({\n        panels: panels\n      });\n\n      _this.updateUnreadCount();\n    };\n\n    _this.onNotificationAsRead = function (panelkey, nkey) {\n      var panels = _this.state.panels.map(function (panel) {\n        if (panel.panelkey === panelkey) {\n          panel.notifications.map(function (notification) {\n            if (notification.id === nkey) notification.seen = true;\n            return notification;\n          });\n        }\n\n        return panel;\n      });\n\n      _this.setState({\n        panels: panels\n      });\n\n      _this.updateUnreadCount();\n    };\n\n    _this.onNotificationClick = function () {// On Click\n    };\n\n    _this.onNotificationHide = function (panelkey, nkey) {\n      var panels = _this.state.panels.map(function (panel) {\n        if (panel.panelkey === panelkey) {\n          for (var i = 0; i < panel.notifications.length; i++) {\n            if (nkey === panel.notifications[i].id) {\n              panel.notifications.splice(i, 1);\n            }\n          }\n        }\n\n        return panel;\n      });\n\n      _this.setState({\n        panels: panels\n      });\n\n      _this.updateUnreadCount();\n    };\n\n    _this.togglePanel = function (key) {\n      if (_this.state.expandedPanel === key) _this.setState({\n        expandedPanel: '-1'\n      });else _this.setState({\n        expandedPanel: key\n      });\n    };\n\n    _this.toggleDrawerExpand = function () {\n      _this.setState(function (prevState) {\n        return {\n          isExpanded: !prevState.isExpanded\n        };\n      });\n    };\n\n    _this.updateUnreadCount = function () {\n      var hasunread = false;\n\n      for (var i = 0; i < _this.state.panels.length; i++) {\n        for (var j = 0; j < _this.state.panels[i].notifications.length; j++) {\n          if (_this.state.panels[i].notifications[j].seen === false) {\n            hasunread = true;\n          }\n        }\n      }\n\n      _this.props.updateUnreadCount(hasunread);\n    };\n\n    _this.state = {\n      panels: props.panels,\n      isExpanded: props.isExpanded,\n      expandedPanel: props.expandedPanel\n    };\n    return _this;\n  }\n\n  _createClass(StatefulNotificationDrawerWrapper, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement(NotificationDrawerWrapper, {\n        panels: this.state.panels,\n        togglePanel: this.togglePanel,\n        toggleDrawerExpand: this.toggleDrawerExpand,\n        isExpanded: this.state.isExpanded,\n        isExpandable: this.props.isExpandable,\n        expandedPanel: this.state.expandedPanel,\n        toggleDrawerHide: this.props.toggleDrawer,\n        onNotificationClick: this.onNotificationClick,\n        onNotificationAsRead: this.onNotificationAsRead,\n        onNotificationHide: this.onNotificationHide,\n        onMarkPanelAsClear: this.onMarkPanelAsClear,\n        onMarkPanelAsRead: this.onMarkPanelAsRead,\n        onClickedLink: this.onClickLink\n      });\n    }\n  }]);\n\n  return StatefulNotificationDrawerWrapper;\n}(React.Component);\n\nStatefulNotificationDrawerWrapper.propTypes = {\n  /** Notification Panels Array */\n  panels: PropTypes.array,\n\n  /** is Expanded Bool */\n  isExpanded: PropTypes.bool,\n\n  /** updateUnreadCount Func */\n  updateUnreadCount: PropTypes.func,\n\n  /** toggleDrawer Func */\n  toggleDrawer: PropTypes.func,\n\n  /** is Drawer Expandable prop */\n  isExpandable: PropTypes.bool,\n\n  /** expanded Panel */\n  expandedPanel: PropTypes.string\n};\nStatefulNotificationDrawerWrapper.defaultProps = {\n  panels: null,\n  isExpanded: false,\n  updateUnreadCount: null,\n  toggleDrawer: null,\n  isExpandable: true,\n  expandedPanel: null\n};\nexport default StatefulNotificationDrawerWrapper;","map":null,"metadata":{},"sourceType":"module"}