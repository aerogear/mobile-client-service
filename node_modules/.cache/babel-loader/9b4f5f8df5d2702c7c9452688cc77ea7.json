{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DropdownButton } from '../Button';\nimport { MenuItem } from '../MenuItem';\nimport { noop } from '../../common/helpers';\n\nvar FilterCategoryValueSelector = function FilterCategoryValueSelector(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      categoryValues = _ref.categoryValues,\n      currentValue = _ref.currentValue,\n      placeholder = _ref.placeholder,\n      onCategoryValueSelected = _ref.onCategoryValueSelected,\n      props = _objectWithoutProperties(_ref, ['className', 'id', 'categoryValues', 'currentValue', 'placeholder', 'onCategoryValueSelected']);\n\n  var classes = classNames('filter-pf-select', className);\n\n  if (placeholder || categoryValues && categoryValues.length > 1) {\n    var title = void 0;\n\n    if (currentValue) {\n      title = currentValue.title || currentValue;\n    } else {\n      title = placeholder || categoryValues[0].title || categoryValues[0];\n    }\n\n    var menuId = 'filterCategoryMenu';\n    menuId += id ? '_' + id : '';\n    var dropdownClasses = classNames('filter-pf-category-select-value', 'filter-pf-select-dropdown', {\n      'filter-selected': title !== placeholder\n    });\n    return React.createElement('div', _extends({\n      className: classes\n    }, props), React.createElement(DropdownButton, {\n      className: dropdownClasses,\n      title: title,\n      id: menuId\n    }, categoryValues && categoryValues.map(function (item, index) {\n      var menuItemClasses = {\n        selected: item === currentValue\n      };\n      return React.createElement(MenuItem, {\n        className: menuItemClasses,\n        key: item.id || index,\n        onSelect: function onSelect() {\n          return onCategoryValueSelected(item);\n        }\n      }, item.title || item);\n    })));\n  }\n\n  return null;\n};\n\nFilterCategoryValueSelector.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** ID for the filter component, necessary for accessibility if there are multiple filters on a page */\n  id: PropTypes.string,\n\n  /** Array of valid values for the category to select from, each can be a string or an object with a 'title' field */\n  categoryValues: PropTypes.array,\n\n  /** Currently selected category value */\n  currentValue: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /** Placeholder text when no category value is selected */\n  placeholder: PropTypes.string,\n\n  /** function(field, value) - Callback to call when a category value is selected */\n  onCategoryValueSelected: PropTypes.func\n};\nFilterCategoryValueSelector.defaultProps = {\n  className: '',\n  id: '',\n  categoryValues: null,\n  currentValue: '',\n  placeholder: '',\n  onCategoryValueSelected: noop\n};\nexport default FilterCategoryValueSelector;","map":null,"metadata":{},"sourceType":"module"}