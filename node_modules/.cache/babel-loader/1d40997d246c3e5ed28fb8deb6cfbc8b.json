{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from '../../common/helpers';\nimport ListViewExpand from './ListViewExpand';\nimport ListViewGroupItem from './ListViewGroupItem';\nimport ListViewGroupItemContainer from './ListViewGroupItemContainer';\nimport ListViewGroupItemHeader from './ListViewGroupItemHeader';\nimport ListViewRow from './ListViewRow';\n/**\n * ListViewItem - main ListViewItem component which handles the expansion logic.\n * ListViewItem is considered expandable if it has child props. In that case it\n * renders ListViewGroupItemHeader and ListViewGroupItemContainer\n */\n\nvar ListViewItem = function (_React$Component) {\n  _inherits(ListViewItem, _React$Component);\n\n  function ListViewItem() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ListViewItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ListViewItem.__proto__ || Object.getPrototypeOf(ListViewItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      expanded: _this.props.initExpanded\n    }, _this.toggleExpanded = function () {\n      var _this$props = _this.props,\n          onExpand = _this$props.onExpand,\n          onExpandClose = _this$props.onExpandClose;\n\n      if (_this.state.expanded) {\n        onExpandClose();\n      } else {\n        onExpand();\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ListViewItem, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          stacked = _props.stacked,\n          onExpand = _props.onExpand,\n          onExpandClose = _props.onExpandClose,\n          actions = _props.actions,\n          additionalInfo = _props.additionalInfo,\n          description = _props.description,\n          heading = _props.heading,\n          leftContent = _props.leftContent,\n          checkboxInput = _props.checkboxInput,\n          hideCloseIcon = _props.hideCloseIcon,\n          compoundExpand = _props.compoundExpand,\n          compoundExpanded = _props.compoundExpanded,\n          onCloseCompoundExpand = _props.onCloseCompoundExpand,\n          initExpanded = _props.initExpanded,\n          other = _objectWithoutProperties(_props, ['children', 'stacked', 'onExpand', 'onExpandClose', 'actions', 'additionalInfo', 'description', 'heading', 'leftContent', 'checkboxInput', 'hideCloseIcon', 'compoundExpand', 'compoundExpanded', 'onCloseCompoundExpand', 'initExpanded']);\n\n      var expanded = this.state.expanded;\n\n      if (children) {\n        if (compoundExpand) {\n          return React.createElement(ListViewGroupItem, _extends({\n            expanded: compoundExpanded,\n            stacked: stacked\n          }, other), React.createElement(ListViewRow, {\n            checkboxInput: checkboxInput,\n            leftContent: leftContent,\n            heading: heading,\n            description: description,\n            additionalInfo: additionalInfo,\n            actions: actions\n          }), React.createElement(ListViewGroupItemContainer, {\n            expanded: compoundExpanded,\n            onClose: hideCloseIcon ? undefined : onCloseCompoundExpand\n          }, children));\n        }\n\n        return React.createElement(ListViewGroupItem, _extends({\n          expanded: expanded,\n          stacked: stacked\n        }, other), React.createElement(ListViewGroupItemHeader, {\n          toggleExpanded: this.toggleExpanded\n        }, React.createElement(ListViewExpand, {\n          expanded: expanded,\n          toggleExpanded: this.toggleExpanded\n        }), React.createElement(ListViewRow, {\n          checkboxInput: checkboxInput,\n          leftContent: leftContent,\n          heading: heading,\n          description: description,\n          additionalInfo: additionalInfo,\n          actions: actions\n        })), React.createElement(ListViewGroupItemContainer, {\n          expanded: expanded,\n          onClose: hideCloseIcon ? undefined : this.toggleExpanded\n        }, children));\n      }\n\n      return React.createElement(ListViewGroupItem, _extends({\n        stacked: stacked\n      }, other), React.createElement(ListViewRow, {\n        checkboxInput: checkboxInput,\n        leftContent: leftContent,\n        heading: heading,\n        description: description,\n        additionalInfo: additionalInfo,\n        actions: actions\n      }));\n    }\n  }]);\n\n  return ListViewItem;\n}(React.Component);\n\nListViewItem.propTypes = {\n  /** Child node rendered as expanded content of the ListViewItem */\n  children: PropTypes.node,\n\n  /** Display the ListViewItem stacked or not */\n  stacked: PropTypes.bool,\n\n  /** Function triggered when expandable content is expanded */\n  onExpand: PropTypes.func,\n\n  /** Function triggered when expandable content is closed */\n  onExpandClose: PropTypes.func,\n\n  /** Node which renders right-positioned actions (e.g. Buttons, DropdownKebab...) */\n  actions: PropTypes.node,\n\n  /** An array of ListViewInfoItem instances to render additional info items */\n  additionalInfo: PropTypes.arrayOf(PropTypes.node),\n\n  /** Contents of ListViewItem description section */\n  description: PropTypes.node,\n\n  /** Contents of ListViewItem heading */\n  heading: PropTypes.node,\n\n  /** Contents for left section of ListViewItem (usually ListViewIcon) */\n  leftContent: PropTypes.node,\n\n  /** Checkbox form input component */\n  checkboxInput: PropTypes.node,\n\n  /** Optionally hide the close icon in expanded content */\n  hideCloseIcon: PropTypes.bool,\n\n  /** Flag to use compound expansion contents */\n  compoundExpand: PropTypes.bool,\n\n  /** Flag to show compound expansion contents */\n  compoundExpanded: PropTypes.bool,\n\n  /** Flag to initialize expanded state */\n  initExpanded: PropTypes.bool,\n\n  /** Function triggered when compound expandable content is closed */\n  onCloseCompoundExpand: PropTypes.func\n};\nListViewItem.defaultProps = {\n  children: null,\n  actions: null,\n  additionalInfo: null,\n  description: null,\n  heading: null,\n  leftContent: null,\n  checkboxInput: null,\n  compoundExpand: false,\n  compoundExpanded: false,\n  hideCloseIcon: false,\n  onExpand: noop,\n  onExpandClose: noop,\n  initExpanded: false,\n  onCloseCompoundExpand: noop,\n  stacked: false\n};\nexport default ListViewItem;","map":null,"metadata":{},"sourceType":"module"}