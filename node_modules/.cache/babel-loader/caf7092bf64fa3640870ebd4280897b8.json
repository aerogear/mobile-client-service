{"ast":null,"code":"/* SourceConfig authType */\nexport var BUILD_AUTH_TYPE_BASIC = 'basic';\nexport var BUILD_AUTH_TYPE_PUBLIC = 'public';\nexport var BUILD_AUTH_TYPE_SSH = 'ssh';\n/* BuildConfig platform */\n\nexport var BUILD_PLATFORM_ANDROID = 'android';\nexport var BUILD_PLATFORM_IOS = 'iOS';\n/* BuildConfig buildType */\n\nexport var BUILD_TYPE_DEBUG = 'debug';\nexport var BUILD_TYPE_RELEASE = 'release';\nexport var KEY_HIDE_PLATFORM = 'hidePlatform';\nexport var KEY_EXTERNAL_CREDENTIALS = 'externalCredentials';\nexport var KEY_ALL_MANDATORY = 'allMandatoryFilled';\nexport var KEY_ALL_VALID = 'allValid';\nexport var KEY_UI = 'ui';\n/* Path generation functions */\n\nexport var ofValidation = function ofValidation(path) {\n  return withPath('validation', path);\n};\nexport var withPath = function withPath(prePath, path) {\n  return \"\".concat(prePath, \".\").concat(path);\n};\n/** BuildConfigCreateRequest keys */\n\nexport var KEY_CR = 'config';\nexport var KEY_CR_NAME = 'name';\nexport var KEY_CR_CLIENT_ID = 'clientId';\nexport var KEY_CR_CLIENT_TYPE = 'clientType';\nexport var KEY_CR_SOURCE = 'source';\nexport var PATH_CR_SOURCE = withPath(KEY_CR, KEY_CR_SOURCE);\nexport var KEY_CR_BUILD = 'build';\nexport var PATH_CR_BUILD = withPath(KEY_CR, KEY_CR_BUILD);\nexport var KEY_CR_ENV_VARS = \"envVars\";\nexport var KEY_CR_BUILD_PLATFORM = 'platform';\nexport var KEY_CR_BUILD_TYPE = 'buildType';\nexport var KEY_CR_BUILD_IOS_CREDENTIALS = \"iosCredentials\";\nexport var PATH_CR_BUILD_IOS_CREDENTIALS = withPath(PATH_CR_BUILD, KEY_CR_BUILD_IOS_CREDENTIALS);\nexport var KEY_CR_BUILD_IOS_CREDENTIALS_NAME = 'name';\nexport var KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE = 'developerProfile';\nexport var KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD = 'profilePassword';\nexport var KEY_CR_BUILD_ANDROID_CREDENTIALS = 'androidCredentials';\nexport var PATH_CR_BUILD_ANDROID_CREDENTIALS = withPath(PATH_CR_BUILD, KEY_CR_BUILD_ANDROID_CREDENTIALS);\nexport var KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME = 'name';\nexport var KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE = 'keystore';\nexport var KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD = 'keystorePassword';\nexport var KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS = 'keystoreAlias';\nexport var KEY_CR_SOURCE_GITURL = 'gitUrl';\nexport var KEY_CR_SOURCE_GITREF = 'gitRef';\nexport var KEY_CR_SOURCE_JENKINS_FILE_PATH = 'jenkinsFilePath';\nexport var KEY_CR_SOURCE_AUTH_TYPE = 'authType';\nexport var KEY_CR_SOURCE_BASIC_AUTH = \"basicAuth\";\nexport var PATH_CR_SOURCE_BASIC_AUTH = withPath(PATH_CR_SOURCE, KEY_CR_SOURCE_BASIC_AUTH);\nexport var KEY_CR_BASIC_AUTH_NAME = 'name';\nexport var KEY_CR_BASIC_AUTH_USERNAME = 'username';\nexport var KEY_CR_BASIC_AUTH_PASSWORD = 'password';\nexport var KEY_CR_SOURCE_SSH_AUTH = 'sshAuth';\nexport var PATH_CR_SOURCE_SSH_AUTH = withPath(PATH_CR_SOURCE, KEY_CR_SOURCE_SSH_AUTH);\nexport var KEY_CR_SSH_AUTH_NAME = 'name';\nexport var KEY_CR_SSH_PRIVATE_KEY = 'privateKey';","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/components/build/Constants.js"],"names":["BUILD_AUTH_TYPE_BASIC","BUILD_AUTH_TYPE_PUBLIC","BUILD_AUTH_TYPE_SSH","BUILD_PLATFORM_ANDROID","BUILD_PLATFORM_IOS","BUILD_TYPE_DEBUG","BUILD_TYPE_RELEASE","KEY_HIDE_PLATFORM","KEY_EXTERNAL_CREDENTIALS","KEY_ALL_MANDATORY","KEY_ALL_VALID","KEY_UI","ofValidation","path","withPath","prePath","KEY_CR","KEY_CR_NAME","KEY_CR_CLIENT_ID","KEY_CR_CLIENT_TYPE","KEY_CR_SOURCE","PATH_CR_SOURCE","KEY_CR_BUILD","PATH_CR_BUILD","KEY_CR_ENV_VARS","KEY_CR_BUILD_PLATFORM","KEY_CR_BUILD_TYPE","KEY_CR_BUILD_IOS_CREDENTIALS","PATH_CR_BUILD_IOS_CREDENTIALS","KEY_CR_BUILD_IOS_CREDENTIALS_NAME","KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE","KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD","KEY_CR_BUILD_ANDROID_CREDENTIALS","PATH_CR_BUILD_ANDROID_CREDENTIALS","KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD","KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS","KEY_CR_SOURCE_GITURL","KEY_CR_SOURCE_GITREF","KEY_CR_SOURCE_JENKINS_FILE_PATH","KEY_CR_SOURCE_AUTH_TYPE","KEY_CR_SOURCE_BASIC_AUTH","PATH_CR_SOURCE_BASIC_AUTH","KEY_CR_BASIC_AUTH_NAME","KEY_CR_BASIC_AUTH_USERNAME","KEY_CR_BASIC_AUTH_PASSWORD","KEY_CR_SOURCE_SSH_AUTH","PATH_CR_SOURCE_SSH_AUTH","KEY_CR_SSH_AUTH_NAME","KEY_CR_SSH_PRIVATE_KEY"],"mappings":"AAAA;AACA,OAAO,IAAMA,qBAAqB,GAAG,OAA9B;AACP,OAAO,IAAMC,sBAAsB,GAAG,QAA/B;AACP,OAAO,IAAMC,mBAAmB,GAAG,KAA5B;AAEP;;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAA/B;AACP,OAAO,IAAMC,kBAAkB,GAAG,KAA3B;AAEP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,OAAzB;AACP,OAAO,IAAMC,kBAAkB,GAAG,SAA3B;AAEP,OAAO,IAAMC,iBAAiB,GAAG,cAA1B;AACP,OAAO,IAAMC,wBAAwB,GAAG,qBAAjC;AACP,OAAO,IAAMC,iBAAiB,GAAG,oBAA1B;AACP,OAAO,IAAMC,aAAa,GAAG,UAAtB;AACP,OAAO,IAAMC,MAAM,GAAG,IAAf;AAEP;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI;AAAA,SAAIC,QAAQ,CAAC,YAAD,EAAeD,IAAf,CAAZ;AAAA,CAAzB;AACP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAUF,IAAV;AAAA,mBAAsBE,OAAtB,cAAiCF,IAAjC;AAAA,CAAjB;AAEP;;AACA,OAAO,IAAMG,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,WAAW,GAAG,MAApB;AACP,OAAO,IAAMC,gBAAgB,GAAG,UAAzB;AACP,OAAO,IAAMC,kBAAkB,GAAG,YAA3B;AACP,OAAO,IAAMC,aAAa,GAAG,QAAtB;AACP,OAAO,IAAMC,cAAc,GAAGP,QAAQ,CAACE,MAAD,EAASI,aAAT,CAA/B;AACP,OAAO,IAAME,YAAY,GAAG,OAArB;AACP,OAAO,IAAMC,aAAa,GAAGT,QAAQ,CAACE,MAAD,EAASM,YAAT,CAA9B;AAEP,OAAO,IAAME,eAAe,YAArB;AACP,OAAO,IAAMC,qBAAqB,GAAG,UAA9B;AACP,OAAO,IAAMC,iBAAiB,GAAG,WAA1B;AAEP,OAAO,IAAMC,4BAA4B,mBAAlC;AACP,OAAO,IAAMC,6BAA6B,GAAGd,QAAQ,CAACS,aAAD,EAAgBI,4BAAhB,CAA9C;AACP,OAAO,IAAME,iCAAiC,GAAG,MAA1C;AACP,OAAO,IAAMC,8CAA8C,GAAG,kBAAvD;AACP,OAAO,IAAMC,6CAA6C,GAAG,iBAAtD;AAEP,OAAO,IAAMC,gCAAgC,GAAG,oBAAzC;AACP,OAAO,IAAMC,iCAAiC,GAAGnB,QAAQ,CAACS,aAAD,EAAgBS,gCAAhB,CAAlD;AACP,OAAO,IAAME,qCAAqC,GAAG,MAA9C;AACP,OAAO,IAAMC,yCAAyC,GAAG,UAAlD;AACP,OAAO,IAAMC,kDAAkD,GAAG,kBAA3D;AACP,OAAO,IAAMC,+CAA+C,GAAG,eAAxD;AAEP,OAAO,IAAMC,oBAAoB,GAAG,QAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,QAA7B;AACP,OAAO,IAAMC,+BAA+B,GAAG,iBAAxC;AACP,OAAO,IAAMC,uBAAuB,GAAG,UAAhC;AAEP,OAAO,IAAMC,wBAAwB,cAA9B;AACP,OAAO,IAAMC,yBAAyB,GAAG7B,QAAQ,CAACO,cAAD,EAAiBqB,wBAAjB,CAA1C;AACP,OAAO,IAAME,sBAAsB,GAAG,MAA/B;AACP,OAAO,IAAMC,0BAA0B,GAAG,UAAnC;AACP,OAAO,IAAMC,0BAA0B,GAAG,UAAnC;AAEP,OAAO,IAAMC,sBAAsB,GAAG,SAA/B;AACP,OAAO,IAAMC,uBAAuB,GAAGlC,QAAQ,CAACO,cAAD,EAAiB0B,sBAAjB,CAAxC;AACP,OAAO,IAAME,oBAAoB,GAAG,MAA7B;AACP,OAAO,IAAMC,sBAAsB,GAAG,YAA/B","sourcesContent":["/* SourceConfig authType */\nexport const BUILD_AUTH_TYPE_BASIC = 'basic';\nexport const BUILD_AUTH_TYPE_PUBLIC = 'public';\nexport const BUILD_AUTH_TYPE_SSH = 'ssh';\n\n/* BuildConfig platform */\nexport const BUILD_PLATFORM_ANDROID = 'android';\nexport const BUILD_PLATFORM_IOS = 'iOS';\n\n/* BuildConfig buildType */\nexport const BUILD_TYPE_DEBUG = 'debug';\nexport const BUILD_TYPE_RELEASE = 'release';\n\nexport const KEY_HIDE_PLATFORM = 'hidePlatform';\nexport const KEY_EXTERNAL_CREDENTIALS = 'externalCredentials';\nexport const KEY_ALL_MANDATORY = 'allMandatoryFilled';\nexport const KEY_ALL_VALID = 'allValid';\nexport const KEY_UI = 'ui';\n\n/* Path generation functions */\nexport const ofValidation = path => withPath('validation', path);\nexport const withPath = (prePath, path) => `${prePath}.${path}`;\n\n/** BuildConfigCreateRequest keys */\nexport const KEY_CR = 'config';\nexport const KEY_CR_NAME = 'name';\nexport const KEY_CR_CLIENT_ID = 'clientId';\nexport const KEY_CR_CLIENT_TYPE = 'clientType';\nexport const KEY_CR_SOURCE = 'source';\nexport const PATH_CR_SOURCE = withPath(KEY_CR, KEY_CR_SOURCE);\nexport const KEY_CR_BUILD = 'build';\nexport const PATH_CR_BUILD = withPath(KEY_CR, KEY_CR_BUILD);\n\nexport const KEY_CR_ENV_VARS = `envVars`;\nexport const KEY_CR_BUILD_PLATFORM = 'platform';\nexport const KEY_CR_BUILD_TYPE = 'buildType';\n\nexport const KEY_CR_BUILD_IOS_CREDENTIALS = `iosCredentials`;\nexport const PATH_CR_BUILD_IOS_CREDENTIALS = withPath(PATH_CR_BUILD, KEY_CR_BUILD_IOS_CREDENTIALS);\nexport const KEY_CR_BUILD_IOS_CREDENTIALS_NAME = 'name';\nexport const KEY_CR_BUILD_IOS_CREDENTIALS_DEVELOPER_PROFILE = 'developerProfile';\nexport const KEY_CR_BUILD_IOS_CREDENTIALS_PROFILE_PASSWORD = 'profilePassword';\n\nexport const KEY_CR_BUILD_ANDROID_CREDENTIALS = 'androidCredentials';\nexport const PATH_CR_BUILD_ANDROID_CREDENTIALS = withPath(PATH_CR_BUILD, KEY_CR_BUILD_ANDROID_CREDENTIALS);\nexport const KEY_CR_BUILD_ANDROID_CREDENTIALS_NAME = 'name';\nexport const KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE = 'keystore';\nexport const KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_PASSWORD = 'keystorePassword';\nexport const KEY_CR_BUILD_ANDROID_CREDENTIALS_KEYSTORE_ALIAS = 'keystoreAlias';\n\nexport const KEY_CR_SOURCE_GITURL = 'gitUrl';\nexport const KEY_CR_SOURCE_GITREF = 'gitRef';\nexport const KEY_CR_SOURCE_JENKINS_FILE_PATH = 'jenkinsFilePath';\nexport const KEY_CR_SOURCE_AUTH_TYPE = 'authType';\n\nexport const KEY_CR_SOURCE_BASIC_AUTH = `basicAuth`;\nexport const PATH_CR_SOURCE_BASIC_AUTH = withPath(PATH_CR_SOURCE, KEY_CR_SOURCE_BASIC_AUTH);\nexport const KEY_CR_BASIC_AUTH_NAME = 'name';\nexport const KEY_CR_BASIC_AUTH_USERNAME = 'username';\nexport const KEY_CR_BASIC_AUTH_PASSWORD = 'password';\n\nexport const KEY_CR_SOURCE_SSH_AUTH = 'sshAuth';\nexport const PATH_CR_SOURCE_SSH_AUTH = withPath(PATH_CR_SOURCE, KEY_CR_SOURCE_SSH_AUTH);\nexport const KEY_CR_SSH_AUTH_NAME = 'name';\nexport const KEY_CR_SSH_PRIVATE_KEY = 'privateKey';\n"]},"metadata":{},"sourceType":"module"}