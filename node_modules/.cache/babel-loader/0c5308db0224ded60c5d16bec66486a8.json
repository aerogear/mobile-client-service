{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop } from '../../../common/helpers';\nimport TableSelectionHeading from '../TableSelectionHeading';\nimport TableCheckbox from '../TableCheckbox';\n\nvar selectionHeaderCellFormatter = function selectionHeaderCellFormatter(_ref) {\n  var cellProps = _ref.cellProps,\n      column = _ref.column,\n      rows = _ref.rows,\n      onSelectAllRows = _ref.onSelectAllRows;\n  var unselectedRows = rows.filter(function (r) {\n    return !r.selected;\n  }).length > 0;\n  var id = cellProps.id || 'selectAll';\n  return React.createElement(TableSelectionHeading, _extends({\n    'aria-label': column.header.label\n  }, cellProps), React.createElement(TableCheckbox, {\n    id: id,\n    label: column.header.label,\n    checked: !unselectedRows,\n    onChange: onSelectAllRows\n  }));\n};\n\nselectionHeaderCellFormatter.propTypes = {\n  /** column header cell props */\n  cellProps: PropTypes.object,\n\n  /** column definition */\n  column: PropTypes.object,\n\n  /** current table rows */\n  rows: PropTypes.array,\n\n  /** on select all rows callback */\n  onSelectAllRows: PropTypes.func\n};\nselectionHeaderCellFormatter.defaultProps = {\n  cellProps: {},\n  column: {},\n  rows: [],\n  onSelectAllRows: noop\n};\nexport default selectionHeaderCellFormatter;","map":null,"metadata":{},"sourceType":"module"}