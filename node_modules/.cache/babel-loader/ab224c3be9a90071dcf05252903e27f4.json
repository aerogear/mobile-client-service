{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Timer class implements a simple timeout mechanism\n */\n\n\nvar Timer = function () {\n  function Timer(func, delay) {\n    _classCallCheck(this, Timer);\n\n    this.timer = null;\n    this.delay = delay;\n    this.execute = func;\n  } // startTimer optionally takes a new func and delay so the timer instance can be reused.\n\n\n  _createClass(Timer, [{\n    key: \"startTimer\",\n    value: function startTimer(func) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n      this.clearTimer();\n      if (func) this.execute = func;\n      if (delay >= 0) this.delay = delay;\n      this.timer = setTimeout(this.execute, this.delay);\n    }\n  }, {\n    key: \"clearTimer\",\n    value: function clearTimer() {\n      if (this.timer) {\n        clearTimeout(this.timer);\n        this.timer = null;\n      }\n    }\n  }, {\n    key: \"skipTimer\",\n    value: function skipTimer() {\n      if (this.timer) {\n        this.execute(true); // execute can take an optional `skipped` argument\n\n        this.clearTimer();\n      }\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport default Timer;","map":null,"metadata":{},"sourceType":"module"}