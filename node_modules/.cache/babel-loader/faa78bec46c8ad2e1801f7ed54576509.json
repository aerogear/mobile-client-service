{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropdownButton } from '../Button';\nimport { MenuItem } from '../MenuItem';\nimport { noop } from '../../common/helpers';\n\nvar SortTypeSelector = function SortTypeSelector(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      sortTypes = _ref.sortTypes,\n      currentSortType = _ref.currentSortType,\n      onSortTypeSelected = _ref.onSortTypeSelected,\n      props = _objectWithoutProperties(_ref, ['className', 'id', 'sortTypes', 'currentSortType', 'onSortTypeSelected']);\n\n  var menuId = 'sortTypeMenu';\n  menuId += id ? '_' + id : '';\n\n  if (sortTypes && sortTypes.length > 1) {\n    var title = void 0;\n\n    if (currentSortType) {\n      title = currentSortType.title || currentSortType;\n    } else {\n      title = sortTypes[0].title || sortTypes[0];\n    }\n\n    return React.createElement(DropdownButton, _extends({\n      className: className,\n      title: title,\n      id: menuId\n    }, props), sortTypes.map(function (item, index) {\n      var classes = {\n        selected: item === currentSortType\n      };\n      return React.createElement(MenuItem, {\n        className: classes,\n        key: item.id || index,\n        onSelect: function onSelect() {\n          return onSortTypeSelected && onSortTypeSelected(item);\n        }\n      }, item.title || item);\n    }));\n  }\n\n  return null;\n};\n\nSortTypeSelector.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** ID for the sort component, necessary for accessibility if there are sort filters on a page */\n  id: PropTypes.string,\n\n  /** Array of sort types, can be a string or an object with a 'title' field */\n  sortTypes: PropTypes.array.isRequired,\n\n  /** Current selected sort type */\n  currentSortType: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /** function(field, value) - Callback to call when a sort type is selected */\n  onSortTypeSelected: PropTypes.func\n};\nSortTypeSelector.defaultProps = {\n  className: '',\n  id: '',\n  currentSortType: null,\n  onSortTypeSelected: noop\n};\nexport default SortTypeSelector;","map":null,"metadata":{},"sourceType":"module"}