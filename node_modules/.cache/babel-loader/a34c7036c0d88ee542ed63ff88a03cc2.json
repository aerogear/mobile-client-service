{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Spinner } from '../Spinner';\n\nvar LoadingState = function (_Component) {\n  _inherits(LoadingState, _Component);\n\n  function LoadingState(props) {\n    _classCallCheck(this, LoadingState);\n\n    var _this = _possibleConstructorReturn(this, (LoadingState.__proto__ || Object.getPrototypeOf(LoadingState)).call(this, props));\n\n    _this.state = {\n      render: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingState, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.onTimeout = setTimeout(function () {\n        _this2.setState({\n          render: true\n        });\n      }, this.props.timeout);\n    }\n  }, {\n    key: 'componentWillUnmout',\n    value: function componentWillUnmout() {\n      clearTimeout(this.onTimeout);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          loading = _props.loading,\n          loadingText = _props.loadingText,\n          children = _props.children,\n          size = _props.size,\n          additionalClasses = _props.additionalClasses;\n      var spinner = React.createElement('div', {\n        className: classNames('loading-state-pf', 'loading-state-pf-' + size, additionalClasses)\n      }, React.createElement(Spinner, {\n        loading: loading,\n        size: size\n      }), loadingText);\n\n      if (loading) {\n        return this.state.render ? spinner : null;\n      }\n\n      return children;\n    }\n  }]);\n\n  return LoadingState;\n}(Component);\n\nLoadingState.propTypes = {\n  /** determines whether to show spinner or children */\n  loading: PropTypes.bool,\n\n  /** text to show with spinner */\n  loadingText: PropTypes.string,\n\n  /** children nodes */\n  children: PropTypes.node,\n\n  /** delay in showing the children */\n  timeout: PropTypes.number,\n\n  /** size of the spinner */\n  size: PropTypes.oneOf(['lg', 'md', 'sm', 'xs']),\n\n  /** additional css classes for LoadingState */\n  additionalClasses: PropTypes.string\n};\nLoadingState.defaultProps = {\n  loading: false,\n  loadingText: 'Loading',\n  children: null,\n  timeout: 300,\n  size: 'lg',\n  additionalClasses: ''\n};\nexport default LoadingState;","map":null,"metadata":{},"sourceType":"module"}