{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableConfirmButtonsRow from './TableConfirmButtonsRow';\n\nvar TableInlineEditRow = function TableInlineEditRow(props) {\n  var buttonsPosition = function buttonsPosition(window, rowDimensions) {\n    var position = {};\n\n    if (props.last) {\n      position.bottom = window.height - rowDimensions.top - 1;\n    } else {\n      position.top = rowDimensions.bottom - 1;\n    }\n\n    position.right = window.width - rowDimensions.right + 10;\n    return position;\n  };\n\n  var buttonsClassName = props.last ? 'top' : 'bottom';\n  return React.createElement(TableConfirmButtonsRow, _extends({}, props, {\n    buttonsPosition: buttonsPosition,\n    buttonsClassName: buttonsClassName\n  }));\n};\n\nTableInlineEditRow.shouldComponentUpdate = true;\nTableInlineEditRow.defaultProps = _extends({}, TableConfirmButtonsRow.defaultProps, {\n  last: false\n});\nTableInlineEditRow.propTypes = {\n  /** Function that determines whether values or edit components should be rendered */\n  isEditing: PropTypes.func,\n\n  /** Confirm edit callback */\n  onConfirm: PropTypes.func,\n\n  /** Cancel edit callback */\n  onCancel: PropTypes.func,\n\n  /** Flag to indicate last row */\n  last: PropTypes.bool,\n\n  /** Row cells */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /** Message text inputs for i18n */\n  messages: PropTypes.shape({\n    confirmButtonLabel: PropTypes.string,\n    cancelButtonLabel: PropTypes.string\n  })\n};\nexport default TableInlineEditRow;","map":null,"metadata":{},"sourceType":"module"}