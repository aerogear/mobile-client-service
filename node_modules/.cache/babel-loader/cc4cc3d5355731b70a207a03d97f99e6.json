{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { DropdownButton } from '../Button';\nimport { MenuItem } from '../MenuItem';\nimport { noop } from '../../common/helpers';\n\nvar FilterCategorySelector = function FilterCategorySelector(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      id = _ref.id,\n      filterCategories = _ref.filterCategories,\n      currentCategory = _ref.currentCategory,\n      placeholder = _ref.placeholder,\n      onFilterCategorySelected = _ref.onFilterCategorySelected,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'id', 'filterCategories', 'currentCategory', 'placeholder', 'onFilterCategorySelected']);\n\n  var classes = classNames('filter-pf-category-select', className);\n\n  if (placeholder || filterCategories && filterCategories.length > 1) {\n    var title = void 0;\n\n    if (currentCategory) {\n      title = currentCategory.title || currentCategory;\n    } else {\n      title = placeholder || filterCategories[0].title || filterCategories[0];\n    }\n\n    var menuId = 'filterCategoryMenu';\n    menuId += id ? '_' + id : '';\n    var dropdownClasses = classNames('filter-pf-select-dropdown', {\n      'filter-selected': title !== placeholder\n    });\n    return React.createElement('div', _extends({\n      className: classes\n    }, props), React.createElement('div', {\n      className: 'filter-pf-select'\n    }, React.createElement(DropdownButton, {\n      title: title,\n      id: menuId,\n      className: dropdownClasses\n    }, filterCategories && filterCategories.map(function (item, index) {\n      var menuItemClasses = {\n        selected: item === currentCategory\n      };\n      return React.createElement(MenuItem, {\n        className: menuItemClasses,\n        key: item.id || index,\n        onSelect: function onSelect() {\n          return onFilterCategorySelected(item);\n        }\n      }, item.title || item);\n    }))), children);\n  }\n\n  return null;\n};\n\nFilterCategorySelector.propTypes = {\n  /** Children nodes */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** ID for the component, necessary for accessibility if there are multiple filters on a page */\n  id: PropTypes.string,\n\n  /** Array of filter categories, each can be a string or an object with a 'title' field */\n  filterCategories: PropTypes.array.isRequired,\n\n  /** Current selected category */\n  currentCategory: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /** Placeholder text when no category is selected */\n  placeholder: PropTypes.string,\n\n  /** function(field, value) - Callback to call when a category is added */\n  onFilterCategorySelected: PropTypes.func\n};\nFilterCategorySelector.defaultProps = {\n  children: null,\n  className: '',\n  id: '',\n  currentCategory: '',\n  placeholder: '',\n  onFilterCategorySelected: noop\n};\nexport default FilterCategorySelector;","map":null,"metadata":{},"sourceType":"module"}