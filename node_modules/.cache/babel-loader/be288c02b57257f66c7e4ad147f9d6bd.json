{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nvar CardLink = function CardLink(_ref) {\n  var disabled = _ref.disabled,\n      children = _ref.children,\n      className = _ref.className,\n      icon = _ref.icon,\n      props = _objectWithoutProperties(_ref, ['disabled', 'children', 'className', 'icon']);\n\n  var classes = classNames({\n    'card-pf-link-with-icon': icon,\n    disabled: disabled\n  }, className);\n  return React.createElement('p', null, React.createElement('a', _extends({\n    className: classes\n  }, props), icon, children));\n};\n\nCardLink.propTypes = {\n  /** Child node - contents of the element */\n  children: PropTypes.node.isRequired,\n\n  /** Additional element css classes */\n  className: PropTypes.string,\n\n  /** card link icon node */\n  icon: PropTypes.node,\n\n  /** href prop */\n  href: PropTypes.string,\n\n  /** is link prop */\n  disabled: PropTypes.bool\n};\nCardLink.defaultProps = {\n  className: '',\n  icon: null,\n  href: null,\n  disabled: false\n};\nexport default CardLink;","map":null,"metadata":{},"sourceType":"module"}