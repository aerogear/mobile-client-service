{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '../Dropdown';\nimport { Icon } from '../Icon'; // Must be a class component react-bootstrap passes a ref to this.\n// eslint-disable-next-line react/prefer-stateless-function\n\nvar InfoTipToggle = function (_React$Component) {\n  _inherits(InfoTipToggle, _React$Component);\n\n  function InfoTipToggle() {\n    _classCallCheck(this, InfoTipToggle);\n\n    return _possibleConstructorReturn(this, (InfoTipToggle.__proto__ || Object.getPrototypeOf(InfoTipToggle)).apply(this, arguments));\n  }\n\n  _createClass(InfoTipToggle, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          bsClass = _props.bsClass,\n          bsRole = _props.bsRole,\n          children = _props.children,\n          open = _props.open,\n          props = _objectWithoutProperties(_props, ['bsClass', 'bsRole', 'children', 'open']);\n\n      return React.createElement('a', _extends({\n        href: '#',\n        'aria-expanded': open\n      }, props), React.createElement(Icon, {\n        type: 'pf',\n        name: 'info'\n      }), ' ', children);\n    }\n  }]);\n\n  return InfoTipToggle;\n}(React.Component);\n\nInfoTipToggle.propTypes = _extends({}, Dropdown.propTypes, {\n  children: PropTypes.node,\n  open: PropTypes.bool,\n  className: PropTypes.string\n});\nInfoTipToggle.defaultProps = {\n  bsRole: 'toggle',\n  // eslint-disable-line react/default-props-match-prop-types\n  children: null,\n  open: false,\n  className: ''\n};\nexport default InfoTipToggle;","map":null,"metadata":{},"sourceType":"module"}