{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, Wizard, Icon, Button } from '../../../index';\nimport WizardPatternBody from './WizardPatternBody';\nimport { wizardStepShape } from './WizardPatternConstants';\n/**\n * WizardPattern - the Wizard Pattern component.\n */\n\nvar WizardPattern = function WizardPattern(_ref) {\n  var steps = _ref.steps,\n      activeStepIndex = _ref.activeStepIndex,\n      onStepChanged = _ref.onStepChanged,\n      onNext = _ref.onNext,\n      onBack = _ref.onBack,\n      nextStepDisabled = _ref.nextStepDisabled,\n      previousStepDisabled = _ref.previousStepDisabled,\n      cancelButtonDisabled = _ref.cancelButtonDisabled,\n      title = _ref.title,\n      loadingTitle = _ref.loadingTitle,\n      loadingMessage = _ref.loadingMessage,\n      show = _ref.show,\n      onHide = _ref.onHide,\n      onExited = _ref.onExited,\n      stepButtonsDisabled = _ref.stepButtonsDisabled,\n      cancelText = _ref.cancelText,\n      backText = _ref.backText,\n      nextText = _ref.nextText,\n      closeText = _ref.closeText,\n      loading = _ref.loading,\n      nextButtonRef = _ref.nextButtonRef,\n      bodyHeader = _ref.bodyHeader,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, ['steps', 'activeStepIndex', 'onStepChanged', 'onNext', 'onBack', 'nextStepDisabled', 'previousStepDisabled', 'cancelButtonDisabled', 'title', 'loadingTitle', 'loadingMessage', 'show', 'onHide', 'onExited', 'stepButtonsDisabled', 'cancelText', 'backText', 'nextText', 'closeText', 'loading', 'nextButtonRef', 'bodyHeader', 'children']);\n\n  var onFirstStep = activeStepIndex === 0;\n  var onFinalStep = activeStepIndex === steps.length - 1;\n\n  var onHideClick = function onHideClick() {\n    onHide(onFinalStep);\n  };\n\n  var onBackClick = function onBackClick() {\n    goToStep(Math.max(activeStepIndex - 1, 0));\n  };\n\n  var onNextClick = function onNextClick() {\n    goToStep(Math.min(activeStepIndex + 1, steps.length - 1));\n  };\n\n  var getStep = function getStep() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : activeStepIndex;\n    return steps[index];\n  };\n\n  var getPrevStep = function getPrevStep() {\n    var relativeToIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : activeStepIndex;\n    return relativeToIndex > 0 && steps[relativeToIndex - 1];\n  };\n\n  var getNextStep = function getNextStep() {\n    var relativeToIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : activeStepIndex;\n    return relativeToIndex < steps.length - 1 && steps[relativeToIndex + 1];\n  };\n\n  var activeStep = getStep();\n\n  var goToStep = function goToStep(newStepIndex) {\n    if (shouldPreventGoToStep(newStepIndex)) return;\n\n    if (newStepIndex === activeStepIndex + 1) {\n      var stepOnNextResult = activeStep.onNext && activeStep.onNext();\n      var propOnNextResult = onNext(newStepIndex);\n      var stepFailed = stepOnNextResult === false || propOnNextResult === false;\n      if (stepFailed) return;\n    }\n\n    if (newStepIndex === activeStepIndex - 1) {\n      var _stepFailed = onBack(newStepIndex) === false;\n\n      if (_stepFailed) return;\n    }\n\n    if (onStepChanged) onStepChanged(newStepIndex);\n  };\n\n  var shouldPreventGoToStep = function shouldPreventGoToStep(newStepIndex) {\n    var targetStep = getStep(newStepIndex);\n    var stepBeforeTarget = getPrevStep(newStepIndex);\n    var preventExitActive = activeStep.preventExit;\n    var preventEnterTarget = targetStep.preventEnter || stepBeforeTarget && stepBeforeTarget.isInvalid;\n    var nextStepClicked = newStepIndex > activeStepIndex;\n    return preventExitActive || preventEnterTarget || nextStepClicked ? nextStepDisabled : previousStepDisabled;\n  };\n\n  var activeStepStr = (activeStepIndex + 1).toString();\n  var prevStepUnreachable = previousStepDisabled || onFirstStep || activeStep.preventExit || getPrevStep().preventEnter; // nextStepUnreachable is still true onFinalStep, because the Next button turns into a Close button\n\n  var nextStepUnreachable = nextStepDisabled || activeStep.isInvalid || activeStep.preventExit || getNextStep().preventEnter;\n  return React.createElement(Wizard, _extends({\n    show: show,\n    onHide: onHideClick,\n    onExited: onExited\n  }, props), React.createElement(Wizard.Header, {\n    onClose: onHideClick,\n    title: title\n  }), React.createElement(Wizard.Body, null, bodyHeader, React.createElement(WizardPatternBody, {\n    loadingTitle: loadingTitle,\n    loadingMessage: loadingMessage,\n    loading: loading,\n    steps: steps,\n    activeStepIndex: activeStepIndex,\n    activeStepStr: activeStepStr,\n    goToStep: goToStep,\n    nextStepDisabled: nextStepDisabled,\n    stepButtonsDisabled: stepButtonsDisabled\n  })), React.createElement(Wizard.Footer, null, React.createElement(Button, {\n    bsStyle: 'default',\n    className: 'btn-cancel',\n    disabled: cancelButtonDisabled,\n    onClick: onHideClick\n  }, cancelText), React.createElement(Button, {\n    bsStyle: 'default',\n    onClick: onBackClick,\n    disabled: prevStepUnreachable\n  }, React.createElement(Icon, {\n    type: 'fa',\n    name: 'angle-left'\n  }), backText), React.createElement(Button, {\n    bsStyle: 'primary',\n    onClick: onFinalStep ? onHideClick : onNextClick,\n    disabled: nextStepUnreachable,\n    ref: nextButtonRef\n  }, onFinalStep ? closeText : React.createElement(React.Fragment, null, nextText, React.createElement(Icon, {\n    type: 'fa',\n    name: 'angle-right'\n  })))), children);\n};\n\nWizardPattern.propTypes = {\n  activeStepIndex: PropTypes.number.isRequired,\n  show: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onHide: PropTypes.func,\n  onExited: PropTypes.func,\n  onBack: PropTypes.func,\n  onNext: PropTypes.func,\n  onStepChanged: PropTypes.func,\n  loadingTitle: PropTypes.string,\n  loadingMessage: PropTypes.string,\n  loading: PropTypes.bool,\n  cancelText: PropTypes.string,\n  backText: PropTypes.string,\n  nextText: PropTypes.string,\n  closeText: PropTypes.string,\n  steps: PropTypes.arrayOf(PropTypes.shape(wizardStepShape)),\n  nextStepDisabled: PropTypes.bool,\n  previousStepDisabled: PropTypes.bool,\n  stepButtonsDisabled: PropTypes.bool,\n  cancelButtonDisabled: PropTypes.bool,\n  nextButtonRef: PropTypes.func,\n  bodyHeader: PropTypes.node,\n  children: PropTypes.node\n};\nWizardPattern.defaultProps = {\n  show: false,\n  title: '',\n  onHide: noop,\n  onExited: noop,\n  onBack: noop,\n  onNext: noop,\n  onStepChanged: noop,\n  loadingTitle: 'Loading Wizard...',\n  loadingMessage: 'Loading...',\n  loading: false,\n  cancelText: 'Cancel',\n  backText: 'Back',\n  nextText: 'Next',\n  closeText: 'Close',\n  steps: [],\n  nextStepDisabled: false,\n  previousStepDisabled: false,\n  stepButtonsDisabled: false,\n  cancelButtonDisabled: false,\n  nextButtonRef: noop,\n  bodyHeader: null,\n  children: null\n};\nWizardPattern.displayName = 'WizardPattern';\nexport default WizardPattern;","map":null,"metadata":{},"sourceType":"module"}