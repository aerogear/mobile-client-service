{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport PropTypes from 'prop-types';\n\nvar AsyncTypeAheadSelect = function (_React$Component) {\n  _inherits(AsyncTypeAheadSelect, _React$Component);\n\n  function AsyncTypeAheadSelect() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AsyncTypeAheadSelect);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AsyncTypeAheadSelect.__proto__ || Object.getPrototypeOf(AsyncTypeAheadSelect)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      options: _this.props.options,\n      isLoading: _this.props.isLoading\n    }, _this.onSearchStart = function () {\n      return _this.setState({\n        isLoading: true\n      });\n    }, _this.onSearchEnd = function (options) {\n      return _this.setState({\n        options: options,\n        isLoading: false\n      });\n    }, _this.handleSearch = function (query) {\n      _this.onSearchStart();\n\n      Promise.resolve(_this.props.onSearch(query)).then(function (options) {\n        return _this.onSearchEnd(options);\n      });\n    }, _this.render = function () {\n      return React.createElement(AsyncTypeahead, _extends({}, _this.props, {\n        onSearch: _this.handleSearch,\n        options: _this.state.options,\n        isLoading: _this.state.isLoading\n      }));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // query is the text string entered by the user.\n\n\n  return AsyncTypeAheadSelect;\n}(React.Component);\n\nAsyncTypeAheadSelect.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  options: PropTypes.array,\n  isLoading: PropTypes.bool\n};\nAsyncTypeAheadSelect.defaultProps = {\n  options: [],\n  isLoading: false\n};\nexport default AsyncTypeAheadSelect;","map":null,"metadata":{},"sourceType":"module"}