{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DualListItem from './DualListItem';\nimport { noop } from '../../../common/helpers';\n\nvar DualListItems = function DualListItems(_ref) {\n  var items = _ref.items,\n      filterTerm = _ref.filterTerm,\n      onChange = _ref.onChange,\n      side = _ref.side;\n  var menuItems = items.map(function (item, index) {\n    var children = item.children;\n    return React.createElement(React.Fragment, {\n      key: 'fragment-' + index\n    }, React.createElement(DualListItem, _extends({\n      className: children && 'parent'\n    }, item, {\n      key: 'item-' + index,\n      filterTerm: filterTerm,\n      onChange: onChange,\n      side: side\n    })), children && children.map(function (child, childIndex) {\n      return React.createElement(DualListItem, _extends({\n        className: 'child'\n      }, child, {\n        key: item.label + '-child' + childIndex,\n        filterTerm: filterTerm,\n        onChange: onChange,\n        side: side\n      }));\n    }));\n  });\n  return menuItems;\n};\n\nDualListItems.propTypes = {\n  /** An array of items to create list items elements uppon */\n  items: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    children: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string,\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n    }))\n  })),\n\n  /** The term which is flitering the list. */\n  filterTerm: PropTypes.string,\n\n  /** A function that is running when the item selected state is toggled. */\n  onChange: PropTypes.func,\n\n  /** The side of the selector. */\n  side: PropTypes.string\n};\nDualListItems.defaultProps = {\n  items: [],\n  filterTerm: null,\n  onChange: noop,\n  side: null\n};\nexport default DualListItems;","map":null,"metadata":{},"sourceType":"module"}