{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nvar BulletChartRange = function BulletChartRange(_ref) {\n  var className = _ref.className,\n      value = _ref.value,\n      percent = _ref.percent,\n      maxValue = _ref.maxValue,\n      index = _ref.index,\n      color = _ref.color,\n      vertical = _ref.vertical,\n      props = _objectWithoutProperties(_ref, ['className', 'value', 'percent', 'maxValue', 'index', 'color', 'vertical']);\n\n  var rangeClasses = classNames('bullet-chart-pf-range-bar', 'range-' + index, className);\n\n  if (value > 0 && (percent ? value <= 100 : value <= maxValue)) {\n    var showValue = percent ? value : value / maxValue * 100;\n    var rangeStyle = {\n      width: vertical ? undefined : showValue + '%',\n      height: vertical ? showValue + '%' : undefined,\n      zIndex: Math.round(100 - showValue)\n    };\n\n    if (color) {\n      rangeStyle.backgroundColor = color;\n    }\n\n    return React.createElement('div', _extends({\n      className: rangeClasses,\n      style: rangeStyle\n    }, props));\n  }\n\n  return null;\n};\n\nBulletChartRange.propTypes = {\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** End value for the range */\n  value: PropTypes.number.isRequired,\n\n  /** Option to use end value as a percentage, default is true */\n  percent: PropTypes.bool,\n\n  /** Maximum value when not using percents (ignored if percents is true) */\n  maxValue: PropTypes.number,\n\n  /** Index for the range (1-3) */\n  index: PropTypes.number.isRequired,\n\n  /** Optional color for the range, should use defaults but provided for flexibility */\n  color: PropTypes.string,\n\n  /** Vertical chart, default false */\n  vertical: PropTypes.bool\n};\nBulletChartRange.defaultProps = {\n  className: '',\n  percent: true,\n  maxValue: 100,\n  color: '',\n  vertical: false\n};\nexport default BulletChartRange;","map":null,"metadata":{},"sourceType":"module"}