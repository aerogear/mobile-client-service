{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { noop } from '../../common/helpers';\n/**\n * WizardStep component for Patternfly React\n */\n\nvar WizardStep = function WizardStep(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      stepIndex = _ref.stepIndex,\n      step = _ref.step,\n      label = _ref.label,\n      title = _ref.title,\n      activeStep = _ref.activeStep,\n      _onClick = _ref.onClick,\n      props = _objectWithoutProperties(_ref, ['children', 'className', 'stepIndex', 'step', 'label', 'title', 'activeStep', 'onClick']);\n\n  var classes = classNames('wizard-pf-step', {\n    active: '' + step === '' + activeStep\n  }, className);\n  return React.createElement('li', _extends({\n    className: classes\n  }, props), React.createElement('a', {\n    href: '#',\n    onClick: function onClick(e) {\n      e.preventDefault();\n\n      _onClick(stepIndex);\n    }\n  }, React.createElement('span', {\n    className: 'wizard-pf-step-number'\n  }, label), React.createElement('span', {\n    className: 'wizard-pf-step-title'\n  }, title), children));\n};\n\nWizardStep.propTypes = {\n  /** Children nodes */\n  children: PropTypes.node,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** The wizard step index */\n  stepIndex: PropTypes.number.isRequired,\n\n  /** The wizard step for this step */\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** The wizard step number label */\n  label: PropTypes.string,\n\n  /** The wizard step title */\n  title: PropTypes.string,\n\n  /** The active step */\n  activeStep: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** Step click handler */\n  onClick: PropTypes.func\n};\nWizardStep.defaultProps = {\n  children: null,\n  className: '',\n  step: '',\n  label: '',\n  title: '',\n  activeStep: '',\n  onClick: noop\n};\nexport default WizardStep;","map":null,"metadata":{},"sourceType":"module"}