{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { patternfly } from '../../../common/patternfly';\nimport { Tooltip } from '../../Tooltip/index';\nimport { noop } from '../../../common/helpers';\nimport BulletChartValue from './BulletChartValue';\nimport BulletChartRange from './BulletChartRange';\nimport BulletChartAxis from './BulletChartAxis';\nimport BulletChartAxisTic from './BulletChartAxisTic';\nimport BulletChartLegend from './BulletChartLegend';\nimport BulletChartLegendItem from './BulletChartLegendItem';\nimport BulletChartThreshold from './BulletChartThreshold';\nimport BulletChartTitle from './BulletChartTitle';\n\nvar randomId = function randomId() {\n  return Date.now();\n};\n\nvar defaultPrimaryColors = [patternfly.pfPaletteColors.blue300, patternfly.pfPaletteColors.blue400, patternfly.pfPaletteColors.blue500, patternfly.pfPaletteColors.blue600];\nvar defaultExtendedColors = [patternfly.pfPaletteColors.blue400, patternfly.pfPaletteColors.lightBlue400, patternfly.pfPaletteColors.cyan400, patternfly.pfPaletteColors.green400, patternfly.pfPaletteColors.lightGreen400, patternfly.pfPaletteColors.gold400, patternfly.pfPaletteColors.orange400, patternfly.pfPaletteColors.red300, patternfly.pfPaletteColors.purple400];\n\nvar BulletChart = function BulletChart(_ref) {\n  var vertical = _ref.vertical,\n      stacked = _ref.stacked,\n      label = _ref.label,\n      details = _ref.details,\n      values = _ref.values,\n      percents = _ref.percents,\n      maxValue = _ref.maxValue,\n      useDots = _ref.useDots,\n      useExtendedColors = _ref.useExtendedColors,\n      thresholdWarning = _ref.thresholdWarning,\n      thresholdWarningLegendText = _ref.thresholdWarningLegendText,\n      thresholdWarningLegendTextFunction = _ref.thresholdWarningLegendTextFunction,\n      thresholdWarningTooltipFunction = _ref.thresholdWarningTooltipFunction,\n      thresholdError = _ref.thresholdError,\n      thresholdErrorLegendText = _ref.thresholdErrorLegendText,\n      thresholdErrorLegendTextFunction = _ref.thresholdErrorLegendTextFunction,\n      thresholdErrorTooltipFunction = _ref.thresholdErrorTooltipFunction,\n      ranges = _ref.ranges,\n      showAxis = _ref.showAxis,\n      customAxis = _ref.customAxis,\n      showLegend = _ref.showLegend,\n      customLegend = _ref.customLegend,\n      className = _ref.className;\n  var classes = classNames('bullet-chart-pf', {\n    'bullet-chart-pf-vertical': vertical\n  }, className); // Order the ranges into an array of 3 ranges lowest to highest, insert 0's if necessary\n  // this is to keep darkest as highest and use darkest colors first (ie. 1 range still uses darkest)\n\n  var rangeValues = [];\n\n  if (ranges) {\n    for (var i = 0; i < 3; i++) {\n      if (ranges.length > i) {\n        rangeValues.push(ranges[i]);\n      } else {\n        rangeValues.push({\n          value: 0,\n          title: ''\n        });\n      }\n    }\n\n    rangeValues.sort(function (range1, range2) {\n      return range1.value - range2.value;\n    });\n  }\n\n  var displayValues = [].concat(_toConsumableArray(values));\n  var defaultColors = useExtendedColors ? defaultExtendedColors : defaultPrimaryColors;\n  displayValues.forEach(function (value, index) {\n    if (!value.color && defaultColors[index]) {\n      value.color = defaultColors[index];\n    }\n  });\n\n  if (!stacked) {\n    displayValues.sort(function (value1, value2) {\n      return value1.value - value2.value;\n    });\n  }\n\n  var renderValues = function renderValues() {\n    var prevValue = 0;\n\n    var getPrevValue = function getPrevValue(nextValue) {\n      if (stacked) {\n        var retVal = prevValue;\n        prevValue += nextValue;\n        return retVal;\n      }\n\n      return 0;\n    };\n\n    return React.createElement('div', {\n      className: 'bullet-chart-pf-values-container'\n    }, displayValues.map(function (value, index) {\n      return React.createElement(BulletChartValue, {\n        key: value.title + '-' + index,\n        value: value,\n        percent: percents,\n        maxValue: maxValue,\n        prevValue: getPrevValue(value.value),\n        dot: useDots,\n        vertical: vertical\n      });\n    }));\n  };\n\n  var renderLegend = function renderLegend() {\n    if (showLegend) {\n      if (customLegend) {\n        return customLegend;\n      }\n\n      var warningThreshold = thresholdWarningLegendTextFunction(thresholdWarning) || thresholdWarningLegendText;\n      var errorThreshold = thresholdErrorLegendTextFunction(thresholdError) || thresholdErrorLegendText;\n\n      var thresholdTipFunction = function thresholdTipFunction(title, value) {\n        if (thresholdWarningTooltipFunction) {\n          return thresholdWarningTooltipFunction(title, value);\n        }\n\n        var tipText = title + ': ' + value + (percents ? '%' : '');\n        return React.createElement(Tooltip, {\n          id: randomId()\n        }, tipText);\n      };\n\n      return React.createElement(BulletChartLegend, null, displayValues.map(function (value, index) {\n        var tooltipFunction = function tooltipFunction() {\n          if (value.tooltipFunction) {\n            return value.tooltipFunction(value.value, value.title);\n          }\n\n          var tipText = value.title + ': ' + value.value + (percents ? '%' : '');\n          return React.createElement(Tooltip, {\n            id: value.tooltipId || randomId()\n          }, tipText);\n        };\n\n        var legendTextFunction = value.legendTextFunction || noop;\n        return React.createElement(BulletChartLegendItem, {\n          key: 'value-' + index,\n          title: legendTextFunction(value) || value.legendText || value.title,\n          value: value.value,\n          color: value.color,\n          tooltipFunction: tooltipFunction\n        });\n      }), rangeValues.map(function (range, index) {\n        if (range.value > 0 && (percents ? range.value <= 100 : range.value <= maxValue)) {\n          var tooltipFunction = function tooltipFunction() {\n            if (range.tooltipFunction) {\n              return range.tooltipFunction(range.value, range.title);\n            }\n\n            var tipText = range.title + ': ' + range.value + (percents ? '%' : '');\n            return React.createElement(Tooltip, {\n              id: range.tooltipId || randomId()\n            }, tipText);\n          };\n\n          var legendTextFunction = range.legendTextFunction || noop;\n          return React.createElement(BulletChartLegendItem, {\n            key: 'range-' + index,\n            title: legendTextFunction(range) || range.legendText || range.title,\n            value: range.value,\n            boxClassName: 'range-' + index,\n            color: range.color,\n            tooltipFunction: tooltipFunction\n          });\n        }\n\n        return null;\n      }), warningThreshold && React.createElement(BulletChartLegendItem, {\n        title: warningThreshold,\n        value: thresholdWarning,\n        boxClassName: 'warning',\n        tooltipFunction: thresholdTipFunction\n      }), errorThreshold && React.createElement(BulletChartLegendItem, {\n        title: errorThreshold,\n        value: thresholdError,\n        boxClassName: 'error',\n        tooltipFunction: thresholdTipFunction\n      }));\n    }\n\n    return null;\n  };\n\n  var renderChartData = function renderChartData() {\n    return React.createElement('div', {\n      className: 'bullet-chart-pf-data-container'\n    }, renderValues(), React.createElement(BulletChartThreshold, {\n      className: 'warning',\n      threshold: thresholdWarning,\n      vertical: vertical,\n      percent: percents,\n      maxValue: maxValue\n    }), React.createElement(BulletChartThreshold, {\n      className: 'error',\n      threshold: thresholdError,\n      vertical: vertical,\n      percent: percents,\n      maxValue: maxValue\n    }), rangeValues.map(function (range, index) {\n      return React.createElement(BulletChartRange, {\n        key: range.value + '-' + index,\n        value: range.value,\n        color: range.color,\n        percent: percents,\n        maxValue: maxValue,\n        index: index + 1,\n        vertical: vertical\n      });\n    }));\n  };\n\n  var renderChartAxis = function renderChartAxis() {\n    if (customAxis) {\n      return customAxis;\n    }\n\n    return React.createElement(BulletChartAxis, null, React.createElement(BulletChartAxisTic, {\n      value: 0,\n      vertical: vertical\n    }), React.createElement(BulletChartAxisTic, {\n      value: 25,\n      text: percents ? undefined : '' + Math.floor(maxValue * 0.25),\n      vertical: vertical\n    }), React.createElement(BulletChartAxisTic, {\n      value: 50,\n      text: percents ? undefined : '' + Math.floor(maxValue * 0.5),\n      vertical: vertical\n    }), React.createElement(BulletChartAxisTic, {\n      value: 75,\n      text: percents ? undefined : '' + Math.floor(maxValue * 0.75),\n      vertical: vertical\n    }), React.createElement(BulletChartAxisTic, {\n      value: 100,\n      text: percents ? undefined : '' + Math.floor(maxValue),\n      vertical: vertical\n    }));\n  };\n\n  var renderChartContainer = function renderChartContainer() {\n    var containerClasses = classNames('bullet-chart-pf-container', {\n      'show-axis': showAxis\n    });\n    var chartContainer = React.createElement('div', {\n      className: containerClasses\n    }, renderChartData(), showAxis && renderChartAxis());\n\n    if (vertical) {\n      return React.createElement('div', {\n        className: 'bullet-chart-pf-vertical-data-container'\n      }, chartContainer);\n    }\n\n    return chartContainer;\n  };\n\n  return React.createElement('div', {\n    className: classes\n  }, React.createElement('div', {\n    className: 'bullet-chart-pf-chart'\n  }, React.createElement(BulletChartTitle, {\n    label: label,\n    details: details\n  }), renderChartContainer(), React.createElement('span', {\n    className: 'bullet-chart-pf-overflow'\n  })), renderLegend());\n};\n\nBulletChart.propTypes = {\n  /** Option to display the bullet chart vertically, default is false */\n  vertical: PropTypes.bool,\n\n  /** Option to stack values (each value is in addition to previous value), default is false */\n  stacked: PropTypes.bool,\n\n  /** Text to display as the main label for the chart */\n  label: PropTypes.string,\n\n  /** Text to display for details of the chart */\n  details: PropTypes.string,\n\n  /** Array of values, value, title (for legend and tooltip), color, tooltip function(value, title), legendText(optional),\n   * legendTextFunction(value). The legendTextFunction takes priority, then the legendTextFunction, then the default\n   * legend text.\n   * For Primary colors the first four values can use default colors, for Extended colors the first nine\n   * values use default colors, further values the color MUST be specified. */\n  values: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    color: PropTypes.string,\n    tooltipFunction: PropTypes.func,\n    legendText: PropTypes.string,\n    legendTextFunction: PropTypes.func\n  })).isRequired,\n\n  /** Option to use values as percentages, default is true */\n  percents: PropTypes.bool,\n\n  /** Maximum value when not using percents (ignored if percents is true) */\n  maxValue: PropTypes.number,\n\n  /** Use a dot rather than a bar to depict values, default false */\n  useDots: PropTypes.bool,\n\n  /** Use extended color palette for default colors, default false */\n  useExtendedColors: PropTypes.bool,\n\n  /** Warning threshold (optional), warning measure line drawn at this point */\n  thresholdWarning: PropTypes.number,\n\n  /** Warning threshold legend text (optional), text to show in the legend for the warning threshold */\n  thresholdWarningLegendText: PropTypes.string,\n\n  /** Warning threshold legend text function(warningValue), function to return text to show in the legend for the warning threshold */\n  thresholdWarningLegendTextFunction: PropTypes.func,\n\n  /** Warning threshold legend tooltip function(text, value), function to return tooltip for the legend */\n  thresholdWarningTooltipFunction: PropTypes.func,\n\n  /** Error threshold (optional), error measure line drawn at this point */\n  thresholdError: PropTypes.number,\n\n  /** Error threshold legend text (optional), text to show in the legend for the warning threshold */\n  thresholdErrorLegendText: PropTypes.string,\n\n  /** Error threshold legend text function(text, value), function to return text to show in the legend for the warning threshold */\n  thresholdErrorLegendTextFunction: PropTypes.func,\n\n  /** Error threshold legend tooltip function(warningValue), function to return tooltip for the legend */\n  thresholdErrorTooltipFunction: PropTypes.func,\n\n  /** Ranges, array of range bars (3 maximum, additional ranges will be ignored) */\n  ranges: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    color: PropTypes.string,\n    tooltipFunction: PropTypes.func,\n    legendText: PropTypes.string,\n    legendTextFunction: PropTypes.func\n  })),\n\n  /** Option to show the axis, default is true */\n  showAxis: PropTypes.bool,\n\n  /** Custom Axis */\n  customAxis: PropTypes.node,\n\n  /** Show the legend, default false */\n  showLegend: PropTypes.bool,\n\n  /** Custom Legend */\n  customLegend: PropTypes.node,\n\n  /** User's custom classes */\n  className: PropTypes.string\n};\nBulletChart.defaultProps = {\n  vertical: false,\n  stacked: false,\n  label: null,\n  details: null,\n  percents: true,\n  maxValue: 100,\n  useDots: false,\n  useExtendedColors: false,\n  thresholdWarning: 70,\n  thresholdWarningLegendText: null,\n  thresholdWarningLegendTextFunction: noop,\n  thresholdWarningTooltipFunction: null,\n  thresholdError: 90,\n  thresholdErrorLegendText: null,\n  thresholdErrorLegendTextFunction: noop,\n  thresholdErrorTooltipFunction: null,\n  ranges: null,\n  showAxis: true,\n  customAxis: null,\n  showLegend: false,\n  customLegend: null,\n  className: null\n};\nBulletChart.DEFAULT_PRIMARY_COLORS = defaultPrimaryColors;\nBulletChart.DEFAULT_EXTENDED_COLORS = defaultExtendedColors;\nBulletChart.Title = BulletChartTitle;\nBulletChart.Value = BulletChartValue;\nBulletChart.Range = BulletChartRange;\nBulletChart.Axis = BulletChartAxis;\nBulletChart.AxisTic = BulletChartAxisTic;\nBulletChart.Legend = BulletChartLegend;\nBulletChart.LegendItem = BulletChartLegendItem;\nBulletChart.Threshold = BulletChartThreshold;\nexport default BulletChart;","map":null,"metadata":{},"sourceType":"module"}