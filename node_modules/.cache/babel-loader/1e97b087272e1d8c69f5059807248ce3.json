{"ast":null,"code":"(function (window) {\n  'use strict'; // Ensure we are assigning these to the patternfly property of the window argument, and not the implicit global patternfly\n\n  var patternfly = window.patternfly; // Util: PatternFly C3 Chart Defaults\n\n  patternfly.pfSetDonutChartTitle = function (selector, primary, secondary) {\n    var donutChartRightTitle = window.d3.select(selector).select('text.c3-chart-arcs-title');\n    donutChartRightTitle.text(\"\");\n    donutChartRightTitle.insert('tspan').text(primary).classed('donut-title-big-pf', true).attr('dy', 0).attr('x', 0);\n    donutChartRightTitle.insert('tspan').text(secondary).classed('donut-title-small-pf', true).attr('dy', 20).attr('x', 0);\n  };\n\n  patternfly.pfDonutTooltipContents = function (d, defaultTitleFormat, defaultValueFormat, color) {\n    return '<table class=\"c3-tooltip\">' + '  <tr>' + '    <td><span style=\"background-color:' + color(d[0].id) + '\"></span>' + '<strong>' + d[0].value + '</strong> ' + d[0].name + '</td>' + '    <td>' + Math.round(d[0].ratio * 1000) / 10 + '%</td>' + '  </tr>' + '</table>';\n  };\n\n  patternfly.pfGetUtilizationDonutTooltipContentsFn = function (units) {\n    return function (d) {\n      return '<span class=\"donut-tooltip-pf\" style=\"white-space: nowrap;\">' + Math.round(d[0].ratio * 1000) / 10 + '%' + ' ' + units + ' ' + d[0].name + '</span>';\n    };\n  };\n\n  patternfly.pfGetBarChartTooltipContentsFn = function (categories) {\n    return function (d) {\n      var name = categories ? categories[d[0].index] : d[0].index;\n      return '<table class=\"c3-tooltip\">' + '  <tr>' + '    <td><strong>' + name + ':</td>' + '    <td>' + d[0].value + '</td>' + '  </tr>' + '</table>';\n    };\n  };\n\n  patternfly.pfSingleLineChartTooltipContentsFn = function (categories) {\n    return function (d) {\n      var name = categories ? categories[d[0].index] : d[0].index;\n      return '<table class=\"c3-tooltip\">' + '  <tr>' + '    <td><strong>' + name + ':</td>' + '    <td>' + d[0].value + '</td>' + '  </tr>' + '</table>';\n    };\n  };\n\n  patternfly.pfPieTooltipContents = function (d, defaultTitleFormat, defaultValueFormat, color) {\n    return patternfly.pfDonutTooltipContents(d, defaultTitleFormat, defaultValueFormat, color);\n  };\n\n  patternfly.c3ChartDefaults = function () {\n    var getDefaultColors = function getDefaultColors() {\n      return {\n        pattern: [patternfly.pfPaletteColors.blue, patternfly.pfPaletteColors.blue300, patternfly.pfPaletteColors.green, patternfly.pfPaletteColors.orange, patternfly.pfPaletteColors.red]\n      };\n    },\n        getDefaultBarGrid = function getDefaultBarGrid() {\n      return {\n        y: {\n          show: true\n        }\n      };\n    },\n        getDefaultBarTooltip = function getDefaultBarTooltip(categories) {\n      return {\n        contents: patternfly.pfGetBarChartTooltipContentsFn(categories)\n      };\n    },\n        getDefaultBarLegend = function getDefaultBarLegend() {\n      return {\n        show: false\n      };\n    },\n        getDefaultBarConfig = function getDefaultBarConfig(categories) {\n      return {\n        color: this.getDefaultColors(),\n        grid: this.getDefaultBarGrid(),\n        tooltip: this.getDefaultBarTooltip(categories),\n        legend: this.getDefaultBarLegend()\n      };\n    },\n        getDefaultGroupedBarGrid = function getDefaultGroupedBarGrid() {\n      return {\n        y: {\n          show: true\n        }\n      };\n    },\n        getDefaultGroupedBarLegend = function getDefaultGroupedBarLegend() {\n      return {\n        show: true,\n        position: 'bottom'\n      };\n    },\n        getDefaultGroupedBarConfig = function getDefaultGroupedBarConfig() {\n      return {\n        color: this.getDefaultColors(),\n        grid: this.getDefaultGroupedBarGrid(),\n        legend: this.getDefaultGroupedBarLegend()\n      };\n    },\n        getDefaultStackedBarGrid = function getDefaultStackedBarGrid() {\n      return {\n        y: {\n          show: true\n        }\n      };\n    },\n        getDefaultStackedBarLegend = function getDefaultStackedBarLegend() {\n      return {\n        show: true,\n        position: 'bottom'\n      };\n    },\n        getDefaultStackedBarConfig = function getDefaultStackedBarConfig() {\n      return {\n        color: this.getDefaultColors(),\n        grid: this.getDefaultStackedBarGrid(),\n        legend: this.getDefaultStackedBarLegend()\n      };\n    },\n        getDefaultDonut = function getDefaultDonut(title) {\n      return {\n        title: title,\n        label: {\n          show: false\n        },\n        width: 11\n      };\n    },\n        getDefaultDonutSize = function getDefaultDonutSize() {\n      return {\n        height: 171 // produces a diameter of 150 and a centered chart when there is no legend\n        // Don't set a width here, the default is to center horizontally in the parent container\n\n      };\n    },\n        getDefaultDonutColors = function getDefaultDonutColors() {\n      return {\n        pattern: [patternfly.pfPaletteColors.blue, patternfly.pfPaletteColors.black300]\n      };\n    },\n        getDefaultRelationshipDonutColors = function getDefaultRelationshipDonutColors() {\n      return {\n        pattern: [patternfly.pfPaletteColors.blue, patternfly.pfPaletteColors.red100, patternfly.pfPaletteColors.orange400, patternfly.pfPaletteColors.green400, patternfly.pfPaletteColors.cyan500, patternfly.pfPaletteColors.gold200]\n      };\n    },\n        getDefaultDonutTooltip = function getDefaultDonutTooltip() {\n      return {\n        show: false\n      };\n    },\n        getDefaultDonutLegend = function getDefaultDonutLegend() {\n      return {\n        show: false\n      };\n    },\n        getDefaultDonutConfig = function getDefaultDonutConfig(title) {\n      return {\n        donut: this.getDefaultDonut(title),\n        size: this.getDefaultDonutSize(),\n        legend: this.getDefaultDonutLegend(),\n        color: this.getDefaultDonutColors(),\n        tooltip: this.getDefaultDonutTooltip()\n      };\n    },\n        getDefaultRelationshipDonutConfig = function getDefaultRelationshipDonutConfig(title) {\n      return {\n        donut: this.getDefaultDonut(title),\n        size: this.getDefaultDonutSize(),\n        legend: this.getDefaultDonutLegend(),\n        color: this.getDefaultRelationshipDonutColors(),\n        tooltip: this.getDefaultDonutTooltip()\n      };\n    },\n        getDefaultPie = function getDefaultPie() {\n      return {\n        expand: true,\n        label: {\n          show: false\n        }\n      };\n    },\n        getDefaultPieSize = function getDefaultPieSize() {\n      return {\n        height: 171 // produces a diameter of 150 and a centered chart when there is no legend\n        // Don't set a width here, default is to center horizontally in the parent container\n\n      };\n    },\n        getDefaultPieColors = function getDefaultPieColors() {\n      return {\n        pattern: [patternfly.pfPaletteColors.blue, patternfly.pfPaletteColors.black300]\n      };\n    },\n        getDefaultPieTooltip = function getDefaultPieTooltip() {\n      return {\n        contents: patternfly.pfPieTooltipContents\n      };\n    },\n        getDefaultPieLegend = function getDefaultPieLegend() {\n      return {\n        show: false\n      };\n    },\n        getDefaultPieConfig = function getDefaultPieConfig() {\n      return {\n        pie: this.getDefaultPie(),\n        size: this.getDefaultPieSize(),\n        legend: this.getDefaultPieLegend(),\n        color: this.getDefaultPieColors(),\n        tooltip: this.getDefaultPieTooltip()\n      };\n    },\n        getDefaultSparklineArea = function getDefaultSparklineArea() {\n      return {\n        zerobased: true\n      };\n    },\n        getDefaultSparklineSize = function getDefaultSparklineSize() {\n      return {\n        height: 60\n      };\n    },\n        getDefaultSparklineAxis = function getDefaultSparklineAxis() {\n      return {\n        x: {\n          show: false\n        },\n        y: {\n          show: false\n        }\n      };\n    },\n        getDefaultSparklineLegend = function getDefaultSparklineLegend() {\n      return {\n        show: false\n      };\n    },\n        getDefaultSparklinePoint = function getDefaultSparklinePoint() {\n      return {\n        r: 1,\n        focus: {\n          expand: {\n            r: 4\n          }\n        }\n      };\n    },\n        getDefaultSparklineTooltip = function getDefaultSparklineTooltip() {\n      return {\n        // because a sparkline should only contain a single data column,\n        // the tooltip will only work for a single data column\n        contents: function contents(d) {\n          return '<span class=\"c3-tooltip-sparkline\">' + d[0].value + ' ' + d[0].name + '</span>';\n        }\n      };\n    },\n        getDefaultSparklineConfig = function getDefaultSparklineConfig() {\n      return {\n        area: getDefaultSparklineArea(),\n        size: getDefaultSparklineSize(),\n        axis: getDefaultSparklineAxis(),\n        color: getDefaultColors(),\n        legend: getDefaultSparklineLegend(),\n        point: getDefaultSparklinePoint(),\n        tooltip: getDefaultSparklineTooltip()\n      };\n    },\n        getDefaultLineAxis = function getDefaultLineAxis() {\n      return {\n        x: {\n          show: true\n        },\n        y: {\n          show: true\n        }\n      };\n    },\n        getDefaultLineGrid = function getDefaultLineGrid() {\n      return {\n        x: {\n          show: false\n        },\n        y: {\n          show: true\n        }\n      };\n    },\n        getDefaultLineLegend = function getDefaultLineLegend() {\n      return {\n        show: true\n      };\n    },\n        getDefaultLinePoint = function getDefaultLinePoint() {\n      return {\n        r: 3,\n        focus: {\n          expand: {\n            r: 5\n          }\n        }\n      };\n    },\n        getDefaultLineConfig = function getDefaultLineConfig() {\n      return {\n        axis: getDefaultLineAxis(),\n        grid: getDefaultLineGrid(),\n        color: getDefaultColors(),\n        legend: getDefaultLineLegend(),\n        point: getDefaultLinePoint()\n      };\n    },\n        getDefaultSingleLineTooltip = function getDefaultSingleLineTooltip() {\n      return {\n        contents: patternfly.pfGetBarChartTooltipContentsFn()\n      };\n    },\n        getDefaultSingleLineLegend = function getDefaultSingleLineLegend() {\n      return {\n        show: false\n      };\n    },\n        getDefaultSingleLineConfig = function getDefaultSingleLineConfig() {\n      return {\n        axis: getDefaultLineAxis(),\n        grid: getDefaultLineGrid(),\n        color: getDefaultColors(),\n        legend: getDefaultSingleLineLegend(),\n        point: getDefaultLinePoint(),\n        tooltip: getDefaultSingleLineTooltip()\n      };\n    },\n        getDefaultAreaAxis = function getDefaultAreaAxis() {\n      return getDefaultLineAxis();\n    },\n        getDefaultAreaGrid = function getDefaultAreaGrid() {\n      return getDefaultLineGrid();\n    },\n        getDefaultAreaLegend = function getDefaultAreaLegend() {\n      return getDefaultLineLegend();\n    },\n        getDefaultAreaPoint = function getDefaultAreaPoint() {\n      return getDefaultLinePoint();\n    },\n        getDefaultAreaConfig = function getDefaultAreaConfig() {\n      return {\n        axis: getDefaultAreaAxis(),\n        grid: getDefaultAreaGrid(),\n        color: getDefaultColors(),\n        legend: getDefaultAreaLegend(),\n        point: getDefaultAreaPoint()\n      };\n    },\n        getDefaultSingleAreaTooltip = function getDefaultSingleAreaTooltip() {\n      return {\n        contents: patternfly.pfGetBarChartTooltipContentsFn()\n      };\n    },\n        getDefaultSingleAreaLegend = function getDefaultSingleAreaLegend() {\n      return getDefaultSingleLineLegend();\n    },\n        getDefaultSingleAreaConfig = function getDefaultSingleAreaConfig() {\n      return {\n        axis: getDefaultAreaAxis(),\n        grid: getDefaultAreaGrid(),\n        color: getDefaultColors(),\n        legend: getDefaultSingleAreaLegend(),\n        point: getDefaultAreaPoint(),\n        tooltip: getDefaultSingleAreaTooltip()\n      };\n    };\n\n    return {\n      getDefaultColors: getDefaultColors,\n      getDefaultBarGrid: getDefaultBarGrid,\n      getDefaultBarTooltip: getDefaultBarTooltip,\n      getDefaultBarLegend: getDefaultBarLegend,\n      getDefaultBarConfig: getDefaultBarConfig,\n      getDefaultGroupedBarGrid: getDefaultGroupedBarGrid,\n      getDefaultGroupedBarLegend: getDefaultGroupedBarLegend,\n      getDefaultGroupedBarConfig: getDefaultGroupedBarConfig,\n      getDefaultStackedBarGrid: getDefaultStackedBarGrid,\n      getDefaultStackedBarLegend: getDefaultStackedBarLegend,\n      getDefaultStackedBarConfig: getDefaultStackedBarConfig,\n      getDefaultDonut: getDefaultDonut,\n      getDefaultDonutSize: getDefaultDonutSize,\n      getDefaultDonutColors: getDefaultDonutColors,\n      getDefaultDonutTooltip: getDefaultDonutTooltip,\n      getDefaultDonutLegend: getDefaultDonutLegend,\n      getDefaultDonutConfig: getDefaultDonutConfig,\n      getDefaultRelationshipDonutConfig: getDefaultRelationshipDonutConfig,\n      getDefaultPie: getDefaultPie,\n      getDefaultPieSize: getDefaultPieSize,\n      getDefaultPieColors: getDefaultPieColors,\n      getDefaultRelationshipDonutColors: getDefaultRelationshipDonutColors,\n      getDefaultPieTooltip: getDefaultPieTooltip,\n      getDefaultPieLegend: getDefaultPieLegend,\n      getDefaultPieConfig: getDefaultPieConfig,\n      getDefaultSparklineArea: getDefaultSparklineArea,\n      getDefaultSparklineSize: getDefaultSparklineSize,\n      getDefaultSparklineAxis: getDefaultSparklineAxis,\n      getDefaultSparklineLegend: getDefaultSparklineLegend,\n      getDefaultSparklinePoint: getDefaultSparklinePoint,\n      getDefaultSparklineTooltip: getDefaultSparklineTooltip,\n      getDefaultSparklineConfig: getDefaultSparklineConfig,\n      getDefaultLineAxis: getDefaultLineAxis,\n      getDefaultLineGrid: getDefaultLineGrid,\n      getDefaultLineLegend: getDefaultLineLegend,\n      getDefaultLinePoint: getDefaultLinePoint,\n      getDefaultLineConfig: getDefaultLineConfig,\n      getDefaultSingleLineTooltip: getDefaultSingleLineTooltip,\n      getDefaultSingleLineConfig: getDefaultSingleLineConfig,\n      getDefaultAreaAxis: getDefaultAreaAxis,\n      getDefaultAreaGrid: getDefaultAreaGrid,\n      getDefaultAreaLegend: getDefaultAreaLegend,\n      getDefaultAreaPoint: getDefaultAreaPoint,\n      getDefaultAreaConfig: getDefaultAreaConfig,\n      getDefaultSingleAreaTooltip: getDefaultSingleAreaTooltip,\n      getDefaultSingleAreaConfig: getDefaultSingleAreaConfig\n    };\n  };\n})(typeof window !== 'undefined' ? window : global);","map":null,"metadata":{},"sourceType":"script"}