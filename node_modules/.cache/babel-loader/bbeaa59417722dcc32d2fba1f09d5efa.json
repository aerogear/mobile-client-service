{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport LoginCardInput from './LoginCardInput';\nimport { KEY_CODES, KEYS } from '../../../../common/helpers';\n\nvar LoginCardWithValidation = function (_React$Component) {\n  _inherits(LoginCardWithValidation, _React$Component);\n\n  function LoginCardWithValidation() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, LoginCardWithValidation);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = LoginCardWithValidation.__proto__ || Object.getPrototypeOf(LoginCardWithValidation)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      usernameField: {\n        value: '',\n        errorType: null,\n        isFocused: false,\n        showError: false\n      },\n      passwordField: {\n        value: '',\n        errorType: null,\n        warningType: null,\n        isFocused: false,\n        showError: false\n      },\n      isCapsLock: false,\n      form: {\n        showError: _this.props.topErrorOnly ? true : _this.props.showError,\n        submitError: _this.props.submitError,\n        disableSubmit: true,\n        isSubmitting: _this.props.isSubmitting,\n        topErrorOnly: _this.props.topErrorOnly,\n        errors: [_this.props.submitError]\n      }\n    }, _this.shouldDisableSubmit = function (inputType, updatedInputValue) {\n      if (updatedInputValue.length < 1) {\n        return true;\n      }\n\n      var otherInputType = inputType === 'usernameField' ? 'passwordField' : 'usernameField';\n      var otherInputValue = _this.state[otherInputType].value;\n      return otherInputValue.length < 1;\n    }, _this.onInputChange = function (e, inputType) {\n      var value = e.target.value;\n      _this.props[inputType].onChange && _this.props[inputType].onChange(e);\n\n      _this.setState(function (_ref2) {\n        var _ref3;\n\n        var form = _ref2.form;\n        return _ref3 = {}, _defineProperty(_ref3, inputType, _extends({}, _this.state[inputType], {\n          value: value,\n          showError: false\n        })), _defineProperty(_ref3, 'form', _extends({}, form, {\n          disableSubmit: _this.shouldDisableSubmit(inputType, value)\n        })), _ref3;\n      });\n    }, _this.onInputFocus = function (e, inputType) {\n      _this.props[inputType].onFocus && _this.props[inputType].onFocus(e);\n\n      _this.setState(_defineProperty({}, inputType, _extends({}, _this.state[inputType], {\n        isFocused: true,\n        showError: false\n      })));\n    }, _this.onInputBlur = function (e, inputType) {\n      var _this$setState2;\n\n      _this.props[inputType].onBlur && _this.props[inputType].onBlur(e);\n\n      _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, inputType, _extends({}, _this.state[inputType], {\n        isFocused: false,\n        showError: false\n      })), _defineProperty(_this$setState2, 'isCapsLock', false), _this$setState2));\n    }, _this.onKeyPress = function (e, inputType) {\n      _this.props[inputType].onMouseEnter && _this.props[inputType].onMouseEnter(e);\n\n      _this.handleCapsLock(e);\n    }, _this.onSubmit = function (e) {\n      e.preventDefault();\n\n      if (_this.isFormValid()) {\n        _this.onSubmitStart();\n\n        _this.props.onSubmit(e, _this.onSubmitError);\n      } else {\n        _this.handleOnInputErrors();\n      }\n    }, _this.onSubmitStart = function () {\n      _this.setState(function (_ref4) {\n        var form = _ref4.form;\n        return {\n          form: _extends({}, form, {\n            disableSubmit: true,\n            isSubmitting: true,\n            errors: form.topErrorOnly ? [] : form.topErrorOnly,\n            showError: false\n          })\n        };\n      });\n    }, _this.onSubmitError = function (submitError) {\n      _this.setState(function (_ref5) {\n        var form = _ref5.form;\n        return {\n          form: _extends({}, form, {\n            showError: true,\n            submitError: submitError,\n            errors: [submitError],\n            disableSubmit: false,\n            isSubmitting: false\n          })\n        };\n      });\n    }, _this.getFormError = function () {\n      var _this$state$form = _this.state.form,\n          topErrorOnly = _this$state$form.topErrorOnly,\n          submitError = _this$state$form.submitError,\n          errors = _this$state$form.errors;\n      return topErrorOnly ? errors.map(function (error, index) {\n        return React.createElement('div', {\n          className: 'login-form-error',\n          key: index\n        }, error);\n      }) : submitError;\n    }, _this.getModifiedProps = function () {\n      var _this$state = _this.state,\n          usernameField = _this$state.usernameField,\n          passwordField = _this$state.passwordField,\n          isCapsLock = _this$state.isCapsLock,\n          form = _this$state.form;\n      var warnings = _this.props.passwordField.warnings;\n      var passwordFieldWarningType = _this.state.isCapsLock ? 'capsLock' : _this.state.passwordField.warningType;\n      return {\n        usernameField: _extends({}, _this.props.usernameField, {\n          onChange: function onChange(e) {\n            return _this.onInputChange(e, 'usernameField');\n          },\n          onFocus: function onFocus(e) {\n            return _this.onInputFocus(e, 'usernameField');\n          },\n          onBlur: function onBlur(e) {\n            return _this.onInputBlur(e, 'usernameField');\n          },\n          onKeyPress: function onKeyPress(e) {\n            return _this.onKeyPress(e, 'usernameField');\n          },\n          error: usernameField.error,\n          showError: usernameField.showError\n        }),\n        passwordField: _extends({}, _this.props.passwordField, {\n          onChange: function onChange(e) {\n            return _this.onInputChange(e, 'passwordField');\n          },\n          onFocus: function onFocus(e) {\n            return _this.onInputFocus(e, 'passwordField');\n          },\n          onBlur: function onBlur(e) {\n            return _this.onInputBlur(e, 'passwordField');\n          },\n          onKeyPress: function onKeyPress(e) {\n            return _this.onKeyPress(e, 'passwordField');\n          },\n          warning: warnings && warnings[passwordFieldWarningType],\n          showWarning: passwordField.isFocused && isCapsLock,\n          error: passwordField.error,\n          showError: passwordField.showError\n        }),\n        onSubmit: function onSubmit(e) {\n          return _this.onSubmit(e);\n        },\n        showError: form.showError,\n        disableSubmit: form.disableSubmit,\n        isSubmitting: form.isSubmitting,\n        submitError: _this.getFormError()\n      };\n    }, _this.handleOnInputErrors = function () {\n      var _this$state2 = _this.state,\n          usernameField = _this$state2.usernameField,\n          passwordField = _this$state2.passwordField;\n      var topErrorOnly = _this.props.topErrorOnly;\n      topErrorOnly && _this.clearFormErrors();\n\n      if (usernameField.value) {\n        !_this.isUserNameValid() && _this.handleOnInvalidUsername();\n      } else {\n        _this.handleOnEmptyInput('usernameField');\n      }\n\n      if (passwordField.value) {\n        _this.isPasswordShort() && _this.handleOnPasswordTooShort();\n      } else {\n        _this.handleOnEmptyInput('passwordField');\n      }\n\n      !topErrorOnly && _this.hideSubmitError();\n    }, _this.isFormValid = function () {\n      return !!_this.state.usernameField.value && !!_this.state.passwordField.value && !_this.isPasswordShort() && _this.isUserNameValid();\n    }, _this.isPasswordShort = function () {\n      var passwordMinLength = _this.props.passwordField.minLength;\n      var currentPasswordLength = _this.state.passwordField.value.length;\n      return passwordMinLength > 0 && currentPasswordLength < passwordMinLength;\n    }, _this.hideSubmitError = function () {\n      _this.setState({\n        form: _extends({}, _this.state.form, {\n          showError: false\n        })\n      });\n    }, _this.clearFormErrors = function () {\n      _this.setState(function (_ref6) {\n        var form = _ref6.form;\n        return {\n          form: _extends({}, form, {\n            errors: []\n          })\n        };\n      });\n    }, _this.handleOnPasswordTooShort = function () {\n      var error = _this.props.passwordField.errors.short;\n\n      _this.setState(function (_ref7) {\n        var form = _ref7.form,\n            passwordField = _ref7.passwordField;\n        return form.topErrorOnly ? {\n          form: _extends({}, form, {\n            errors: [].concat(_toConsumableArray(form.errors), [error]),\n            showError: true\n          })\n        } : {\n          passwordField: _extends({}, passwordField, {\n            error: error,\n            showError: true\n          })\n        };\n      });\n    }, _this.handleOnInvalidUsername = function () {\n      var error = _this.props.usernameField.errors.invalid;\n\n      _this.setState(function (_ref8) {\n        var form = _ref8.form,\n            usernameField = _ref8.usernameField;\n        return form.topErrorOnly ? {\n          form: _extends({}, form, {\n            errors: [].concat(_toConsumableArray(form.errors), [error]),\n            showError: true\n          })\n        } : {\n          usernameField: _extends({}, usernameField, {\n            error: error,\n            showError: true\n          })\n        };\n      });\n    }, _this.handleOnEmptyInput = function (inputType) {\n      var error = _this.props[inputType].errors.empty;\n\n      _this.setState(function (_ref9) {\n        var form = _ref9.form;\n        return form.topErrorOnly ? {\n          form: _extends({}, form, {\n            errors: [].concat(_toConsumableArray(form.errors), [error]),\n            showError: true\n          })\n        } : _defineProperty({}, inputType, _extends({}, _this.state[inputType], {\n          error: error,\n          showError: true\n        }));\n      });\n    }, _this.toggleCapsLock = function (e) {\n      if (!_this.state.passwordField.value) {\n        return;\n      }\n\n      e.key === KEYS.CAPSLOCK && _this.setState({\n        isCapsLock: !_this.state.isCapsLock\n      });\n    }, _this.handleCapsLock = function (e) {\n      var keyCode = e.keyCode ? e.keyCode : e.which;\n      var shiftKey = e.shiftKey ? e.shiftKey : keyCode === KEY_CODES.SHIFT;\n      var isCapsLock = keyCode >= KEY_CODES.A && keyCode <= KEY_CODES.Z && !shiftKey || keyCode >= KEY_CODES.NUMPAD['0'] && keyCode <= KEY_CODES.F11 && shiftKey;\n\n      _this.setState({\n        isCapsLock: isCapsLock\n      });\n    }, _this.isUserNameValid = function () {\n      var userType = _this.props.usernameField.type;\n\n      if (userType === 'email') {\n        var mailAddress = _this.state.usernameField.value;\n        var atPos = mailAddress.indexOf('@');\n        var dotPos = mailAddress.lastIndexOf('.');\n        return atPos > 1 && dotPos - atPos > 2 && atPos < dotPos;\n      }\n\n      return true;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(LoginCardWithValidation, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('keyup', this.toggleCapsLock);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('keyup', this.toggleCapsLock);\n    } // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          validate = _props.validate,\n          children = _props.children;\n      return validate ? React.cloneElement(children, _extends({}, this.props, this.getModifiedProps())) : React.cloneElement(children, _extends({}, this.props));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      // disableSubmit prop will only be used in a not validated login card\n      var validate = props.validate,\n          disableSubmit = props.disableSubmit;\n      if (validate) return null;\n\n      if (disableSubmit !== state.form.disableSubmit) {\n        return {\n          form: {\n            disableSubmit: disableSubmit\n          }\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return LoginCardWithValidation;\n}(React.Component);\n\nLoginCardWithValidation.propTypes = {\n  validate: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  usernameField: PropTypes.shape(_extends({}, LoginCardInput.propTypes, {\n    errors: PropTypes.object\n  })),\n  passwordField: PropTypes.shape(_extends({}, LoginCardInput.propTypes, {\n    errors: PropTypes.object,\n    warnings: PropTypes.object,\n    minLength: PropTypes.number\n  })),\n  onSubmit: PropTypes.func,\n  submitError: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  // eslint-disable-next-line react/no-unused-prop-types\n  disableSubmit: PropTypes.bool,\n  isSubmitting: PropTypes.bool,\n  showError: PropTypes.bool,\n  topErrorOnly: PropTypes.bool\n};\nLoginCardWithValidation.defaultProps = {\n  validate: true,\n  usernameField: _extends({}, LoginCardInput.defaultProps.usernameField),\n  passwordField: _extends({}, LoginCardInput.defaultProps.passwordField),\n  onSubmit: function onSubmit(e) {\n    return e.target.submit();\n  },\n  submitError: null,\n  disableSubmit: false,\n  isSubmitting: false,\n  showError: false,\n  topErrorOnly: false\n};\nexport default LoginCardWithValidation;","map":null,"metadata":{},"sourceType":"module"}