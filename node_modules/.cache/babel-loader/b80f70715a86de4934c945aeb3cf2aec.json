{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ProgressBar } from '../ProgressBar';\nimport { OverlayTrigger } from '../OverlayTrigger';\nimport { Tooltip } from '../Tooltip';\nimport { labelClasses, mainDivClasses, barStyle } from './helpers';\n\nvar randomId = function randomId() {\n  return Date.now();\n};\n\nvar AvailableTooltipFunction = function AvailableTooltipFunction(max, now) {\n  return React.createElement(Tooltip, {\n    id: randomId()\n  }, 'Available ', max - now, ' %');\n};\n\nvar UsedTooltipFunction = function UsedTooltipFunction(max, now) {\n  return React.createElement(Tooltip, {\n    id: randomId()\n  }, 'Used ', now, ' %');\n};\n\nvar UtilizationBar = function UtilizationBar(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      now = _ref.now,\n      availableTooltipFunction = _ref.availableTooltipFunction,\n      usedTooltipFunction = _ref.usedTooltipFunction,\n      descriptionPlacementTop = _ref.descriptionPlacementTop,\n      description = _ref.description,\n      thresholdWarning = _ref.thresholdWarning,\n      thresholdError = _ref.thresholdError,\n      label = _ref.label,\n      className = _ref.className;\n  return React.createElement('div', {\n    className: mainDivClasses(!descriptionPlacementTop, className, description, label)\n  }, React.createElement('div', {\n    className: descriptionPlacementTop ? null : 'progress-bar'\n  }, label && React.createElement('span', {\n    className: labelClasses(descriptionPlacementTop)\n  }, label), description && React.createElement('div', {\n    className: 'progress-description label-text'\n  }, description)), React.createElement('div', {\n    className: 'progress'\n  }, React.createElement(OverlayTrigger, {\n    overlay: usedTooltipFunction(max, now),\n    placement: 'top',\n    trigger: ['hover', 'focus'],\n    rootClose: false\n  }, React.createElement(ProgressBar, {\n    bsStyle: barStyle(thresholdWarning, thresholdError, now),\n    min: min,\n    max: max,\n    now: now,\n    key: 1,\n    isChild: true\n  })), React.createElement(OverlayTrigger, {\n    overlay: availableTooltipFunction(max, now),\n    placement: 'top',\n    trigger: ['hover', 'focus'],\n    rootClose: false\n  }, React.createElement(ProgressBar, {\n    min: min,\n    max: max,\n    now: max - now,\n    key: 2,\n    bsClass: 'progress-bar progress-bar-remaining',\n    isChild: true\n  }))));\n};\n\nUtilizationBar.propTypes = {\n  /** Minimal value */\n  min: PropTypes.number,\n\n  /** Maximal value */\n  max: PropTypes.number,\n\n  /** Current value */\n  now: PropTypes.number.isRequired,\n\n  /** Threshold value. Bar will change value to orange if it's surpassed. */\n  thresholdWarning: PropTypes.number,\n\n  /** Threshold value. Bar will change value to red if it's surpassed.  */\n  thresholdError: PropTypes.number,\n\n  /** Function that renders tooltip for available part of bar. Takes params max and now. */\n  availableTooltipFunction: PropTypes.func,\n\n  /** Function that renders tooltip for used part of bar. Takes params max and now. */\n  usedTooltipFunction: PropTypes.func,\n\n  /** Description that is displayed on the right side */\n  description: PropTypes.node,\n\n  /** Units */\n  label: PropTypes.node,\n\n  /** If set labels will be placed above utilization bar */\n  descriptionPlacementTop: PropTypes.bool,\n\n  /** User's custom classes */\n  className: PropTypes.string\n};\nUtilizationBar.defaultProps = {\n  min: 0,\n  max: 100,\n  availableTooltipFunction: AvailableTooltipFunction,\n  usedTooltipFunction: UsedTooltipFunction,\n  descriptionPlacementTop: false,\n  thresholdWarning: null,\n  thresholdError: null,\n  description: null,\n  label: null,\n  className: null\n};\nexport default UtilizationBar;","map":null,"metadata":{},"sourceType":"module"}