{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport PaginationRowAmountOfPages from './PaginationRowAmountOfPages';\nimport PaginationRowButtonGroup from './PaginationRowButtonGroup';\nimport PaginationRowItems from './PaginationRowItems';\nimport PaginationRowBack from './PaginationRowBack';\nimport PaginationRowForward from './PaginationRowForward';\nimport { noop } from '../../common/helpers';\nimport { PAGINATION_VIEW_TYPES, PAGINATION_VIEW } from './PaginationConstants';\nimport { Form, FormControl, FormGroup, ControlLabel } from '../Form';\nimport { DropdownButton } from '../Button';\nimport { MenuItem } from '../MenuItem';\nimport PaginationRowArrowIcon from './PaginationRowArrowIcon';\n/**\n * PaginationRow component for Patternfly React\n */\n\nvar PaginationRow = function PaginationRow(_ref) {\n  var baseClassName = _ref.baseClassName,\n      className = _ref.className,\n      viewType = _ref.viewType,\n      pagination = _ref.pagination,\n      pageSizeDropUp = _ref.pageSizeDropUp,\n      pageInputValue = _ref.pageInputValue,\n      amountOfPages = _ref.amountOfPages,\n      itemCount = _ref.itemCount,\n      itemsStart = _ref.itemsStart,\n      itemsEnd = _ref.itemsEnd,\n      messages = _ref.messages,\n      dropdownButtonId = _ref.dropdownButtonId,\n      _onSubmit = _ref.onSubmit,\n      onPerPageSelect = _ref.onPerPageSelect,\n      onFirstPage = _ref.onFirstPage,\n      onPreviousPage = _ref.onPreviousPage,\n      onPageInput = _ref.onPageInput,\n      onNextPage = _ref.onNextPage,\n      onLastPage = _ref.onLastPage;\n  var page = pagination.page,\n      perPage = pagination.perPage,\n      _pagination$perPageOp = pagination.perPageOptions,\n      perPageOptions = _pagination$perPageOp === undefined ? [] : _pagination$perPageOp;\n  var classes = classNames(baseClassName, className, {\n    'list-view-pf-pagination': viewType === PAGINATION_VIEW.LIST,\n    'card-view-pf-pagination': viewType === PAGINATION_VIEW.CARD,\n    'table-view-pf-pagination': viewType === PAGINATION_VIEW.TABLE,\n    clearfix: true\n  });\n  var pageValue = pageInputValue !== undefined ? pageInputValue : page;\n  return React.createElement(Form, {\n    className: classes,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n\n      _onSubmit(e);\n    }\n  }, React.createElement(FormGroup, null, React.createElement(DropdownButton, {\n    title: perPage,\n    dropup: pageSizeDropUp,\n    componentClass: PaginationRowButtonGroup,\n    onSelect: onPerPageSelect,\n    id: dropdownButtonId\n  }, perPageOptions.map(function (option, i) {\n    return React.createElement(MenuItem, {\n      eventKey: option,\n      active: option === perPage,\n      key: i\n    }, option);\n  })), React.createElement('span', null, messages.perPage)), React.createElement(FormGroup, null, React.createElement(PaginationRowItems, {\n    itemCount: itemCount,\n    itemsStart: itemsStart,\n    itemsEnd: itemsEnd,\n    messagesOf: messages.of\n  }), React.createElement(PaginationRowBack, {\n    page: page,\n    messagesFirstPage: messages.firstPage,\n    messagesPreviousPage: messages.previousPage,\n    onFirstPage: onFirstPage,\n    onPreviousPage: onPreviousPage\n  }), React.createElement(ControlLabel, {\n    className: 'sr-only'\n  }, messages.currentPage), React.createElement(FormControl, {\n    className: 'pagination-pf-page',\n    type: 'text',\n    value: pageValue,\n    onChange: onPageInput\n  }), React.createElement(PaginationRowAmountOfPages, {\n    messagesOf: messages.of,\n    amountOfPages: amountOfPages\n  }), React.createElement(PaginationRowForward, {\n    page: page,\n    amountOfPages: amountOfPages,\n    messagesNextPage: messages.nextPage,\n    messagesLastPage: messages.lastPage,\n    onNextPage: onNextPage,\n    onLastPage: onLastPage\n  })));\n};\n\nPaginationRow.propTypes = {\n  /** Base css class */\n  baseClassName: PropTypes.string,\n\n  /** Additional css classes */\n  className: PropTypes.string,\n\n  /** pagination row view type */\n  viewType: PropTypes.oneOf(PAGINATION_VIEW_TYPES).isRequired,\n\n  /** user pagination settings */\n  pagination: PropTypes.shape({\n    /** the current page */\n    page: PropTypes.number.isRequired,\n\n    /** the current per page setting */\n    perPage: PropTypes.number.isRequired,\n\n    /** per page options */\n    perPageOptions: PropTypes.array\n  }).isRequired,\n\n  /** Page size button drops up */\n  pageSizeDropUp: PropTypes.bool,\n\n  /** page input (optional override for page input) */\n  pageInputValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /** calculated amount of pages */\n  amountOfPages: PropTypes.number.isRequired,\n\n  /** calculated number of rows */\n  itemCount: PropTypes.number.isRequired,\n\n  /** calculated items start */\n  itemsStart: PropTypes.number.isRequired,\n\n  /** calculated items end */\n  itemsEnd: PropTypes.number.isRequired,\n\n  /** message text inputs for i18n */\n  messages: PropTypes.shape({\n    firstPage: PropTypes.string,\n    previousPage: PropTypes.string,\n    nextPage: PropTypes.string,\n    lastPage: PropTypes.string,\n    perPage: PropTypes.string,\n    of: PropTypes.string\n  }),\n\n  /** dropdown button id */\n  dropdownButtonId: PropTypes.string,\n\n  /** onSubmit callback */\n  onSubmit: PropTypes.func,\n\n  /** per page selection callback */\n  onPerPageSelect: PropTypes.func,\n\n  /** first page callback */\n  onFirstPage: PropTypes.func,\n\n  /** previous page selection callback */\n  onPreviousPage: PropTypes.func,\n\n  /** user page input callback */\n  onPageInput: PropTypes.func,\n\n  /** next page callback */\n  onNextPage: PropTypes.func,\n\n  /** last page callback */\n  onLastPage: PropTypes.func\n};\nPaginationRow.defaultProps = {\n  baseClassName: 'content-view-pf-pagination',\n  className: '',\n  messages: {\n    firstPage: 'First Page',\n    previousPage: 'Previous Page',\n    currentPage: 'Current Page',\n    nextPage: 'Next Page',\n    lastPage: 'Last Page',\n    perPage: 'per page',\n    of: 'of'\n  },\n  pageInputValue: '',\n  pageSizeDropUp: true,\n  onSubmit: noop,\n  onPerPageSelect: noop,\n  onFirstPage: noop,\n  onPreviousPage: noop,\n  onPageInput: noop,\n  onNextPage: noop,\n  onLastPage: noop,\n  dropdownButtonId: 'pagination-row-dropdown'\n};\nPaginationRow.AmountOfPages = PaginationRowAmountOfPages;\nPaginationRow.ArrowIcon = PaginationRowArrowIcon;\nPaginationRow.Back = PaginationRowBack;\nPaginationRow.ButtonGroup = PaginationRowButtonGroup;\nPaginationRow.Forward = PaginationRowForward;\nPaginationRow.Items = PaginationRowItems;\nPaginationRow.PAGINATION_VIEW = PAGINATION_VIEW;\nPaginationRow.PAGINATION_VIEW_TYPES = PAGINATION_VIEW_TYPES;\nexport default PaginationRow;","map":null,"metadata":{},"sourceType":"module"}