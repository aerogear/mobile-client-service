{"ast":null,"code":"import _classCallCheck from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { create, getNamespace, getMasterUri, get, update, remove } from './openshift';\nimport { buildsDef, buildConfigsDef, buildConfigInstantiateDef, secretsDef } from '../models/k8s/definitions';\n\nfunction getRequiredSecrets(config) {\n  var secretsToCreate = [];\n\n  if (config && config.source && config.source.basicAuth) {\n    var basicAuthSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.source.basicAuth.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      stringData: {\n        username: config.source.basicAuth.username,\n        password: config.source.basicAuth.password\n      }\n    };\n    secretsToCreate.push(basicAuthSecret);\n  } else if (config && config.source && config.source.sshAuth) {\n    var sshSecret = {\n      kind: 'Secret',\n      type: 'kubernetes.io/ssh-auth',\n      metadata: {\n        name: config.source.sshAuth.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      stringData: {\n        'ssh-privatekey': config.source.sshAuth.privateKey\n      }\n    };\n    secretsToCreate.push(sshSecret);\n  }\n\n  if (config && config.build && config.build.iosCredentials) {\n    var iosSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.build.iosCredentials.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'credential.sync.jenkins.openshift.io': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      data: {\n        'developer-profile': config.build.iosCredentials.developerProfile,\n        password: config.build.iosCredentials.profilePassword\n      }\n    };\n    secretsToCreate.push(iosSecret);\n  }\n\n  if (config && config.build && config.build.androidCredentials) {\n    var androidSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.build.androidCredentials.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'credential.sync.jenkins.openshift.io': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      data: {\n        certificate: config.build.androidCredentials.keystore,\n        password: config.build.iosCredentials.keystorePassword\n      }\n    };\n    secretsToCreate.push(androidSecret);\n  }\n\n  return secretsToCreate;\n}\n\nfunction getSourceConfig(config) {\n  var source = {\n    type: 'git',\n    git: {\n      uri: config.source.gitUrl,\n      ref: config.source.gitRef\n    }\n  };\n\n  if (config && config.source && config.source.basicAuth) {\n    source.sourceSecret = {\n      name: config.source.basicAuth.name\n    };\n  } else if (config && config.source && config.source.sshAuth) {\n    source.sourceSecret = {\n      name: config.source.sshAuth.name\n    };\n  }\n\n  return source;\n}\n\nfunction getJenkinsConfig(config) {\n  var jenkinsConfig = {\n    type: 'JenkinsPipeline',\n    jenkinsPipelineStrategy: {\n      jenkinsfilePath: config.source.jenkinsFilePath,\n      env: [].concat(_toConsumableArray(config.envVars || []), [{\n        name: 'BUILD_CONFIG',\n        value: config.build.buildType\n      }, {\n        name: 'PLATFORM',\n        value: config.build.platform\n      }])\n    }\n  };\n\n  if (config && config.build && config.build.iosCredentials) {\n    jenkinsConfig.jenkinsPipelineStrategy.env.push({\n      name: 'BUILD_CREDENTIAL_ID',\n      value: config.build.iosCredentials.name\n    });\n  }\n\n  if (config && config.build && config.build.androidCredentials) {\n    jenkinsConfig.jenkinsPipelineStrategy.env.push({\n      name: 'BUILD_CREDENTIAL_ID',\n      value: config.build.androidCredentials.name\n    }, {\n      name: 'BUILD_CREDENTIAL_ALIAS',\n      value: config.build.androidCredentials.keystoreAlias\n    });\n  }\n\n  return jenkinsConfig;\n}\n\nvar BuildConfigsService =\n/*#__PURE__*/\nfunction () {\n  function BuildConfigsService() {\n    _classCallCheck(this, BuildConfigsService);\n\n    this.namespace = getNamespace();\n    this.buildRes = buildsDef(this.namespace);\n    this.buildConfigsRes = buildConfigsDef(this.namespace);\n    this.buildConfigInstantiateRes = buildConfigInstantiateDef(this.namespace);\n    this.secretsRes = secretsDef(this.namespace);\n  }\n\n  _createClass(BuildConfigsService, [{\n    key: \"trigger\",\n    value: function trigger(name) {\n      var res = this.buildConfigInstantiateRes(name);\n      var req = {\n        kind: 'BuildRequest',\n        apiVersion: 'build.openshift.io/v1',\n        metadata: {\n          name: name,\n          namespace: this.namespace\n        }\n      };\n      return create(res, req);\n    }\n  }, {\n    key: \"addBuildUrl\",\n    value: function addBuildUrl(build) {\n      var buildConfigName = build.status.config.name;\n      var buildName = build.metadata.name;\n      build.buildUrl = \"\".concat(getMasterUri(), \"/console/project/\").concat(this.namespace, \"/browse/pipelines/\").concat(buildConfigName, \"/\").concat(buildName);\n      return build;\n    }\n  }, {\n    key: \"generateDownloadURL\",\n    value: function generateDownloadURL(name) {\n      var _this = this;\n\n      return get(this.buildRes, name).then(function (build) {\n        build.metadata.annotations['aerogear.org/download-mobile-artifact'] = 'true';\n        return build;\n      }).then(function (build) {\n        return update(_this.buildRes, build);\n      });\n    }\n  }, {\n    key: \"deleteBuildConfig\",\n    value: function deleteBuildConfig(name) {\n      return remove(this.buildConfigsRes, {\n        metadata: {\n          name: name\n        }\n      });\n    }\n  }, {\n    key: \"createBuildConfig\",\n    value: function createBuildConfig(config) {\n      var _this2 = this;\n\n      var secretsToCreate = getRequiredSecrets(config);\n      var buildConfig = {\n        metadata: {\n          name: config.name,\n          namespace: this.namespace,\n          labels: {\n            'mobile-client-build': 'true',\n            'mobile-client-build-platform': config.build.platform,\n            'mobile-client-id': config.clientId\n          }\n        },\n        spec: {\n          source: getSourceConfig(config),\n          strategy: getJenkinsConfig(config)\n        }\n      };\n      var secretsCreates = secretsToCreate.map(function (secret) {\n        return create(_this2.secretsRes, secret);\n      });\n      return create(this.buildConfigsRes, buildConfig).then(function () {\n        return Promise.all(secretsCreates);\n      });\n    }\n  }]);\n\n  return BuildConfigsService;\n}();\n\nvar buildConfigsService = new BuildConfigsService();\nexport { buildConfigsService, BuildConfigsService };","map":{"version":3,"sources":["/Users/weili/work/mobile-next/golang/src/github.com/aerogear/mobile-developer-console/src/services/buildconfigs.js"],"names":["create","getNamespace","getMasterUri","get","update","remove","buildsDef","buildConfigsDef","buildConfigInstantiateDef","secretsDef","getRequiredSecrets","config","secretsToCreate","source","basicAuth","basicAuthSecret","kind","type","metadata","name","labels","clientId","stringData","username","password","push","sshAuth","sshSecret","privateKey","build","iosCredentials","iosSecret","data","developerProfile","profilePassword","androidCredentials","androidSecret","certificate","keystore","keystorePassword","getSourceConfig","git","uri","gitUrl","ref","gitRef","sourceSecret","getJenkinsConfig","jenkinsConfig","jenkinsPipelineStrategy","jenkinsfilePath","jenkinsFilePath","env","envVars","value","buildType","platform","keystoreAlias","BuildConfigsService","namespace","buildRes","buildConfigsRes","buildConfigInstantiateRes","secretsRes","res","req","apiVersion","buildConfigName","status","buildName","buildUrl","then","annotations","buildConfig","spec","strategy","secretsCreates","map","secret","Promise","all","buildConfigsService"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,GAA7C,EAAkDC,MAAlD,EAA0DC,MAA1D,QAAwE,aAAxE;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,yBAArC,EAAgEC,UAAhE,QAAkF,2BAAlF;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC,MAAMC,eAAe,GAAG,EAAxB;;AACA,MAAID,MAAM,IAAIA,MAAM,CAACE,MAAjB,IAA2BF,MAAM,CAACE,MAAP,CAAcC,SAA7C,EAAwD;AACtD,QAAMC,eAAe,GAAG;AACtBC,MAAAA,IAAI,EAAE,QADgB;AAEtBC,MAAAA,IAAI,EAAE,QAFgB;AAGtBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAER,MAAM,CAACE,MAAP,CAAcC,SAAd,CAAwBK,IADtB;AAERC,QAAAA,MAAM,EAAE;AACN,iCAAuB,MADjB;AAEN,8BAAoBT,MAAM,CAACU;AAFrB;AAFA,OAHY;AAUtBC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAEZ,MAAM,CAACE,MAAP,CAAcC,SAAd,CAAwBS,QADxB;AAEVC,QAAAA,QAAQ,EAAEb,MAAM,CAACE,MAAP,CAAcC,SAAd,CAAwBU;AAFxB;AAVU,KAAxB;AAeAZ,IAAAA,eAAe,CAACa,IAAhB,CAAqBV,eAArB;AACD,GAjBD,MAiBO,IAAIJ,MAAM,IAAIA,MAAM,CAACE,MAAjB,IAA2BF,MAAM,CAACE,MAAP,CAAca,OAA7C,EAAsD;AAC3D,QAAMC,SAAS,GAAG;AAChBX,MAAAA,IAAI,EAAE,QADU;AAEhBC,MAAAA,IAAI,EAAE,wBAFU;AAGhBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAER,MAAM,CAACE,MAAP,CAAca,OAAd,CAAsBP,IADpB;AAERC,QAAAA,MAAM,EAAE;AACN,iCAAuB,MADjB;AAEN,8BAAoBT,MAAM,CAACU;AAFrB;AAFA,OAHM;AAUhBC,MAAAA,UAAU,EAAE;AACV,0BAAkBX,MAAM,CAACE,MAAP,CAAca,OAAd,CAAsBE;AAD9B;AAVI,KAAlB;AAcAhB,IAAAA,eAAe,CAACa,IAAhB,CAAqBE,SAArB;AACD;;AACD,MAAIhB,MAAM,IAAIA,MAAM,CAACkB,KAAjB,IAA0BlB,MAAM,CAACkB,KAAP,CAAaC,cAA3C,EAA2D;AACzD,QAAMC,SAAS,GAAG;AAChBf,MAAAA,IAAI,EAAE,QADU;AAEhBC,MAAAA,IAAI,EAAE,QAFU;AAGhBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAER,MAAM,CAACkB,KAAP,CAAaC,cAAb,CAA4BX,IAD1B;AAERC,QAAAA,MAAM,EAAE;AACN,iCAAuB,MADjB;AAEN,kDAAwC,MAFlC;AAGN,8BAAoBT,MAAM,CAACU;AAHrB;AAFA,OAHM;AAWhBW,MAAAA,IAAI,EAAE;AACJ,6BAAqBrB,MAAM,CAACkB,KAAP,CAAaC,cAAb,CAA4BG,gBAD7C;AAEJT,QAAAA,QAAQ,EAAEb,MAAM,CAACkB,KAAP,CAAaC,cAAb,CAA4BI;AAFlC;AAXU,KAAlB;AAgBAtB,IAAAA,eAAe,CAACa,IAAhB,CAAqBM,SAArB;AACD;;AACD,MAAIpB,MAAM,IAAIA,MAAM,CAACkB,KAAjB,IAA0BlB,MAAM,CAACkB,KAAP,CAAaM,kBAA3C,EAA+D;AAC7D,QAAMC,aAAa,GAAG;AACpBpB,MAAAA,IAAI,EAAE,QADc;AAEpBC,MAAAA,IAAI,EAAE,QAFc;AAGpBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAER,MAAM,CAACkB,KAAP,CAAaM,kBAAb,CAAgChB,IAD9B;AAERC,QAAAA,MAAM,EAAE;AACN,iCAAuB,MADjB;AAEN,kDAAwC,MAFlC;AAGN,8BAAoBT,MAAM,CAACU;AAHrB;AAFA,OAHU;AAWpBW,MAAAA,IAAI,EAAE;AACJK,QAAAA,WAAW,EAAE1B,MAAM,CAACkB,KAAP,CAAaM,kBAAb,CAAgCG,QADzC;AAEJd,QAAAA,QAAQ,EAAEb,MAAM,CAACkB,KAAP,CAAaC,cAAb,CAA4BS;AAFlC;AAXc,KAAtB;AAgBA3B,IAAAA,eAAe,CAACa,IAAhB,CAAqBW,aAArB;AACD;;AACD,SAAOxB,eAAP;AACD;;AAED,SAAS4B,eAAT,CAAyB7B,MAAzB,EAAiC;AAC/B,MAAME,MAAM,GAAG;AACbI,IAAAA,IAAI,EAAE,KADO;AAEbwB,IAAAA,GAAG,EAAE;AACHC,MAAAA,GAAG,EAAE/B,MAAM,CAACE,MAAP,CAAc8B,MADhB;AAEHC,MAAAA,GAAG,EAAEjC,MAAM,CAACE,MAAP,CAAcgC;AAFhB;AAFQ,GAAf;;AAOA,MAAIlC,MAAM,IAAIA,MAAM,CAACE,MAAjB,IAA2BF,MAAM,CAACE,MAAP,CAAcC,SAA7C,EAAwD;AACtDD,IAAAA,MAAM,CAACiC,YAAP,GAAsB;AAAE3B,MAAAA,IAAI,EAAER,MAAM,CAACE,MAAP,CAAcC,SAAd,CAAwBK;AAAhC,KAAtB;AACD,GAFD,MAEO,IAAIR,MAAM,IAAIA,MAAM,CAACE,MAAjB,IAA2BF,MAAM,CAACE,MAAP,CAAca,OAA7C,EAAsD;AAC3Db,IAAAA,MAAM,CAACiC,YAAP,GAAsB;AAAE3B,MAAAA,IAAI,EAAER,MAAM,CAACE,MAAP,CAAca,OAAd,CAAsBP;AAA9B,KAAtB;AACD;;AACD,SAAON,MAAP;AACD;;AAED,SAASkC,gBAAT,CAA0BpC,MAA1B,EAAkC;AAChC,MAAMqC,aAAa,GAAG;AACpB/B,IAAAA,IAAI,EAAE,iBADc;AAEpBgC,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,eAAe,EAAEvC,MAAM,CAACE,MAAP,CAAcsC,eADR;AAEvBC,MAAAA,GAAG,+BACGzC,MAAM,CAAC0C,OAAP,IAAkB,EADrB,IAED;AAAElC,QAAAA,IAAI,EAAE,cAAR;AAAwBmC,QAAAA,KAAK,EAAE3C,MAAM,CAACkB,KAAP,CAAa0B;AAA5C,OAFC,EAGD;AAAEpC,QAAAA,IAAI,EAAE,UAAR;AAAoBmC,QAAAA,KAAK,EAAE3C,MAAM,CAACkB,KAAP,CAAa2B;AAAxC,OAHC;AAFoB;AAFL,GAAtB;;AAWA,MAAI7C,MAAM,IAAIA,MAAM,CAACkB,KAAjB,IAA0BlB,MAAM,CAACkB,KAAP,CAAaC,cAA3C,EAA2D;AACzDkB,IAAAA,aAAa,CAACC,uBAAd,CAAsCG,GAAtC,CAA0C3B,IAA1C,CAA+C;AAC7CN,MAAAA,IAAI,EAAE,qBADuC;AAE7CmC,MAAAA,KAAK,EAAE3C,MAAM,CAACkB,KAAP,CAAaC,cAAb,CAA4BX;AAFU,KAA/C;AAID;;AACD,MAAIR,MAAM,IAAIA,MAAM,CAACkB,KAAjB,IAA0BlB,MAAM,CAACkB,KAAP,CAAaM,kBAA3C,EAA+D;AAC7Da,IAAAA,aAAa,CAACC,uBAAd,CAAsCG,GAAtC,CAA0C3B,IAA1C,CACE;AAAEN,MAAAA,IAAI,EAAE,qBAAR;AAA+BmC,MAAAA,KAAK,EAAE3C,MAAM,CAACkB,KAAP,CAAaM,kBAAb,CAAgChB;AAAtE,KADF,EAEE;AAAEA,MAAAA,IAAI,EAAE,wBAAR;AAAkCmC,MAAAA,KAAK,EAAE3C,MAAM,CAACkB,KAAP,CAAaM,kBAAb,CAAgCsB;AAAzE,KAFF;AAID;;AACD,SAAOT,aAAP;AACD;;IAEKU,mB;;;AACJ,iCAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB1D,YAAY,EAA7B;AACA,SAAK2D,QAAL,GAAgBtD,SAAS,CAAC,KAAKqD,SAAN,CAAzB;AACA,SAAKE,eAAL,GAAuBtD,eAAe,CAAC,KAAKoD,SAAN,CAAtC;AACA,SAAKG,yBAAL,GAAiCtD,yBAAyB,CAAC,KAAKmD,SAAN,CAA1D;AACA,SAAKI,UAAL,GAAkBtD,UAAU,CAAC,KAAKkD,SAAN,CAA5B;AACD;;;;4BAEOxC,I,EAAM;AACZ,UAAM6C,GAAG,GAAG,KAAKF,yBAAL,CAA+B3C,IAA/B,CAAZ;AACA,UAAM8C,GAAG,GAAG;AACVjD,QAAAA,IAAI,EAAE,cADI;AAEVkD,QAAAA,UAAU,EAAE,uBAFF;AAGVhD,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAJA,IADQ;AAERwC,UAAAA,SAAS,EAAE,KAAKA;AAFR;AAHA,OAAZ;AAQA,aAAO3D,MAAM,CAACgE,GAAD,EAAMC,GAAN,CAAb;AACD;;;gCAEWpC,K,EAAO;AACjB,UAAMsC,eAAe,GAAGtC,KAAK,CAACuC,MAAN,CAAazD,MAAb,CAAoBQ,IAA5C;AACA,UAAMkD,SAAS,GAAGxC,KAAK,CAACX,QAAN,CAAeC,IAAjC;AACAU,MAAAA,KAAK,CAACyC,QAAN,aAAoBpE,YAAY,EAAhC,8BACE,KAAKyD,SADP,+BAEqBQ,eAFrB,cAEwCE,SAFxC;AAGA,aAAOxC,KAAP;AACD;;;wCAEmBV,I,EAAM;AAAA;;AACxB,aAAOhB,GAAG,CAAC,KAAKyD,QAAN,EAAgBzC,IAAhB,CAAH,CACJoD,IADI,CACC,UAAA1C,KAAK,EAAI;AACbA,QAAAA,KAAK,CAACX,QAAN,CAAesD,WAAf,CAA2B,uCAA3B,IAAsE,MAAtE;AACA,eAAO3C,KAAP;AACD,OAJI,EAKJ0C,IALI,CAKC,UAAA1C,KAAK;AAAA,eAAIzB,MAAM,CAAC,KAAI,CAACwD,QAAN,EAAgB/B,KAAhB,CAAV;AAAA,OALN,CAAP;AAMD;;;sCAEiBV,I,EAAM;AACtB,aAAOd,MAAM,CAAC,KAAKwD,eAAN,EAAuB;AAAE3C,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAJA;AAAF;AAAZ,OAAvB,CAAb;AACD;;;sCAEiBR,M,EAAQ;AAAA;;AACxB,UAAMC,eAAe,GAAGF,kBAAkB,CAACC,MAAD,CAA1C;AACA,UAAM8D,WAAW,GAAG;AAClBvD,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAER,MAAM,CAACQ,IADL;AAERwC,UAAAA,SAAS,EAAE,KAAKA,SAFR;AAGRvC,UAAAA,MAAM,EAAE;AACN,mCAAuB,MADjB;AAEN,4CAAgCT,MAAM,CAACkB,KAAP,CAAa2B,QAFvC;AAGN,gCAAoB7C,MAAM,CAACU;AAHrB;AAHA,SADQ;AAUlBqD,QAAAA,IAAI,EAAE;AACJ7D,UAAAA,MAAM,EAAE2B,eAAe,CAAC7B,MAAD,CADnB;AAEJgE,UAAAA,QAAQ,EAAE5B,gBAAgB,CAACpC,MAAD;AAFtB;AAVY,OAApB;AAeA,UAAMiE,cAAc,GAAGhE,eAAe,CAACiE,GAAhB,CAAoB,UAAAC,MAAM;AAAA,eAAI9E,MAAM,CAAC,MAAI,CAAC+D,UAAN,EAAkBe,MAAlB,CAAV;AAAA,OAA1B,CAAvB;AACA,aAAO9E,MAAM,CAAC,KAAK6D,eAAN,EAAuBY,WAAvB,CAAN,CAA0CF,IAA1C,CAA+C;AAAA,eAAMQ,OAAO,CAACC,GAAR,CAAYJ,cAAZ,CAAN;AAAA,OAA/C,CAAP;AACD;;;;;;AAGH,IAAMK,mBAAmB,GAAG,IAAIvB,mBAAJ,EAA5B;AACA,SAASuB,mBAAT,EAA8BvB,mBAA9B","sourcesContent":["import { create, getNamespace, getMasterUri, get, update, remove } from './openshift';\nimport { buildsDef, buildConfigsDef, buildConfigInstantiateDef, secretsDef } from '../models/k8s/definitions';\n\nfunction getRequiredSecrets(config) {\n  const secretsToCreate = [];\n  if (config && config.source && config.source.basicAuth) {\n    const basicAuthSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.source.basicAuth.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      stringData: {\n        username: config.source.basicAuth.username,\n        password: config.source.basicAuth.password\n      }\n    };\n    secretsToCreate.push(basicAuthSecret);\n  } else if (config && config.source && config.source.sshAuth) {\n    const sshSecret = {\n      kind: 'Secret',\n      type: 'kubernetes.io/ssh-auth',\n      metadata: {\n        name: config.source.sshAuth.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      stringData: {\n        'ssh-privatekey': config.source.sshAuth.privateKey\n      }\n    };\n    secretsToCreate.push(sshSecret);\n  }\n  if (config && config.build && config.build.iosCredentials) {\n    const iosSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.build.iosCredentials.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'credential.sync.jenkins.openshift.io': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      data: {\n        'developer-profile': config.build.iosCredentials.developerProfile,\n        password: config.build.iosCredentials.profilePassword\n      }\n    };\n    secretsToCreate.push(iosSecret);\n  }\n  if (config && config.build && config.build.androidCredentials) {\n    const androidSecret = {\n      kind: 'Secret',\n      type: 'Opaque',\n      metadata: {\n        name: config.build.androidCredentials.name,\n        labels: {\n          'mobile-client-build': 'true',\n          'credential.sync.jenkins.openshift.io': 'true',\n          'mobile-client-id': config.clientId\n        }\n      },\n      data: {\n        certificate: config.build.androidCredentials.keystore,\n        password: config.build.iosCredentials.keystorePassword\n      }\n    };\n    secretsToCreate.push(androidSecret);\n  }\n  return secretsToCreate;\n}\n\nfunction getSourceConfig(config) {\n  const source = {\n    type: 'git',\n    git: {\n      uri: config.source.gitUrl,\n      ref: config.source.gitRef\n    }\n  };\n  if (config && config.source && config.source.basicAuth) {\n    source.sourceSecret = { name: config.source.basicAuth.name };\n  } else if (config && config.source && config.source.sshAuth) {\n    source.sourceSecret = { name: config.source.sshAuth.name };\n  }\n  return source;\n}\n\nfunction getJenkinsConfig(config) {\n  const jenkinsConfig = {\n    type: 'JenkinsPipeline',\n    jenkinsPipelineStrategy: {\n      jenkinsfilePath: config.source.jenkinsFilePath,\n      env: [\n        ...(config.envVars || []),\n        { name: 'BUILD_CONFIG', value: config.build.buildType },\n        { name: 'PLATFORM', value: config.build.platform }\n      ]\n    }\n  };\n  if (config && config.build && config.build.iosCredentials) {\n    jenkinsConfig.jenkinsPipelineStrategy.env.push({\n      name: 'BUILD_CREDENTIAL_ID',\n      value: config.build.iosCredentials.name\n    });\n  }\n  if (config && config.build && config.build.androidCredentials) {\n    jenkinsConfig.jenkinsPipelineStrategy.env.push(\n      { name: 'BUILD_CREDENTIAL_ID', value: config.build.androidCredentials.name },\n      { name: 'BUILD_CREDENTIAL_ALIAS', value: config.build.androidCredentials.keystoreAlias }\n    );\n  }\n  return jenkinsConfig;\n}\n\nclass BuildConfigsService {\n  constructor() {\n    this.namespace = getNamespace();\n    this.buildRes = buildsDef(this.namespace);\n    this.buildConfigsRes = buildConfigsDef(this.namespace);\n    this.buildConfigInstantiateRes = buildConfigInstantiateDef(this.namespace);\n    this.secretsRes = secretsDef(this.namespace);\n  }\n\n  trigger(name) {\n    const res = this.buildConfigInstantiateRes(name);\n    const req = {\n      kind: 'BuildRequest',\n      apiVersion: 'build.openshift.io/v1',\n      metadata: {\n        name,\n        namespace: this.namespace\n      }\n    };\n    return create(res, req);\n  }\n\n  addBuildUrl(build) {\n    const buildConfigName = build.status.config.name;\n    const buildName = build.metadata.name;\n    build.buildUrl = `${getMasterUri()}/console/project/${\n      this.namespace\n    }/browse/pipelines/${buildConfigName}/${buildName}`;\n    return build;\n  }\n\n  generateDownloadURL(name) {\n    return get(this.buildRes, name)\n      .then(build => {\n        build.metadata.annotations['aerogear.org/download-mobile-artifact'] = 'true';\n        return build;\n      })\n      .then(build => update(this.buildRes, build));\n  }\n\n  deleteBuildConfig(name) {\n    return remove(this.buildConfigsRes, { metadata: { name } });\n  }\n\n  createBuildConfig(config) {\n    const secretsToCreate = getRequiredSecrets(config);\n    const buildConfig = {\n      metadata: {\n        name: config.name,\n        namespace: this.namespace,\n        labels: {\n          'mobile-client-build': 'true',\n          'mobile-client-build-platform': config.build.platform,\n          'mobile-client-id': config.clientId\n        }\n      },\n      spec: {\n        source: getSourceConfig(config),\n        strategy: getJenkinsConfig(config)\n      }\n    };\n    const secretsCreates = secretsToCreate.map(secret => create(this.secretsRes, secret));\n    return create(this.buildConfigsRes, buildConfig).then(() => Promise.all(secretsCreates));\n  }\n}\n\nconst buildConfigsService = new BuildConfigsService();\nexport { buildConfigsService, BuildConfigsService };\n"]},"metadata":{},"sourceType":"module"}